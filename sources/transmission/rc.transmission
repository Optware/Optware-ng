#!/bin/sh
PATH=%OPTWARE_TARGET_PREFIX%/bin:%OPTWARE_TARGET_PREFIX%/sbin:${PATH}
#######################################################################
# (1) run process from superuser root (less security)
# (0) run process from unprivileged user "nobody" (more security)
SVC_ROOT=1

# process priority (0-normal, 19-lowest)
SVC_PRIORITY=10

# access control list for transmission RPC. Please add actual address mask.
RPC_ACL="*.*.*.*"

# if not empty, use as the root download dir
DIR_DL=""

# relative path for downloads, searching on all writable ext*/fat/ntfs mounts,
# starting from those that were mounted first
# use if DIR_DL is empty.
# Note: if both DIR_DL and REL_DLPATH are empty,
# the script doesn't set download dirs when starting transmission-daemon,
# not overriding values in settings.json
REL_DLPATH=""
#######################################################################

SVC_NAME="transmission-daemon"
SVC_PATH="%OPTWARE_TARGET_PREFIX%/bin/transmission-daemon"
DIR_CONF="%OPTWARE_TARGET_PREFIX%/etc/transmission-daemon"
START_STOP_DAEMON=%OPTWARE_TARGET_PREFIX%/sbin/start-stop-daemon-start-stop-daemon

func_start()
{
	# Make sure already running
	if [ -n "`pidof transmission-daemon`" ] ; then
		echo "$SVC_NAME already running!"
		return 0
	fi
	
	echo -n "Starting $SVC_NAME:."
	logger -t "$SVC_NAME" "Starting $SVC_NAME..."

	if [ -n "${DIR_DL}" ] || [ -n "${REL_DLPATH}" ]; then
		if [ -z "${DIR_DL}" ]; then
			# first, try to find download directory on all writable ext*/fat/ntfs mounts
			DIR_OK=""
			for disk_path in `mount | egrep -v "\sro[\s,]"|egrep 'type ext|type vfat|type fuse|type msdos|type umsdos' | cut -d ' ' -f3`; do
				[ -z "${DIR_OK}" ] && DIR_OK="${disk_path}"
				if [ -d "${disk_path}/${REL_DLPATH}" ] ; then
						DIR_DL="${disk_path}/${REL_DLPATH}"
						break
				fi
			done

			if [ -z "${DIR_OK}" ] ; then
				echo "[FAILED]" >&2
				logger -t "$SVC_NAME" "Cannot start $SVC_NAME by reason - unable to find target drive!"
				return 1
			fi
	
			# if not found, use first mounted drive
			[ -z "${DIR_DL}" ] && DIR_DL="${DIR_OK}/${REL_DLPATH}"
		fi

	
		DIR_DL1="${DIR_DL}/Complete"
		DIR_DL2="${DIR_DL}/Incomplete"
		DIR_DL3="${DIR_DL}/Watch"
		[ ! -d "$DIR_DL1" ] && mkdir -p "$DIR_DL1"
		[ ! -d "$DIR_DL2" ] && mkdir -p "$DIR_DL2"
		[ ! -d "$DIR_DL3" ] && mkdir -p "$DIR_DL3"
	fi

	DIR_LOG="%OPTWARE_TARGET_PREFIX%/var/log"
	
	[ ! -d "$DIR_CONF" ] && mkdir -p "$DIR_CONF"
	[ ! -d "$DIR_LOG" ] && mkdir -p "$DIR_LOG"
	
	export TRANSMISSION_WEB_HOME="%OPTWARE_TARGET_PREFIX%/share/transmission/web"
	
	# full acces for watch dir
	[ -n "${DIR_DL}" ] && chmod 777 "$DIR_DL3"
	
	if [ $SVC_ROOT -eq 0 ] ; then
		chown -R nobody "$DIR_CONF"
		[ -n "${DIR_DL}" ] && chown -R nobody "$DIR_DL2"
		[ -n "${DIR_DL}" ] && chmod -R 777 "$DIR_DL1"
		touch ${DIR_LOG}/${SVC_NAME}
		chown nobody ${DIR_LOG}/${SVC_NAME}
		if [ -n "${DIR_DL}" ]; then
			${START_STOP_DAEMON} -S -N $SVC_PRIORITY -c nobody \
				-x $SVC_PATH -- -a "$RPC_ACL" \
				-g "$DIR_CONF" -w "$DIR_DL1" \
				-e ${DIR_LOG}/${SVC_NAME} \
				-x /var/run/${SVC_NAME}.pid $AUTH_INFO
		else
			${START_STOP_DAEMON} -S -N $SVC_PRIORITY -c nobody \
				-x $SVC_PATH -- -a "$RPC_ACL" \
				-g "$DIR_CONF" \
				-e ${DIR_LOG}/${SVC_NAME} \
				-x /var/run/${SVC_NAME}.pid $AUTH_INFO
		fi
	else
		if [ -n "${DIR_DL}" ]; then
			${START_STOP_DAEMON} -S -N $SVC_PRIORITY -x $SVC_PATH -- -a "$RPC_ACL" \
				-g "$DIR_CONF" -w "$DIR_DL1" \
				-e ${DIR_LOG}/${SVC_NAME} \
				-x /var/run/${SVC_NAME}.pid ${AUTH_INFO}
		else
			${START_STOP_DAEMON} -S -N $SVC_PRIORITY -x $SVC_PATH -- -a "$RPC_ACL" \
				-g "$DIR_CONF" \
				-e ${DIR_LOG}/${SVC_NAME} \
				-x /var/run/${SVC_NAME}.pid ${AUTH_INFO}
		fi
	fi
	
	if [ $? -eq 0 ] ; then
		echo "[  OK  ]"
	else
		echo "[FAILED]"
	fi
}

func_stop()
{
	# Make sure not running
	if [ -z "`pidof transmission-daemon`" ] ; then
		echo "$SVC_NAME not running!"
		return 0
	fi
	
	echo -n "Stopping $SVC_NAME:."
	logger -t "$SVC_NAME" "Stopping $SVC_NAME..."
	
	# stop daemon
	killall -q transmission-daemon
	
	# gracefully wait max 20 seconds while transmission stopped
	i=0
	while [ -n "`pidof transmission-daemon`" ] && [ $i -le 20 ] ; do
		echo -n "."
		i=$(( $i + 1 ))
		sleep 1
	done
	
	trmd_pid=`pidof transmission-daemon`
	if [ -n "$trmd_pid" ] ; then
		# force kill (hungup?)
		kill -9 "$trmd_pid"
		sleep 1
		echo "[KILLED]"
		logger -t "$SVC_NAME" "Cannot stop $SVC_NAME by reason - timeout!"
	else
		echo "[  OK  ]"
	fi
}

func_reload()
{
	trmd_pid=`pidof transmission-daemon`
	if [ -n "$trmd_pid" ] ; then
		echo -n "Reload $SVC_NAME config:."
		kill -1 "$trmd_pid"
		echo "[  OK  ]"
	else
		echo "Error: $SVC_NAME is not started!"
	fi
}

case "$1" in
start)
	func_start
	;;
stop)
	func_stop
	;;
reload)
	func_reload
	;;
restart)
	func_stop
	func_start
	;;
*)
	echo "Usage: $0 {start|stop|reload|restart}"
	exit 1
	;;
esac
