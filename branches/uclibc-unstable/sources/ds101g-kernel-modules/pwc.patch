diff -Nur linux-2.4.x.orig/drivers/usb/Makefile linux-2.4.x/drivers/usb/Makefile
--- linux-2.4.x.orig/drivers/usb/Makefile	2003-10-15 11:11:46.000000000 +0200
+++ linux-2.4.x/drivers/usb/Makefile	2006-07-03 11:13:17.000000000 +0200
@@ -17,7 +17,7 @@
 list-multi		:= usbcore.o hid.o pwc.o
 usbcore-objs		:= usb.o usb-debug.o hub.o
 hid-objs		:= hid-core.o
-pwc-objs		:= pwc-if.o pwc-misc.o pwc-ctrl.o pwc-uncompress.o
+pwc-objs		:= pwc-dec1.o pwc-dec23.o pwc-kiara.o pwc-timon.o pwc-if.o pwc-misc.o pwc-ctrl.o pwc-uncompress.o
 auerswald-objs		:= auerbuf.o auerchain.o auerchar.o auermain.o
 
 # Optional parts of multipart objects.
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-ctrl.c linux-2.4.x/drivers/usb/pwc-ctrl.c
--- linux-2.4.x.orig/drivers/usb/pwc-ctrl.c	2006-03-04 10:10:50.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-ctrl.c	2006-07-03 11:13:17.000000000 +0200
@@ -1,7 +1,18 @@
 /* Driver for Philips webcam
    Functions that send various control messages to the webcam, including
    video modes.
-   (C) 1999-2002 Nemosoft Unv. (webcam@smcc.demon.nl)
+   (C) 1999-2003 Nemosoft Unv.
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -30,10 +41,15 @@
 #include <asm/uaccess.h> 
 #endif
 #include <asm/errno.h>
+#include <linux/version.h>
  
 #include "pwc.h"
 #include "pwc-ioctl.h"
 #include "pwc-uncompress.h"
+#include "pwc-kiara.h"
+#include "pwc-timon.h"
+#include "pwc-dec1.h"
+#include "pwc-dec23.h"
 
 /* Request types: video */
 #define SET_LUM_CTL			0x01
@@ -44,6 +60,8 @@
 #define GET_STATUS_CTL			0x06
 #define SET_EP_STREAM_CTL		0x07
 #define GET_EP_STREAM_CTL		0x08
+#define SET_MPT_CTL			0x0D
+#define GET_MPT_CTL			0x0E
 
 /* Selectors for the Luminance controls [GS]ET_LUM_CTL */
 #define AGC_MODE_FORMATTER			0x2000
@@ -88,6 +106,11 @@
 /* Formatters for the Video Endpoint controls [GS]ET_EP_STREAM_CTL */
 #define VIDEO_OUTPUT_CONTROL_FORMATTER		0x0100
 
+/* Formatters for the motorized pan & tilt [GS]ET_MPT_CTL */
+#define PT_RELATIVE_CONTROL_FORMATTER		0x01
+#define PT_RESET_CONTROL_FORMATTER		0x02
+#define PT_STATUS_FORMATTER			0x03
+
 static char *size2name[PSZ_MAX] =
 {
 	"subQCIF",
@@ -115,49 +138,7 @@
 
 static struct Nala_table_entry Nala_table[PSZ_MAX][8] =
 {
-#include "pwc_nala.h"
-};
-
-/* This tables contains entries for the 675/680/690 (Timon) camera, with
-   4 different qualities (no compression, low, medium, high).
-   It lists the bandwidth requirements for said mode by its alternate interface 
-   number. An alternate of 0 means that the mode is unavailable.
-   
-   There are 6 * 4 * 4 entries: 
-     6 different resolutions subqcif, qsif, qcif, sif, cif, vga
-     6 framerates: 5, 10, 15, 20, 25, 30
-     4 compression modi: none, low, medium, high
-     
-   When an uncompressed mode is not available, the next available compressed mode 
-   will be choosen (unless the decompressor is absent). Sometimes there are only
-   1 or 2 compressed modes available; in that case entries are duplicated.
-*/
-struct Timon_table_entry 
-{
-	char alternate;			/* USB alternate interface */
-	unsigned short packetsize;	/* Normal packet size */
-	unsigned short bandlength;	/* Bandlength when decompressing */
-	unsigned char mode[13];		/* precomputed mode settings for cam */
-};
-
-static struct Timon_table_entry Timon_table[PSZ_MAX][6][4] = 
-{
-#include "pwc_timon.h"
-};
-
-/* Entries for the Kiara (730/740/750) camera */
-
-struct Kiara_table_entry
-{
-	char alternate;			/* USB alternate interface */
-	unsigned short packetsize;	/* Normal packet size */
-	unsigned short bandlength;	/* Bandlength when decompressing */
-	unsigned char mode[12];		/* precomputed mode settings for cam */
-};
-
-static struct Kiara_table_entry Kiara_table[PSZ_MAX][6][4] =
-{
-#include "pwc_kiara.h"
+#include "pwc-nala.h"
 };
 
 
@@ -187,7 +168,7 @@
 	int i;
 	unsigned char *s;
 	char buf[100], *d;
-	
+
 	s = (unsigned char *)p;
 	d = buf;
 	*d = '\0';
@@ -223,7 +204,7 @@
 	unsigned char buf[3];
 	int ret, fps;
 	struct Nala_table_entry *pEntry;
-	int frames2frames[31] = 
+	int frames2frames[31] =
 	{ /* closest match of framerate */
 	   0,  0,  0,  0,  4,  /*  0-4  */
 	   5,  5,  7,  7, 10,  /*  5-9  */
@@ -251,7 +232,7 @@
 	if (pEntry->alternate == 0)
 		return -EINVAL;
 
-	if (pEntry->compressed && pdev->decompressor == NULL)
+	if (pEntry->compressed)
 		return -ENOENT; /* Not supported. */
 
 	memcpy(buf, pEntry->mode, 3);	
@@ -260,9 +241,29 @@
 		Debug("Failed to send video command... %d\n", ret);
 		return ret;
 	}
-	if (pEntry->compressed && pdev->decompressor != NULL)
-		pdev->decompressor->init(pdev->release, buf, pdev->decompress_data);
-		
+	if (pEntry->compressed && pdev->vpalette != VIDEO_PALETTE_RAW)
+	 {
+	   switch(pdev->type) {
+	     case 645:
+	     case 646:
+	       pwc_dec1_init(pdev->type, pdev->release, buf, pdev->decompress_data);
+	       break;
+
+	     case 675:
+	     case 680:
+	     case 690:
+	     case 720:
+	     case 730:
+	     case 740:
+	     case 750:
+	       pwc_dec23_init(pdev->type, pdev->release, buf, pdev->decompress_data);
+	       break;
+	   }
+	}
+ 
+	pdev->cmd_len = 3;
+	memcpy(pdev->cmd_buf, buf, 3);
+
 	/* Set various parameters */
 	pdev->vframes = frames;
 	pdev->vsize = size;
@@ -288,7 +289,7 @@
 static inline int set_video_mode_Timon(struct pwc_device *pdev, int size, int frames, int compression, int snapshot)
 {
 	unsigned char buf[13];
-	struct Timon_table_entry *pChoose;
+	const struct Timon_table_entry *pChoose;
 	int ret, fps;
 
 	if (size >= PSZ_MAX || frames < 5 || frames > 30 || compression < 0 || compression > 3)
@@ -296,24 +297,16 @@
 	if (size == PSZ_VGA && frames > 15)
 		return -EINVAL;
 	fps = (frames / 5) - 1;
-	
+
 	/* Find a supported framerate with progressively higher compression ratios
 	   if the preferred ratio is not available.
 	*/
 	pChoose = NULL;
-	if (pdev->decompressor == NULL) {
-#if PWC_DEBUG	
-		Debug("Trying to find uncompressed mode.\n");
-#endif
-		pChoose = &Timon_table[size][fps][0];
-	}
-	else {
-		while (compression <= 3) {
-			pChoose = &Timon_table[size][fps][compression];
-			if (pChoose->alternate != 0)
-				break;
-			compression++;	
-		}
+	while (compression <= 3) {
+	   pChoose = &Timon_table[size][fps][compression];
+	   if (pChoose->alternate != 0)
+	     break;
+	   compression++;
 	}
 	if (pChoose == NULL || pChoose->alternate == 0)
 		return -ENOENT; /* Not supported. */
@@ -325,9 +318,12 @@
 	if (ret < 0)
 		return ret;
 
-	if (pChoose->bandlength > 0)
-		pdev->decompressor->init(pdev->release, buf, pdev->decompress_data);
-	
+	if (pChoose->bandlength > 0 && pdev->vpalette != VIDEO_PALETTE_RAW)
+	   pwc_dec23_init(pdev->type, pdev->release, buf, pdev->decompress_data);
+
+	pdev->cmd_len = 13;
+	memcpy(pdev->cmd_buf, buf, 13);
+
 	/* Set various parameters */
 	pdev->vframes = frames;
 	pdev->vsize = size;
@@ -335,7 +331,7 @@
 	pdev->valternate = pChoose->alternate;
 	pdev->image = pwc_image_sizes[size];
 	pdev->vbandlength = pChoose->bandlength;
-	if (pChoose->bandlength > 0) 
+	if (pChoose->bandlength > 0)
 		pdev->frame_size = (pChoose->bandlength * pdev->image.y) / 4;
 	else
 		pdev->frame_size = (pdev->image.x * pdev->image.y * 12) / 8;
@@ -345,37 +341,52 @@
 
 static inline int set_video_mode_Kiara(struct pwc_device *pdev, int size, int frames, int compression, int snapshot)
 {
-	struct Kiara_table_entry *pChoose;
+	const struct Kiara_table_entry *pChoose = 0;
 	int fps, ret;
 	unsigned char buf[12];
-	
+	struct Kiara_table_entry RawEntry = {6, 773, 1272, {0xAD, 0xF4, 0x10, 0x27, 0xB6, 0x24, 0x96, 0x02, 0x30, 0x05, 0x03, 0x80}};
+
 	if (size >= PSZ_MAX || frames < 5 || frames > 30 || compression < 0 || compression > 3)
 		return -EINVAL;
 	if (size == PSZ_VGA && frames > 15)
 		return -EINVAL;
 	fps = (frames / 5) - 1;
-	
-	/* Find a supported framerate with progressively higher compression ratios
-	   if the preferred ratio is not available.
-	*/
-	pChoose = NULL;
-	if (pdev->decompressor == NULL) {
-#if PWC_DEBUG	
-		Debug("Trying to find uncompressed mode.\n");
-#endif		
-		pChoose = &Kiara_table[size][fps][0];
+
+	/* special case: VGA @ 5 fps and snapshot is raw bayer mode */
+	if (size == PSZ_VGA && frames == 5 && snapshot)
+	{
+		/* Only available in case the raw palette is selected or 
+		   we have the decompressor available. This mode is 
+		   only available in compressed form 
+		*/
+		if (pdev->vpalette == VIDEO_PALETTE_RAW)
+		{
+	                Info("Choosing VGA/5 BAYER mode (%d).\n", pdev->vpalette);
+			pChoose = &RawEntry;
+		}
+		else
+		{
+			Info("VGA/5 BAYER mode _must_ have a decompressor available, or use RAW palette.\n");
+		}
 	}
-	else {
+	else
+	{
+        	/* Find a supported framerate with progressively higher compression ratios
+		   if the preferred ratio is not available.
+                   Skip this step when using RAW modes.
+		*/
 		while (compression <= 3) {
 			pChoose = &Kiara_table[size][fps][compression];
 			if (pChoose->alternate != 0)
 				break;
-			compression++;	
+			compression++;
 		}
 	}
 	if (pChoose == NULL || pChoose->alternate == 0)
 		return -ENOENT; /* Not supported. */
 
+	Debug("Using alternate setting %d.\n", pChoose->alternate);
+	
 	/* usb_control_msg won't take staticly allocated arrays as argument?? */
 	memcpy(buf, pChoose->mode, 12);
 	if (snapshot)
@@ -386,9 +397,11 @@
 	if (ret < 0)
 		return ret;
 
-	if (pChoose->bandlength > 0)
-		pdev->decompressor->init(pdev->release, buf, pdev->decompress_data);
-		
+	if (pChoose->bandlength > 0 && pdev->vpalette != VIDEO_PALETTE_RAW)
+	  pwc_dec23_init(pdev->type, pdev->release, buf, pdev->decompress_data);
+
+	pdev->cmd_len = 12;
+	memcpy(pdev->cmd_buf, buf, 12);
 	/* All set and go */
 	pdev->vframes = frames;
 	pdev->vsize = size;
@@ -396,15 +409,15 @@
 	pdev->valternate = pChoose->alternate;
 	pdev->image = pwc_image_sizes[size];
 	pdev->vbandlength = pChoose->bandlength;
-	if (pChoose->bandlength > 0)
-		pdev->frame_size = (pChoose->bandlength * pdev->image.y) / 4;
-	else 
+	if (pdev->vbandlength > 0)
+		pdev->frame_size = (pdev->vbandlength * pdev->image.y) / 4;
+	else
 		pdev->frame_size = (pdev->image.x * pdev->image.y * 12) / 8;
-	pdev->frame_size += (pdev->frame_header_size + pdev->frame_trailer_size);
 	return 0;
 }
 
 
+
 /**
    @pdev: device structure
    @width: viewport width
@@ -415,14 +428,17 @@
  */
 int pwc_set_video_mode(struct pwc_device *pdev, int width, int height, int frames, int compression, int snapshot)
 {
-	int ret, size;
-	
+        int ret, size;
+
+        Trace(TRACE_FLOW, "set_video_mode(%dx%d @ %d, palette %d).\n", width, height, frames, pdev->vpalette);
 	size = pwc_decode_size(pdev, width, height);
 	if (size < 0) {
 		Debug("Could not find suitable size.\n");
 		return -ERANGE;
 	}
-	ret = -EINVAL;	
+	Debug("decode_size = %d.\n", size);
+
+        ret = -EINVAL;
 	switch(pdev->type) {
 	case 645:
 	case 646:
@@ -434,7 +450,8 @@
 	case 690:
 		ret = set_video_mode_Timon(pdev, size, frames, compression, snapshot);
 		break;
-		
+	
+	case 720:
 	case 730:
 	case 740:
 	case 750:
@@ -451,46 +468,27 @@
 	}
 	pdev->view.x = width;
 	pdev->view.y = height;
+	pdev->frame_total_size = pdev->frame_size + pdev->frame_header_size + pdev->frame_trailer_size;
 	pwc_set_image_buffer_size(pdev);
-	Trace(TRACE_SIZE, "Set viewport to %dx%d, image size is %dx%d, palette = %d.\n", width, height, pwc_image_sizes[size].x, pwc_image_sizes[size].y, pdev->vpalette);
+	Trace(TRACE_SIZE, "Set viewport to %dx%d, image size is %dx%d.\n", width, height, pwc_image_sizes[size].x, pwc_image_sizes[size].y);
 	return 0;
 }
 
 
 void pwc_set_image_buffer_size(struct pwc_device *pdev)
 {
-	int factor, i, filler = 0;
+	int i, factor = 0, filler = 0;
 
-	switch(pdev->vpalette) {
-	case VIDEO_PALETTE_RGB32 | 0x80:
-	case VIDEO_PALETTE_RGB32:
-		factor = 16;
-		filler = 0;
-		break;
-	case VIDEO_PALETTE_RGB24 | 0x80:
-	case VIDEO_PALETTE_RGB24:
-		factor = 12;
-		filler = 0;
-		break;
-	case VIDEO_PALETTE_YUYV:
-	case VIDEO_PALETTE_YUV422:
-		factor = 8;
-		filler = 128;
-		break;
-	case VIDEO_PALETTE_YUV420:
+	/* for PALETTE_YUV420P */
+	switch(pdev->vpalette)
+	{
 	case VIDEO_PALETTE_YUV420P:
 		factor = 6;
 		filler = 128;
 		break;
-#if PWC_DEBUG		
 	case VIDEO_PALETTE_RAW:
-		pdev->image.size = pdev->frame_size;
-		pdev->view.size = pdev->frame_size;
-		return;
-		break;
-#endif	
-	default:
-		factor = 0;
+		factor = 6; /* can be uncompressed YUV420P */
+		filler = 0;
 		break;
 	}
 
@@ -499,13 +497,13 @@
 	pdev->view.size  = pdev->view.x  * pdev->view.y  * factor / 4;
 
 	/* Align offset, or you'll get some very weird results in
-	   YUV420 mode... x must be multiple of 4 (to get the Y's in 
+	   YUV420 mode... x must be multiple of 4 (to get the Y's in
 	   place), and y even (or you'll mixup U & V). This is less of a
 	   problem for YUV420P.
 	 */
 	pdev->offset.x = ((pdev->view.x - pdev->image.x) / 2) & 0xFFFC;
 	pdev->offset.y = ((pdev->view.y - pdev->image.y) / 2) & 0xFFFE;
-	
+
 	/* Fill buffers with gray or black */
 	for (i = 0; i < MAX_IMAGES; i++) {
 		if (pdev->image_ptr[i] != NULL)
@@ -521,13 +519,8 @@
 {
 	char buf;
 	int ret;
-	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_LUM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		BRIGHTNESS_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+
+	ret = RecvControlMsg(GET_LUM_CTL, BRIGHTNESS_FORMATTER, 1);	
 	if (ret < 0)
 		return ret;
 	return buf << 9;
@@ -542,12 +535,7 @@
 	if (value > 0xffff)
 		value = 0xffff;
 	buf = (value >> 9) & 0x7f;
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		BRIGHTNESS_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_LUM_CTL, BRIGHTNESS_FORMATTER, 1);
 }
 
 /* CONTRAST */
@@ -556,13 +544,8 @@
 {
 	char buf;
 	int ret;
-	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_LUM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		CONTRAST_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+
+	ret = RecvControlMsg(GET_LUM_CTL, CONTRAST_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
 	return buf << 10;
@@ -577,12 +560,7 @@
 	if (value > 0xffff)
 		value = 0xffff;
 	buf = (value >> 10) & 0x3f;
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		CONTRAST_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_LUM_CTL, CONTRAST_FORMATTER, 1);
 }
 
 /* GAMMA */
@@ -592,12 +570,7 @@
 	char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_LUM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		GAMMA_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_LUM_CTL, GAMMA_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
 	return buf << 11;
@@ -612,12 +585,7 @@
 	if (value > 0xffff)
 		value = 0xffff;
 	buf = (value >> 11) & 0x1f;
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		GAMMA_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_LUM_CTL, GAMMA_FORMATTER, 1);
 }
 
 
@@ -630,12 +598,7 @@
 
 	if (pdev->type < 675)
 		return -1;
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_CHROM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		pdev->type < 730 ? SATURATION_MODE_FORMATTER2 : SATURATION_MODE_FORMATTER1,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_CHROM_CTL, pdev->type < 730 ? SATURATION_MODE_FORMATTER2 : SATURATION_MODE_FORMATTER1, 1);
 	if (ret < 0)
 		return ret;
 	return 32768 + buf * 327;
@@ -653,12 +616,7 @@
 		value = 0xffff;
 	/* saturation ranges from -100 to +100 */
 	buf = (value - 32768) / 327;
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_CHROM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		pdev->type < 730 ? SATURATION_MODE_FORMATTER2 : SATURATION_MODE_FORMATTER1,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_CHROM_CTL, pdev->type < 730 ? SATURATION_MODE_FORMATTER2 : SATURATION_MODE_FORMATTER1, 1);
 }
 
 /* AGC */
@@ -673,12 +631,7 @@
 	else
 		buf = 0xff; /* fixed */
 
-	ret = usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AGC_MODE_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = SendControlMsg(SET_LUM_CTL, AGC_MODE_FORMATTER, 1);
 	
 	if (!mode && ret >= 0) {
 		if (value < 0)
@@ -686,12 +639,7 @@
 		if (value > 0xffff)
 			value = 0xffff;
 		buf = (value >> 10) & 0x3F;
-		ret = usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-			SET_LUM_CTL,
-			USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-			PRESET_AGC_FORMATTER,
-			pdev->vcinterface,
-			&buf, 1, HZ / 2);
+		ret = SendControlMsg(SET_LUM_CTL, PRESET_AGC_FORMATTER, 1);
 	}
 	if (ret < 0)
 		return ret;
@@ -703,22 +651,12 @@
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_LUM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AGC_MODE_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_LUM_CTL, AGC_MODE_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
 
 	if (buf != 0) { /* fixed */
-		ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-			GET_LUM_CTL,
-			USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-			PRESET_AGC_FORMATTER,
-			pdev->vcinterface,
-			&buf, 1, HZ / 2);
+		ret = RecvControlMsg(GET_LUM_CTL, PRESET_AGC_FORMATTER, 1);
 		if (ret < 0)
 			return ret;
 		if (buf > 0x3F)
@@ -726,12 +664,7 @@
 		*value = (buf << 10);		
 	}
 	else { /* auto */
-		ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-			GET_STATUS_CTL,
-			USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-			READ_AGC_FORMATTER,
-			pdev->vcinterface,
-			&buf, 1, HZ / 2);
+		ret = RecvControlMsg(GET_STATUS_CTL, READ_AGC_FORMATTER, 1);
 		if (ret < 0)
 			return ret;
 		/* Gah... this value ranges from 0x00 ... 0x9F */
@@ -754,12 +687,7 @@
 	else
 		buf[0] = 0xff; /* fixed */
 	
-	ret = usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		SHUTTER_MODE_FORMATTER,
-		pdev->vcinterface,
-		buf, 1, HZ / 2);
+	ret = SendControlMsg(SET_LUM_CTL, SHUTTER_MODE_FORMATTER, 1);
 
 	if (!mode && ret >= 0) {
 		if (value < 0)
@@ -775,6 +703,7 @@
 			buf[1] = speed >> 8;
 			buf[0] = speed & 0xff;
 			break;
+		case 720:
 		case 730:
 		case 740:
 		case 750:
@@ -784,12 +713,7 @@
 			break;
 		}
 
-		ret = usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-			SET_LUM_CTL,
-			USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-			PRESET_SHUTTER_FORMATTER,
-			pdev->vcinterface,
-			&buf, 2, HZ / 2);
+		ret = SendControlMsg(SET_LUM_CTL, PRESET_SHUTTER_FORMATTER, 2);
 	}
 	return ret;
 }	
@@ -808,12 +732,7 @@
 		buf = 0x00; /* active */
 	else
 		buf = 0xFF; /* power save */
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_STATUS_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		SET_POWER_SAVE_MODE_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_STATUS_CTL, SET_POWER_SAVE_MODE_FORMATTER, 1);
 }
 
 
@@ -822,32 +741,20 @@
 
 static inline int pwc_restore_user(struct pwc_device *pdev)
 {
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_STATUS_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		RESTORE_USER_DEFAULTS_FORMATTER,
-		pdev->vcinterface,
-		NULL, 0, HZ / 2);
+	char buf; /* dummy */
+	return SendControlMsg(SET_STATUS_CTL, RESTORE_USER_DEFAULTS_FORMATTER, 0);
 }
 
 static inline int pwc_save_user(struct pwc_device *pdev)
 {
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_STATUS_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		SAVE_USER_DEFAULTS_FORMATTER,
-		pdev->vcinterface,
-		NULL, 0, HZ / 2);
+	char buf; /* dummy */
+	return SendControlMsg(SET_STATUS_CTL, SAVE_USER_DEFAULTS_FORMATTER, 0);
 }
 
 static inline int pwc_restore_factory(struct pwc_device *pdev)
 {
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_STATUS_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		RESTORE_FACTORY_DEFAULTS_FORMATTER,
-		pdev->vcinterface,
-		NULL, 0, HZ / 2);
+	char buf; /* dummy */
+	return SendControlMsg(SET_STATUS_CTL, RESTORE_FACTORY_DEFAULTS_FORMATTER, 0);
 }
 
  /* ************************************************* */
@@ -875,12 +782,7 @@
 	
 	buf = mode & 0x07; /* just the lowest three bits */
 	
-	ret = usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_CHROM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		WB_MODE_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = SendControlMsg(SET_CHROM_CTL, WB_MODE_FORMATTER, 1);
 	
 	if (ret < 0)
 		return ret;
@@ -892,12 +794,7 @@
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_CHROM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		WB_MODE_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_CHROM_CTL, WB_MODE_FORMATTER, 1);
 
 	if (ret < 0) 
 		return ret;
@@ -912,34 +809,21 @@
 		value = 0;
 	if (value > 0xffff)
 		value = 0xffff;
-
-	/* only the msb are considered */
+	/* only the msb is considered */
 	buf = value >> 8;
-
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_CHROM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		PRESET_MANUAL_RED_GAIN_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_CHROM_CTL, PRESET_MANUAL_RED_GAIN_FORMATTER, 1);
 }
 
-static inline int pwc_get_red_gain(struct pwc_device *pdev)
+static inline int pwc_get_red_gain(struct pwc_device *pdev, int *value)
 {
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
- 	        GET_CHROM_CTL, 
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-	        PRESET_MANUAL_RED_GAIN_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
-
+	ret = RecvControlMsg(GET_CHROM_CTL, PRESET_MANUAL_RED_GAIN_FORMATTER, 1);
 	if (ret < 0)
 	    return ret;
-	
-	return (buf << 8);
+	*value = buf << 8;
+	return 0;
 }
 
 
@@ -951,34 +835,21 @@
 		value = 0;
 	if (value > 0xffff)
 		value = 0xffff;
-
-	/* linear mapping of 0..0xffff to -0x80..0x7f */
-	buf = (value >> 8);
-
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_CHROM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		PRESET_MANUAL_BLUE_GAIN_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	/* only the msb is considered */
+	buf = value >> 8;
+	return SendControlMsg(SET_CHROM_CTL, PRESET_MANUAL_BLUE_GAIN_FORMATTER, 1);
 }
 
-static inline int pwc_get_blue_gain(struct pwc_device *pdev)
+static inline int pwc_get_blue_gain(struct pwc_device *pdev, int *value)
 {
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-   	        GET_CHROM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		PRESET_MANUAL_BLUE_GAIN_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
-
+	ret = RecvControlMsg(GET_CHROM_CTL, PRESET_MANUAL_BLUE_GAIN_FORMATTER, 1);
 	if (ret < 0)
 	    return ret;
-	
-	return (buf << 8);
+	*value = buf << 8;
+	return 0;
 }
 
 
@@ -986,40 +857,28 @@
    internal red/blue gains, which may be different from the manual 
    gains set or read above.
  */   
-static inline int pwc_read_red_gain(struct pwc_device *pdev)
+static inline int pwc_read_red_gain(struct pwc_device *pdev, int *value)
 {
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
- 	        GET_STATUS_CTL, 
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-	        READ_RED_GAIN_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
-
+	ret = RecvControlMsg(GET_STATUS_CTL, READ_RED_GAIN_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
-	
-	return (buf << 8);
+	*value = buf << 8;
+	return 0;
 }
 
-static inline int pwc_read_blue_gain(struct pwc_device *pdev)
+static inline int pwc_read_blue_gain(struct pwc_device *pdev, int *value)
 {
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-   	        GET_STATUS_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		READ_BLUE_GAIN_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
-
+	ret = RecvControlMsg(GET_STATUS_CTL, READ_BLUE_GAIN_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
-	
-	return (buf << 8);
+	*value = buf << 8;
+	return 0;
 }
 
 
@@ -1029,28 +888,19 @@
 	
 	/* useful range is 0x01..0x20 */
 	buf = speed / 0x7f0;
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_CHROM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AWB_CONTROL_SPEED_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_CHROM_CTL, AWB_CONTROL_SPEED_FORMATTER, 1);
 }
 
-static inline int pwc_get_wb_speed(struct pwc_device *pdev)
+static inline int pwc_get_wb_speed(struct pwc_device *pdev, int *value)
 {
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_CHROM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AWB_CONTROL_SPEED_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_CHROM_CTL, AWB_CONTROL_SPEED_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
-	return (buf * 0x7f0);
+	*value = buf * 0x7f0;
+	return 0;
 }
 
 
@@ -1060,28 +910,19 @@
 	
 	/* useful range is 0x01..0x3F */
 	buf = (delay >> 10);
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_CHROM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AWB_CONTROL_DELAY_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_CHROM_CTL, AWB_CONTROL_DELAY_FORMATTER, 1);
 }
 
-static inline int pwc_get_wb_delay(struct pwc_device *pdev)
+static inline int pwc_get_wb_delay(struct pwc_device *pdev, int *value)
 {
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_CHROM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AWB_CONTROL_DELAY_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_CHROM_CTL, AWB_CONTROL_DELAY_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
-	return (buf << 10);
+	*value = buf << 10;
+	return 0;
 }
 
 
@@ -1136,12 +977,7 @@
 		buf = 0xff; /* auto contour on */
 	else
 		buf = 0x0; /* auto contour off */
-	ret = usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AUTO_CONTOUR_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = SendControlMsg(SET_LUM_CTL, AUTO_CONTOUR_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
 	
@@ -1151,12 +987,7 @@
 		contour = 0xffff;
 	
 	buf = (contour >> 10); /* contour preset is [0..3f] */
-	ret = usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		PRESET_CONTOUR_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = SendControlMsg(SET_LUM_CTL, PRESET_CONTOUR_FORMATTER, 1);
 	if (ret < 0)	
 		return ret;	
 	return 0;
@@ -1167,26 +998,16 @@
 	unsigned char buf;
 	int ret;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_LUM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		AUTO_CONTOUR_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_LUM_CTL, AUTO_CONTOUR_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
 
 	if (buf == 0) {
 		/* auto mode off, query current preset value */
-		ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-			GET_LUM_CTL,
-			USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-			PRESET_CONTOUR_FORMATTER,
-			pdev->vcinterface,
-			&buf, 1, HZ / 2);
+		ret = RecvControlMsg(GET_LUM_CTL, PRESET_CONTOUR_FORMATTER, 1);
 		if (ret < 0)	
 			return ret;
-		*contour =  (buf << 10);
+		*contour = buf << 10;
 	}
 	else
 		*contour = -1;
@@ -1202,28 +1023,19 @@
 		buf = 0xff;
 	else
 		buf = 0x0;
-	return usb_control_msg(pdev->udev, usb_sndctrlpipe(pdev->udev, 0),
-		SET_LUM_CTL,
-		USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		BACK_LIGHT_COMPENSATION_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	return SendControlMsg(SET_LUM_CTL, BACK_LIGHT_COMPENSATION_FORMATTER, 1);
 }
 
-static inline int pwc_get_backlight(struct pwc_device *pdev)
+static inline int pwc_get_backlight(struct pwc_device *pdev, int *backlight)
 {
 	int ret;
 	unsigned char buf;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_LUM_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		BACK_LIGHT_COMPENSATION_FORMATTER,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_LUM_CTL, BACK_LIGHT_COMPENSATION_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
-	return buf;
+	*backlight = buf;
+	return 0;
 }
 
 
@@ -1238,7 +1050,7 @@
 	return SendControlMsg(SET_LUM_CTL, FLICKERLESS_MODE_FORMATTER, 1);
 }
 
-static inline int pwc_get_flicker(struct pwc_device *pdev)
+static inline int pwc_get_flicker(struct pwc_device *pdev, int *flicker)
 {
 	int ret;
 	unsigned char buf;
@@ -1246,7 +1058,8 @@
 	ret = RecvControlMsg(GET_LUM_CTL, FLICKERLESS_MODE_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
-	return buf;
+	*flicker = buf;
+	return 0;
 }
 
 
@@ -1262,7 +1075,7 @@
 	return SendControlMsg(SET_LUM_CTL, DYNAMIC_NOISE_CONTROL_FORMATTER, 1);
 }
 
-static inline int pwc_get_dynamic_noise(struct pwc_device *pdev)
+static inline int pwc_get_dynamic_noise(struct pwc_device *pdev, int *noise)
 {
 	int ret;
 	unsigned char buf;
@@ -1270,11 +1083,52 @@
 	ret = RecvControlMsg(GET_LUM_CTL, DYNAMIC_NOISE_CONTROL_FORMATTER, 1);
 	if (ret < 0)
 		return ret;
-	return buf;
+	*noise = buf;
+	return 0;
 }
 
+int pwc_mpt_reset(struct pwc_device *pdev, int flags)
+{
+	unsigned char buf;
+	
+	buf = flags & 0x03; // only lower two bits are currently used
+	return SendControlMsg(SET_MPT_CTL, PT_RESET_CONTROL_FORMATTER, 1);
+}
 
-int pwc_get_cmos_sensor(struct pwc_device *pdev)
+static inline int pwc_mpt_set_angle(struct pwc_device *pdev, int pan, int tilt)
+{
+	unsigned char buf[4];
+	
+	/* set new relative angle; angles are expressed in degrees * 100,
+	   but cam as .5 degree resolution, hence devide by 200. Also
+	   the angle must be multiplied by 64 before it's send to
+	   the cam (??)
+	 */
+	pan  =  64 * pan  / 100;
+	tilt = -64 * tilt / 100; /* positive tilt is down, which is not what the user would expect */
+	buf[0] = pan & 0xFF;
+	buf[1] = (pan >> 8) & 0xFF;
+	buf[2] = tilt & 0xFF;
+	buf[3] = (tilt >> 8) & 0xFF;
+	return SendControlMsg(SET_MPT_CTL, PT_RELATIVE_CONTROL_FORMATTER, 4);
+}
+
+static inline int pwc_mpt_get_status(struct pwc_device *pdev, struct pwc_mpt_status *status)
+{
+	int ret;
+	unsigned char buf[5];
+	
+	ret = RecvControlMsg(GET_MPT_CTL, PT_STATUS_FORMATTER, 5);
+	if (ret < 0)
+		return ret;
+	status->status = buf[0] & 0x7; // 3 bits are used for reporting
+	status->time_pan = (buf[1] << 8) + buf[2];
+	status->time_tilt = (buf[3] << 8) + buf[4];
+	return 0;
+}
+
+
+int pwc_get_cmos_sensor(struct pwc_device *pdev, int *sensor)
 {
 	unsigned char buf;
 	int ret = -1, request;
@@ -1286,24 +1140,60 @@
 	else
 		request = SENSOR_TYPE_FORMATTER2;
 	
-	ret = usb_control_msg(pdev->udev, usb_rcvctrlpipe(pdev->udev, 0),
-		GET_STATUS_CTL,
-		USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
-		request,
-		pdev->vcinterface,
-		&buf, 1, HZ / 2);
+	ret = RecvControlMsg(GET_STATUS_CTL, request, 1);
 	if (ret < 0)
 		return ret;
 	if (pdev->type < 675)
-		return buf | 0x100;
+		*sensor = buf | 0x100;
 	else
-		return buf;
+		*sensor = buf;
+	return 0;
 }
 
 
  /* End of Add-Ons                                    */
  /* ************************************************* */
 
+/* Linux 2.5.something and 2.6 pass direct pointers to arguments of
+   ioctl() calls. With 2.4, you have to do tedious copy_from_user()
+   and copy_to_user() calls. With these macros we circumvent this,
+   and let me maintain only one source file. The functionality is
+   exactly the same otherwise.
+ */   
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
+
+/* define local variable for arg */
+#define ARG_DEF(ARG_type, ARG_name)\
+	ARG_type *ARG_name = arg;
+/* copy arg to local variable */	
+#define ARG_IN(ARG_name) /* nothing */
+/* argument itself (referenced) */
+#define ARGR(ARG_name) (*ARG_name)
+/* argument address */
+#define ARGA(ARG_name) ARG_name
+/* copy local variable to arg */
+#define ARG_OUT(ARG_name) /* nothing */
+
+#else
+
+#define ARG_DEF(ARG_type, ARG_name)\
+	ARG_type ARG_name;
+#define ARG_IN(ARG_name)\
+	if (copy_from_user(&ARG_name, arg, sizeof(ARG_name))) {\
+		ret = -EFAULT;\
+		break;\
+	}
+#define ARGR(ARG_name) ARG_name
+#define ARGA(ARG_name) &ARG_name
+#define ARG_OUT(ARG_name)\
+	if (copy_to_user(arg, &ARG_name, sizeof(ARG_name))) {\
+		ret = -EFAULT;\
+		break;\
+	}
+
+#endif
+
 int pwc_ioctl(struct pwc_device *pdev, unsigned int cmd, void *arg)
 {
 	int ret = 0;
@@ -1332,269 +1222,399 @@
 	
 	case VIDIOCPWCSCQUAL:
 	{	
-		int qual;
+		ARG_DEF(int, qual)
 
-		if (copy_from_user(&qual, arg, sizeof(int)))
-			ret = -EFAULT;
-		else {
-			if (qual < 0 || qual > 3)
-				ret = -EINVAL;
-			else
-				ret = pwc_try_video_mode(pdev, pdev->view.x, pdev->view.y, pdev->vframes, qual, pdev->vsnapshot);
-			if (ret >= 0)
-				pdev->vcompression = qual;
-		}
+		ARG_IN(qual)
+		if (ARGR(qual) < 0 || ARGR(qual) > 3)
+			ret = -EINVAL;
+		else
+			ret = pwc_try_video_mode(pdev, pdev->view.x, pdev->view.y, pdev->vframes, ARGR(qual), pdev->vsnapshot);
+		if (ret >= 0)
+			pdev->vcompression = ARGR(qual);
 		break;
 	}
 	
 	case VIDIOCPWCGCQUAL:
 	{
-		if (copy_to_user(arg, &pdev->vcompression, sizeof(int)))
-			ret = -EFAULT;
+		ARG_DEF(int, qual)
+		
+		ARGR(qual) = pdev->vcompression;
+		ARG_OUT(qual)
 		break;
 	}
-
+	
 	case VIDIOCPWCPROBE:
 	{
-		struct pwc_probe probe;
+		ARG_DEF(struct pwc_probe, probe)
 		
-		strcpy(probe.name, pdev->vdev->name);
-		probe.type = pdev->type;
-		if (copy_to_user(arg, &probe, sizeof(probe)))
-			ret = -EFAULT;
+		strcpy(ARGR(probe).name, pdev->vdev->name);
+		ARGR(probe).type = pdev->type;
+		ARG_OUT(probe)
 		break;
 	}
 
-	case VIDIOCPWCSAGC:
+	case VIDIOCPWCGSERIAL:
 	{
-		int agc;
+		ARG_DEF(struct pwc_serial, serial)
 		
-		if (copy_from_user(&agc, arg, sizeof(agc)))
-			ret = -EFAULT;	
-		else {
-			if (pwc_set_agc(pdev, agc < 0 ? 1 : 0, agc))
-				ret = -EINVAL;
-		}
+		strcpy(ARGR(serial).serial, pdev->serial);
+		ARG_OUT(serial)
+		break;
+	}
+
+	case VIDIOCPWCSAGC:
+	{
+		ARG_DEF(int, agc)
+
+		ARG_IN(agc)
+		if (pwc_set_agc(pdev, ARGR(agc) < 0 ? 1 : 0, ARGR(agc)))
+			ret = -EINVAL;
 		break;
 	}
 	
 	case VIDIOCPWCGAGC:
 	{
-		int agc;
+		ARG_DEF(int, agc)
 		
-		if (pwc_get_agc(pdev, &agc))
+		if (pwc_get_agc(pdev, ARGA(agc)))
 			ret = -EINVAL;
-		else
-			if (copy_to_user(arg, &agc, sizeof(agc)))
-				ret = -EFAULT;
+		ARG_OUT(agc)
 		break;
 	}
 	
 	case VIDIOCPWCSSHUTTER:
 	{
-		int shutter_speed;
+		ARG_DEF(int, shutter_speed)
 
-		if (copy_from_user(&shutter_speed, arg, sizeof(shutter_speed)))
-			ret = -EFAULT;
-		else
-			ret = pwc_set_shutter_speed(pdev, shutter_speed < 0 ? 1 : 0, shutter_speed);
+		ARG_IN(shutter_speed)
+		ret = pwc_set_shutter_speed(pdev, ARGR(shutter_speed) < 0 ? 1 : 0, ARGR(shutter_speed));
 		break;
 	}
 	
         case VIDIOCPWCSAWB:
 	{
-		struct pwc_whitebalance wb;
+		ARG_DEF(struct pwc_whitebalance, wb)
 		
-		if (copy_from_user(&wb, arg, sizeof(wb)))
-			ret = -EFAULT;
-		else {
-			ret = pwc_set_awb(pdev, wb.mode);
-			if (ret >= 0 && wb.mode == PWC_WB_MANUAL) {
-				pwc_set_red_gain(pdev, wb.manual_red);
-				pwc_set_blue_gain(pdev, wb.manual_blue);
-			}
+		ARG_IN(wb)
+		ret = pwc_set_awb(pdev, ARGR(wb).mode);
+		if (ret >= 0 && ARGR(wb).mode == PWC_WB_MANUAL) {
+			pwc_set_red_gain(pdev, ARGR(wb).manual_red);
+			pwc_set_blue_gain(pdev, ARGR(wb).manual_blue);
 		}
 		break;
 	}
 
 	case VIDIOCPWCGAWB:
 	{
-		struct pwc_whitebalance wb;
-		
-		memset(&wb, 0, sizeof(wb));
-		wb.mode = pwc_get_awb(pdev);
-		if (wb.mode < 0)
+		ARG_DEF(struct pwc_whitebalance, wb)
+
+		memset(ARGA(wb), 0, sizeof(struct pwc_whitebalance));
+		ARGR(wb).mode = pwc_get_awb(pdev);
+		if (ARGR(wb).mode < 0)
 			ret = -EINVAL;
 		else {
-			if (wb.mode == PWC_WB_MANUAL) {
-				wb.manual_red = pwc_get_red_gain(pdev);
-				wb.manual_blue = pwc_get_blue_gain(pdev);
+			if (ARGR(wb).mode == PWC_WB_MANUAL) {
+				ret = pwc_get_red_gain(pdev, &ARGR(wb).manual_red);
+				if (ret < 0)
+					break;
+				ret = pwc_get_blue_gain(pdev, &ARGR(wb).manual_blue);
+				if (ret < 0)
+					break;
 			}
-			if (wb.mode == PWC_WB_AUTO) {
-				wb.read_red = pwc_read_red_gain(pdev);
-				wb.read_blue = pwc_read_blue_gain(pdev);
+			if (ARGR(wb).mode == PWC_WB_AUTO) {
+				ret = pwc_read_red_gain(pdev, &ARGR(wb).read_red);
+				if (ret < 0)
+					break;
+ 				ret =pwc_read_blue_gain(pdev, &ARGR(wb).read_blue);
+ 				if (ret < 0)
+ 					break;
 			}
-			if (copy_to_user(arg, &wb, sizeof(wb)))
-				ret= -EFAULT;
 		}
+		ARG_OUT(wb)
 		break;
 	}
 	
 	case VIDIOCPWCSAWBSPEED:
 	{
-		struct pwc_wb_speed wbs;
+		ARG_DEF(struct pwc_wb_speed, wbs)
 		
-		if (copy_from_user(&wbs, arg, sizeof(wbs)))
-			ret = -EFAULT;
-		else {
-			if (wbs.control_speed > 0) {
-				ret = pwc_set_wb_speed(pdev, wbs.control_speed);
-			}
-			if (wbs.control_delay > 0) {
-				ret = pwc_set_wb_delay(pdev, wbs.control_delay);
-			}
+		if (ARGR(wbs).control_speed > 0) {
+			ret = pwc_set_wb_speed(pdev, ARGR(wbs).control_speed);
+		}
+		if (ARGR(wbs).control_delay > 0) {
+			ret = pwc_set_wb_delay(pdev, ARGR(wbs).control_delay);
 		}
 		break;
 	}
 	
 	case VIDIOCPWCGAWBSPEED:
 	{
-		struct pwc_wb_speed wbs;
+		ARG_DEF(struct pwc_wb_speed, wbs)
 		
-		ret = pwc_get_wb_speed(pdev);
+		ret = pwc_get_wb_speed(pdev, &ARGR(wbs).control_speed);
 		if (ret < 0)
 			break;
-		wbs.control_speed = ret;
-		ret = pwc_get_wb_delay(pdev);
+		ret = pwc_get_wb_delay(pdev, &ARGR(wbs).control_delay);
 		if (ret < 0)
 			break;
-		wbs.control_delay = ret;
-		if (copy_to_user(arg, &wbs, sizeof(wbs)))
-			ret = -EFAULT;
+		ARG_OUT(wbs)
 		break;
 	}
 
         case VIDIOCPWCSLED:
 	{
-		struct pwc_leds leds;
+		ARG_DEF(struct pwc_leds, leds)
 
-		if (copy_from_user(&leds, arg, sizeof(leds)))
-			ret = -EFAULT;
-		else
-			ret = pwc_set_leds(pdev, leds.led_on, leds.led_off);
+		ARG_IN(leds)
+		ret = pwc_set_leds(pdev, ARGR(leds).led_on, ARGR(leds).led_off);
 	    	break;
 	}
 
 
 	case VIDIOCPWCGLED:
 	{
-		struct pwc_leds leds;
+		ARG_DEF(struct pwc_leds, leds)
 		
-		ret = pwc_get_leds(pdev, &leds.led_on, &leds.led_off); 
-		if (ret < 0)
-			break;
-		if (copy_to_user(arg, &leds, sizeof(leds)))
-			ret = -EFAULT;
+		ret = pwc_get_leds(pdev, &ARGR(leds).led_on, &ARGR(leds).led_off);
+		ARG_OUT(leds)
 		break;
 	}
 
 	case VIDIOCPWCSCONTOUR:
 	{
-		int contour;
-		
-		if (copy_from_user(&contour, arg, sizeof(contour)))
-			ret = -EFAULT;
-		else
-			ret = pwc_set_contour(pdev, contour);
+		ARG_DEF(int, contour)
+
+		ARG_IN(contour)
+		ret = pwc_set_contour(pdev, ARGR(contour));
 		break;
 	}
 			
 	case VIDIOCPWCGCONTOUR:
 	{
-		int contour;
+		ARG_DEF(int, contour)
 		
-		ret = pwc_get_contour(pdev, &contour);
-		if (ret < 0)
-			break;
-			
-		if (copy_to_user(arg, &contour, sizeof(contour)))
-			ret = -EFAULT;
+		ret = pwc_get_contour(pdev, ARGA(contour));
+		ARG_OUT(contour)
 		break;
 	}
 	
 	case VIDIOCPWCSBACKLIGHT:
 	{
-		int backlight;
+		ARG_DEF(int, backlight)
 		
-		if (copy_from_user(&backlight, arg, sizeof(backlight)))
-			ret = -EFAULT;
-		else
-			ret = pwc_set_backlight(pdev, backlight);
+		ARG_IN(backlight)
+		ret = pwc_set_backlight(pdev, ARGR(backlight));
 		break;
 	}
 
 	case VIDIOCPWCGBACKLIGHT:
 	{
-		ret = pwc_get_backlight(pdev);
-		if (ret < 0)
-			break;
-		if (copy_to_user(arg, &ret, sizeof(ret)))
-			ret = -EFAULT;
+		ARG_DEF(int, backlight)
+		
+		ret = pwc_get_backlight(pdev, ARGA(backlight));
+		ARG_OUT(backlight)
 		break;
 	}
 	
 	case VIDIOCPWCSFLICKER:
 	{
-		int flicker;
+		ARG_DEF(int, flicker)
 		
-		if (copy_from_user(&flicker, arg, sizeof(flicker)))
-			ret = -EFAULT;
-		else
-			ret = pwc_set_flicker(pdev, flicker);
+		ARG_IN(flicker)
+		ret = pwc_set_flicker(pdev, ARGR(flicker));
 		break;
 	}
 
 	case VIDIOCPWCGFLICKER:
 	{
-		ret = pwc_get_flicker(pdev);
-		if (ret < 0)
-			break;
-		if (copy_to_user(arg, &ret, sizeof(ret)))
-			ret = -EFAULT;
+		ARG_DEF(int, flicker)
+		
+		ret = pwc_get_flicker(pdev, ARGA(flicker));
+		ARG_OUT(flicker)
 		break;
 	}
 	
 	case VIDIOCPWCSDYNNOISE:
 	{
-		int dynnoise;
+		ARG_DEF(int, dynnoise)
 		
-		if (copy_from_user(&dynnoise, arg, sizeof(dynnoise)))
-			ret = -EFAULT;
-		else
-			ret = pwc_set_dynamic_noise(pdev, dynnoise);
+		ARG_IN(dynnoise)
+		ret = pwc_set_dynamic_noise(pdev, ARGR(dynnoise));
 		break;
 	}
 	
 	case VIDIOCPWCGDYNNOISE:
 	{
-		ret = pwc_get_dynamic_noise(pdev);
-		if (ret < 0)
-			break;
-		if (copy_to_user(arg, &ret, sizeof(ret)))
-			ret = -EFAULT;
+		ARG_DEF(int, dynnoise)
+
+		ret = pwc_get_dynamic_noise(pdev, ARGA(dynnoise));
+		ARG_OUT(dynnoise);
 		break;
 	}
-	
+
 	case VIDIOCPWCGREALSIZE:
 	{
-		struct pwc_imagesize size;
+		ARG_DEF(struct pwc_imagesize, size)
 		
-		size.width = pdev->image.x;
-		size.height = pdev->image.y;
-		if (copy_to_user(arg, &size, sizeof(size)))
-			ret = -EFAULT;
+		ARGR(size).width = pdev->image.x;
+		ARGR(size).height = pdev->image.y;
+		ARG_OUT(size)
+		break;
+ 	}
+ 	
+ 	case VIDIOCPWCMPTRESET:
+ 	{
+ 		if (pdev->features & FEATURE_MOTOR_PANTILT)
+ 		{
+	 		ARG_DEF(int, flags)
+
+ 			ARG_IN(flags)
+			ret = pwc_mpt_reset(pdev, ARGR(flags));
+ 			if (ret >= 0)
+ 			{
+ 				pdev->pan_angle = 0;
+ 				pdev->tilt_angle = 0;
+ 			}
+ 		}
+ 		else
+ 		{
+ 			ret = -ENXIO;
+ 		}
+ 		break;		
+ 	}
+ 	
+ 	case VIDIOCPWCMPTGRANGE:
+ 	{
+ 		if (pdev->features & FEATURE_MOTOR_PANTILT)
+ 		{
+ 			ARG_DEF(struct pwc_mpt_range, range)
+ 			
+ 			ARGR(range) = pdev->angle_range;
+ 			ARG_OUT(range)
+ 		}
+ 		else
+ 		{	
+ 			ret = -ENXIO;
+ 		}
+ 		break;
+ 	}
+ 	
+ 	case VIDIOCPWCMPTSANGLE:
+ 	{
+ 		int new_pan, new_tilt;
+ 		
+ 		if (pdev->features & FEATURE_MOTOR_PANTILT)
+ 		{
+	 		ARG_DEF(struct pwc_mpt_angles, angles)
+
+	 		ARG_IN(angles)
+			/* The camera can only set relative angles, so
+			   do some calculations when getting an absolute angle .
+			 */
+			if (ARGR(angles).absolute)
+			{
+ 				new_pan  = ARGR(angles).pan; 
+ 				new_tilt = ARGR(angles).tilt;
+ 			}
+ 			else
+ 			{
+ 				new_pan  = pdev->pan_angle  + ARGR(angles).pan;
+ 				new_tilt = pdev->tilt_angle + ARGR(angles).tilt;
+			}
+			/* check absolute ranges */
+			if (new_pan  < pdev->angle_range.pan_min  ||
+			    new_pan  > pdev->angle_range.pan_max  ||
+			    new_tilt < pdev->angle_range.tilt_min ||
+			    new_tilt > pdev->angle_range.tilt_max)
+			{
+				ret = -ERANGE;
+			}
+			else
+			{
+				/* go to relative range, check again */
+				new_pan  -= pdev->pan_angle;
+				new_tilt -= pdev->tilt_angle;
+				/* angles are specified in degrees * 100, thus the limit = 36000 */
+				if (new_pan < -36000 || new_pan > 36000 || new_tilt < -36000 || new_tilt > 36000)
+					ret = -ERANGE;
+			}
+			if (ret == 0) /* no errors so far */
+			{
+				ret = pwc_mpt_set_angle(pdev, new_pan, new_tilt);
+				if (ret >= 0)
+				{
+					pdev->pan_angle  += new_pan;
+					pdev->tilt_angle += new_tilt;
+				}
+				if (ret == -EPIPE) /* stall -> out of range */
+					ret = -ERANGE;				
+			}
+ 		}
+ 		else
+ 		{
+ 			ret = -ENXIO;
+ 		}
+ 		break;
+ 	}
+
+ 	case VIDIOCPWCMPTGANGLE:
+ 	{
+ 		
+ 		if (pdev->features & FEATURE_MOTOR_PANTILT)
+ 		{
+	 		ARG_DEF(struct pwc_mpt_angles, angles)
+
+ 			ARGR(angles).absolute = 1;
+ 			ARGR(angles).pan  = pdev->pan_angle;
+ 			ARGR(angles).tilt = pdev->tilt_angle;
+ 			ARG_OUT(angles)
+ 		}
+ 		else
+ 		{
+ 			ret = -ENXIO;
+ 		}
+ 		break;
+ 	}
+ 
+ 	case VIDIOCPWCMPTSTATUS:
+ 	{
+ 		if (pdev->features & FEATURE_MOTOR_PANTILT)
+ 		{
+ 			ARG_DEF(struct pwc_mpt_status, status)
+ 			
+ 			ret = pwc_mpt_get_status(pdev, ARGA(status));
+ 			ARG_OUT(status)
+ 		}
+ 		else
+ 		{
+ 			ret = -ENXIO;
+ 		}
+ 		break;
+	}
+
+	case VIDIOCPWCGVIDCMD:
+	{
+		ARG_DEF(struct pwc_video_command, cmd);
+		
+                ARGR(cmd).type = pdev->type;
+		ARGR(cmd).release = pdev->release;
+		ARGR(cmd).command_len = pdev->cmd_len;
+		memcpy(&ARGR(cmd).command_buf, pdev->cmd_buf, pdev->cmd_len);
+		ARGR(cmd).bandlength = pdev->vbandlength;
+		ARGR(cmd).frame_size = pdev->frame_size;
+		ARG_OUT(cmd)
+		break;
+	}
+       /*
+	case VIDIOCPWCGVIDTABLE:
+	{
+		ARG_DEF(struct pwc_table_init_buffer, table);
+		ARGR(table).len = pdev->cmd_len;
+		memcpy(&ARGR(table).buffer, pdev->decompress_data, pdev->decompressor->table_size);
+		ARG_OUT(table)
 		break;
-	}	
+	}
+	*/
 
 	default:
 		ret = -ENOIOCTLCMD;
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-dec1.c linux-2.4.x/drivers/usb/pwc-dec1.c
--- linux-2.4.x.orig/drivers/usb/pwc-dec1.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-dec1.c	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,42 @@
+/* Linux driver for Philips webcam
+   Decompression for chipset version 1
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+
+
+#include "pwc-dec1.h"
+
+
+void pwc_dec1_init(int type, int release, void *buffer, void *table)
+{
+
+}
+
+void pwc_dec1_exit(void)
+{
+
+
+
+}
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-dec1.h linux-2.4.x/drivers/usb/pwc-dec1.h
--- linux-2.4.x.orig/drivers/usb/pwc-dec1.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-dec1.h	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,36 @@
+/* Linux driver for Philips webcam
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+
+
+#ifndef PWC_DEC1_H
+#define PWC_DEC1_H
+
+void pwc_dec1_init(int type, int release, void *buffer, void *private_data);
+void pwc_dec1_exit(void);
+
+#endif
+
+
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-dec23.c linux-2.4.x/drivers/usb/pwc-dec23.c
--- linux-2.4.x.orig/drivers/usb/pwc-dec23.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-dec23.c	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,623 @@
+/* Linux driver for Philips webcam
+   Decompression for chipset version 2 et 3
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+#include "pwc-timon.h"
+#include "pwc-kiara.h"
+#include "pwc-dec23.h"
+#include "pwc-ioctl.h"
+
+#include <linux/string.h>
+
+/****
+ *
+ *
+ *
+ */
+
+
+static void fill_table_a000(unsigned int *p)
+{
+  static unsigned int initial_values[12] = {
+     0xFFAD9B00, 0xFFDDEE00, 0x00221200, 0x00526500,
+     0xFFC21E00, 0x003DE200, 0xFF924B80, 0xFFD2A300,
+     0x002D5D00, 0x006DB480, 0xFFED3E00, 0x0012C200
+  };
+  static unsigned int values_derivated[12] = {
+     0x0000A4CA, 0x00004424, 0xFFFFBBDC, 0xFFFF5B36,
+     0x00007BC4, 0xFFFF843C, 0x0000DB69, 0x00005ABA,
+     0xFFFFA546, 0xFFFF2497, 0x00002584, 0xFFFFDA7C
+  };
+  unsigned int temp_values[12];
+  int i,j;
+
+  memcpy(temp_values,initial_values,sizeof(initial_values));
+  for (i=0;i<256;i++)
+   {
+     for (j=0;j<12;j++)
+      {
+	*p++ = temp_values[j];
+	temp_values[j] += values_derivated[j];
+      }
+   }
+}
+
+static void fill_table_d000(unsigned char *p)
+{
+  int bit,byte;
+
+  for (bit=0; bit<8; bit++)
+   {
+     unsigned char bitpower = 1<<bit;
+     unsigned char mask = bitpower-1;
+     for (byte=0; byte<256; byte++)
+      {
+	if (byte & bitpower)
+	  *p++ = -(byte & mask);
+	else
+	  *p++ = (byte & mask);
+      }
+   }
+}
+
+/*
+ *
+ * Kiara: 0 <= ver <= 7
+ * Timon: 0 <= ver <= 15
+ *
+ */
+void fill_table_color(unsigned int version, const unsigned int *romtable, 
+    unsigned char *p0004, 
+    unsigned char *p8004)
+{
+  const unsigned int *table;
+  unsigned char *p0, *p8;
+  int i,j,k;
+  int dl,bit,pw;
+
+  romtable += version*256;
+
+  for (i=0; i<2; i++)
+   {
+     table = romtable + i*128;
+
+     for (dl=0; dl<16; dl++)
+      {
+	p0 = p0004 + (i<<14) + (dl<<10);
+	p8 = p8004 + (i<<12) + (dl<<8);
+
+	for (j=0; j<8; j++ , table++, p0+=128)
+	 {
+	   for (k=0; k<16; k++)
+	    {
+	      if (k==0)
+		bit=1;
+	      else if (k>=1 && k<3)
+		bit=(table[0]>>15)&7;
+	      else if (k>=3 && k<6)
+		bit=(table[0]>>12)&7;
+	      else if (k>=6 && k<10)
+		bit=(table[0]>>9)&7;
+	      else if (k>=10 && k<13)
+		bit=(table[0]>>6)&7;
+	      else if (k>=13 && k<15)
+		bit=(table[0]>>3)&7;
+	      else
+		bit=(table[0])&7;
+	      if (k == 0)
+		*(unsigned char *)p8++ = 8;
+	      else
+		*(unsigned char *)p8++ = j - bit;
+	      *(unsigned char *)p8++ = bit;
+
+	      pw = 1<<bit;
+	      p0[k+0x00] = (1*pw)  + 0x80;
+	      p0[k+0x10] = (2*pw)  + 0x80;
+	      p0[k+0x20] = (3*pw)  + 0x80;
+	      p0[k+0x30] = (4*pw)  + 0x80;
+	      p0[k+0x40] = (-pw)   + 0x80;
+	      p0[k+0x50] = (2*-pw) + 0x80;
+	      p0[k+0x60] = (3*-pw) + 0x80;
+	      p0[k+0x70] = (4*-pw) + 0x80;
+	    } /* end of for (k=0; k<16; k++, p8++) */
+	 } /* end of for (j=0; j<8; j++ , table++) */
+      } /* end of for (dl=0; dl<16; dl++) */
+   } /* end of for (i=0; i<2; i++) */
+}
+
+/*
+ * precision = (pdev->xx + pdev->yy)
+ *
+ */
+void fill_table_dc00_d800(unsigned int precision, unsigned int *pdc00, unsigned int *pd800)
+{
+  int i;
+  unsigned int offset1, offset2;
+ 
+  for(i=0,offset1=0x4000, offset2=0; i<256 ; i++,offset1+=0x7BC4, offset2+=0x7BC4)
+   {
+     unsigned int msb = offset1 >> 15;
+
+     if ( msb > 255)
+      {
+	if (msb)
+	  msb=0;
+	else
+	  msb=255;
+      }
+
+     *pdc00++ = msb << precision;
+     *pd800++ = offset2;
+   }
+
+}
+
+/*
+ * struct {
+ *   unsigned char op;	    // operation to execute
+ *   unsigned char bits;    // bits use to perform operation
+ *   unsigned char offset1; // offset to add to access in the table_0004 % 16
+ *   unsigned char offset2; // offset to add to access in the table_0004
+ * }
+ *
+ */
+static unsigned int table_ops[] = {
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x10, 0x00,0x06,0x01,0x30,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x01,0x20, 0x01,0x00,0x00,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x50, 0x00,0x05,0x02,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x03,0x00, 0x01,0x00,0x00,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x10, 0x00,0x06,0x02,0x10,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x01,0x60, 0x01,0x00,0x00,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x50, 0x00,0x05,0x02,0x40,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x03,0x40, 0x01,0x00,0x00,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x10, 0x00,0x06,0x01,0x70,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x01,0x20, 0x01,0x00,0x00,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x50, 0x00,0x05,0x02,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x03,0x00, 0x01,0x00,0x00,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x10, 0x00,0x06,0x02,0x50,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x01,0x60, 0x01,0x00,0x00,0x00,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x00, 0x00,0x04,0x01,0x50, 0x00,0x05,0x02,0x40,
+0x02,0x00,0x00,0x00, 0x00,0x03,0x01,0x40, 0x00,0x05,0x03,0x40, 0x01,0x00,0x00,0x00
+};
+
+/*
+ * TODO: multiply by 4 all values
+ *
+ */
+static unsigned int MulIdx[256] = {
+ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+ 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
+ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3,
+ 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4,
+ 6, 7, 8, 9, 7,10,11, 8, 8,11,10, 7, 9, 8, 7, 6,
+ 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 4,
+ 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2, 1, 3, 0, 2,
+ 0, 3, 3, 0, 1, 2, 2, 1, 2, 1, 1, 2, 3, 0, 0, 3,
+ 0, 1, 2, 3, 3, 2, 1, 0, 3, 2, 1, 0, 0, 1, 2, 3,
+ 1, 1, 1, 1, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2,
+ 7,10,11, 8, 9, 8, 7, 6, 6, 7, 8, 9, 8,11,10, 7,
+ 4, 5, 5, 4, 5, 4, 4, 5, 5, 4, 4, 5, 4, 5, 5, 4,
+ 7, 9, 6, 8,10, 8, 7,11,11, 7, 8,10, 8, 6, 9, 7,
+ 1, 3, 0, 2, 2, 0, 3, 1, 2, 0, 3, 1, 1, 3, 0, 2,
+ 1, 2, 2, 1, 3, 0, 0, 3, 0, 3, 3, 0, 2, 1, 1, 2,
+10, 8, 7,11, 8, 6, 9, 7, 7, 9, 6, 8,11, 7, 8,10
+};
+
+
+
+void pwc_dec23_init(int type, int release, unsigned char *mode, void *data)
+{
+  int flags;
+  struct pwc_dec23_private *pdev = data;
+  release = release;
+
+  switch (type)
+   {
+    case 720:
+    case 730:
+    case 740:
+    case 750:
+      flags = mode[2]&0x18;	/* our: flags = 8, mode[2]==e8 */
+      if (flags==8)
+	pdev->zz = 7;
+      else if (flags==0x10)
+	pdev->zz = 8;
+      else
+	pdev->zz = 6;
+      flags = mode[2]>>5;	/* our: 7 */
+
+      fill_table_color(flags, (unsigned int *)KiaraRomTable, pdev->table_0004, pdev->table_8004);
+      break;
+
+
+    case 675:
+    case 680:
+    case 690:
+      flags = mode[2]&6;
+      if (flags==2)
+	pdev->zz = 7;
+      else if (flags==4)
+	pdev->zz = 8;
+      else
+	pdev->zz = 6;
+      flags = mode[2]>>3;
+
+      fill_table_color(flags, (unsigned int *)TimonRomTable, pdev->table_0004, pdev->table_8004);
+      break;
+
+    default:
+      /* Not supported */
+      return;
+   }
+
+  /* * * * ** */
+  pdev->xx = 8 - pdev->zz;
+  pdev->yy = 15 - pdev->xx;
+  pdev->zzmask = 0xFF>>pdev->xx;
+  //pdev->zzmask = (1U<<pdev->zz)-1;
+
+
+  fill_table_dc00_d800(pdev->xx + pdev->yy, pdev->table_dc00, pdev->table_d800);
+  fill_table_a000(pdev->table_a004);
+  fill_table_d000(pdev->table_d004);
+}
+
+
+/*
+ * To manage the stream, we keep in a 32 bits variables,
+ * the next bits in the stream. fill_reservoir() add to
+ * the reservoir at least wanted nbits.
+ *
+ *
+ */
+#define fill_nbits(reservoir,nbits_in_reservoir,stream,nbits_wanted) do { \
+   while (nbits_in_reservoir<nbits_wanted) \
+    { \
+      reservoir |= (*(stream)++) << nbits_in_reservoir; \
+      nbits_in_reservoir+=8; \
+    } \
+}  while(0);
+
+#define get_nbits(reservoir,nbits_in_reservoir,stream,nbits_wanted,result) do { \
+   fill_nbits(reservoir,nbits_in_reservoir,stream,nbits_wanted); \
+   result = (reservoir) & ((1U<<nbits_wanted)-1); \
+   reservoir >>= nbits_wanted; \
+   nbits_in_reservoir -= nbits_wanted; \
+}  while(0);
+
+
+
+static void DecompressBand23(const struct pwc_dec23_private *pdev,
+                             const unsigned char *rawyuv,
+			     unsigned char *planar_y,
+			     unsigned char *planar_u,
+			     unsigned char *planar_v,
+			     unsigned int image_x,		/* aka number of pixels wanted ??? */
+			     unsigned int pixels_per_line,	/* aka number of pixels per line */
+			     int flags)
+{
+
+
+  unsigned int reservoir, nbits_in_reservoir;
+  int first_4_bits;
+  unsigned int bytes_per_channel;
+  int line_size;	/* size of the line (4Y+U+V) */
+  int passes;
+  const unsigned char *ptable0004, *ptable8004;
+
+  int even_line;
+  unsigned int temp_colors[16];
+  int nblocks;
+
+  const unsigned char *stream;
+  unsigned char *dest_y, *dest_u=NULL, *dest_v=NULL;
+  unsigned int offset_to_plane_u, offset_to_plane_v;
+
+  int i;
+
+
+  reservoir = 0;
+  nbits_in_reservoir = 0;
+  stream = rawyuv+1;	/* The first byte of the stream is skipped */
+  even_line = 1;
+
+  get_nbits(reservoir,nbits_in_reservoir,stream,4,first_4_bits);
+
+  line_size = pixels_per_line*3;
+
+  for (passes=0;passes<2;passes++)
+   {
+     if (passes==0)
+      {
+	bytes_per_channel = pixels_per_line;
+	dest_y = planar_y;
+	nblocks = image_x/4;
+      }
+     else
+      {
+	/* Format planar: All Y, then all U, then all V */
+	bytes_per_channel = pixels_per_line/2;
+	dest_u = planar_u;
+	dest_v = planar_v;
+	dest_y = dest_u;
+	nblocks = image_x/8;
+      }
+
+     offset_to_plane_u = bytes_per_channel*2;
+     offset_to_plane_v = bytes_per_channel*3;
+     /*
+     printf("bytes_per_channel = %d\n",bytes_per_channel);
+     printf("offset_to_plane_u = %d\n",offset_to_plane_u);
+     printf("offset_to_plane_v = %d\n",offset_to_plane_v);
+     */
+
+     while (nblocks-->0)
+      {
+	unsigned int gray_index;
+
+	fill_nbits(reservoir,nbits_in_reservoir,stream,16);
+	gray_index = reservoir & pdev->zzmask;
+	reservoir >>= pdev->zz;
+	nbits_in_reservoir -= pdev->zz;
+
+	fill_nbits(reservoir,nbits_in_reservoir,stream,2);
+
+	if ( (reservoir & 3) == 0)
+	 {
+	   reservoir>>=2;
+	   nbits_in_reservoir-=2;
+	   for (i=0;i<16;i++)
+	     temp_colors[i] = pdev->table_dc00[gray_index];
+
+	 }
+	else
+	 {
+	   unsigned int channel_v, offset1;
+
+	   /* swap bit 0 and 2 of offset_OR */
+	   channel_v = ((reservoir & 1) << 2) | (reservoir & 2) | ((reservoir & 4)>>2);
+	   reservoir>>=3;
+	   nbits_in_reservoir-=3;
+
+	   for (i=0;i<16;i++)
+	     temp_colors[i] = pdev->table_d800[gray_index];
+
+	   ptable0004 = pdev->table_0004 + (passes*16384) + (first_4_bits*1024) + (channel_v*128);
+	   ptable8004 = pdev->table_8004 + (passes*4096)  + (first_4_bits*256)  + (channel_v*32);
+
+	   offset1 = 0;
+	   while(1) 
+	    {
+	      unsigned int index_in_table_ops, op, rows=0;
+	      fill_nbits(reservoir,nbits_in_reservoir,stream,16);
+
+	      /* mode is 0,1 or 2 */
+	      index_in_table_ops = (reservoir&0x3F);
+	      op = table_ops[ index_in_table_ops*4 ];
+	      if (op == 2)
+	       {
+		 reservoir >>= 2;
+		 nbits_in_reservoir -= 2;
+		 break;	/* exit the while(1) */
+	       }
+	      if (op == 0)
+	       {
+		 unsigned int shift;
+
+		 offset1 = (offset1 + table_ops[index_in_table_ops*4+2]) & 0x0F;
+		 shift = table_ops[ index_in_table_ops*4+1 ];
+		 reservoir >>= shift;
+		 nbits_in_reservoir -= shift;
+		 rows = ptable0004[ offset1 + table_ops[index_in_table_ops*4+3] ];
+	       }
+	      if (op == 1)
+	       {
+		  /* 10bits [ xxxx xxxx yyyy 000 ]
+		   * yyy => offset in the table8004
+		   * xxx => offset in the tabled004
+		   */
+		 unsigned int mask, shift;
+		 unsigned int col1, row1, total_bits;
+
+		 offset1 = (offset1 + ((reservoir>>3)&0x0F)+1) & 0x0F;
+
+		 col1 = (reservoir>>7) & 0xFF;
+		 row1 = ptable8004 [ offset1*2 ];
+
+		 /* Bit mask table */
+		 mask = pdev->table_d004[ (row1<<8) + col1 ];
+		 shift = ptable8004 [ offset1*2 + 1];
+		 rows = ((mask << shift) + 0x80) & 0xFF;
+
+		 total_bits = row1 + 8;
+		 reservoir >>= total_bits;
+		 nbits_in_reservoir -= total_bits;
+	       }
+	       {
+		 const unsigned int *table_a004 = pdev->table_a004 + rows*12;
+		 unsigned int *poffset = MulIdx + offset1*16;	/* 64/4 (int) */
+		 for (i=0;i<16;i++)
+		  {
+		    temp_colors[i] += table_a004[ *poffset ];
+		    poffset++;
+		  }
+	       }
+	   }
+	 }
+#define USE_SIGNED_INT_FOR_COLOR
+#ifdef USE_SIGNED_INT_FOR_COLOR
+#  define CLAMP(x) ((x)>255?255:((x)<0?0:x))
+#else
+#  define CLAMP(x) ((x)>255?255:x)
+#endif
+
+	if (passes == 0)
+	 {
+#ifdef USE_SIGNED_INT_FOR_COLOR
+	   const int *c = temp_colors;
+#else
+	   const unsigned int *c = temp_colors;
+#endif
+	   unsigned char *d;
+
+	   d = dest_y;
+	   for (i=0;i<4;i++,c++)
+	     *d++ = CLAMP((*c) >> pdev->yy);
+
+	   d = dest_y + bytes_per_channel;
+	   for (i=0;i<4;i++,c++)
+	     *d++ = CLAMP((*c) >> pdev->yy);
+
+	   d = dest_y + offset_to_plane_u;
+	   for (i=0;i<4;i++,c++)
+	     *d++ = CLAMP((*c) >> pdev->yy);
+
+	   d = dest_y + offset_to_plane_v;
+	   for (i=0;i<4;i++,c++)
+	     *d++ = CLAMP((*c) >> pdev->yy);
+
+	   dest_y += 4;
+	 }
+	else if (passes == 1)
+	 {
+#ifdef USE_SIGNED_INT_FOR_COLOR
+	   int *c1 = temp_colors;
+	   int *c2 = temp_colors+4;
+#else
+	   unsigned int *c1 = temp_colors;
+	   unsigned int *c2 = temp_colors+4;
+#endif
+	   unsigned char *d;
+
+	   d = dest_y;
+	   for (i=0;i<4;i++,c1++,c2++)
+	    {
+	      *d++ = CLAMP((*c1) >> pdev->yy);
+	      *d++ = CLAMP((*c2) >> pdev->yy);
+	    }
+	   c1 = temp_colors+12;
+	   //c2 = temp_colors+8;
+	   d = dest_y + bytes_per_channel;
+	   for (i=0;i<4;i++,c1++,c2++)
+	    {
+	      *d++ = CLAMP((*c1) >> pdev->yy);
+	      *d++ = CLAMP((*c2) >> pdev->yy);
+	    }
+
+	   if (even_line)	/* Each line, swap u/v */
+	    {
+	      even_line=0;
+	      dest_y = dest_v;
+	      dest_u += 8;
+	    }
+	   else
+	    {
+	      even_line=1;
+	      dest_y = dest_u;
+	      dest_v += 8;
+	    }
+	 }
+
+      } /* end of while (nblocks-->0) */
+
+   } /* end of for (passes=0;passes<2;passes++) */
+
+}
+
+
+/**
+ *
+ * image: size of the image wanted
+ * view : size of the image returned by the camera
+ * offset: (x,y) to displayer image in the view
+ *
+ * src: raw data
+ * dst: image output
+ * flags: PWCX_FLAG_PLANAR
+ * pdev: private buffer
+ * bandlength:
+ *
+ */
+void pwc_dec23_decompress(const struct pwc_coord *image,
+                            const struct pwc_coord *view,
+			    const struct pwc_coord *offset,
+			    const void *src,
+			    void *dst,
+			    int flags,
+			    const void *data,
+			    int bandlength)
+{
+  const struct pwc_dec23_private *pdev = data;
+  unsigned char *pout, *pout_planar_y=NULL, *pout_planar_u=NULL, *pout_planar_v=NULL;
+  int i,n,stride,pixel_size;
+
+
+  if (flags & PWCX_FLAG_BAYER)
+   {
+     pout = dst + (view->x * offset->y) + offset->x;
+     pixel_size = view->x * 4;
+   }
+  else
+   {
+     n = view->x * view->y;
+
+     /* offset in Y plane */
+     stride = view->x * offset->y;
+     pout_planar_y = dst + stride + offset->x;
+
+     /* offsets in U/V planes */
+     stride = (view->x * offset->y) + offset->x/2;
+     pout_planar_u = dst + n +     + stride;
+     pout_planar_v = dst + n + n/4 + stride;
+
+     pixel_size = view->x * 4;
+   }
+
+
+  for (i=0;i<image->y;i+=4)
+   {
+     if (flags & PWCX_FLAG_BAYER)
+      {
+	//TODO:
+	//DecompressBandBayer(pdev,src,pout,image.x,view->x,flags);
+	src += bandlength;
+	pout += pixel_size;
+      }
+     else
+      {
+	DecompressBand23(pdev,src,pout_planar_y,pout_planar_u,pout_planar_v,image->x,view->x,flags);
+	src += bandlength;
+	pout_planar_y += pixel_size;
+	pout_planar_u += view->x;
+	pout_planar_v += view->x;
+      }
+   }
+}
+
+void pwc_dec23_exit(void)
+{
+  /* Do nothing */
+
+}
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-dec23.h linux-2.4.x/drivers/usb/pwc-dec23.h
--- linux-2.4.x.orig/drivers/usb/pwc-dec23.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-dec23.h	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,58 @@
+/* Linux driver for Philips webcam
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+#ifndef PWC_DEC23_H
+#define PWC_DEC23_H
+
+struct pwc_dec23_private
+{
+  unsigned char xx,yy,zz,zzmask;
+
+  unsigned char table_0004[2*0x4000];
+  unsigned char table_8004[2*0x1000];
+  unsigned int  table_a004[256*12];
+
+  unsigned char table_d004[8*256];
+  unsigned int  table_d800[256];
+  unsigned int  table_dc00[256];
+};
+
+
+void pwc_dec23_init(int type, int release, unsigned char *buffer, void *private_data);
+void pwc_dec23_exit(void);
+void pwc_dec23_decompress(const struct pwc_coord *image,
+                            const struct pwc_coord *view,
+			    const struct pwc_coord *offset,
+			    const void *src,
+			    void *dst,
+			    int flags,
+			    const void *data,
+			    int bandlength);
+
+
+
+#endif
+
+
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc.h linux-2.4.x/drivers/usb/pwc.h
--- linux-2.4.x.orig/drivers/usb/pwc.h	2006-03-04 10:10:49.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc.h	2006-07-03 11:13:17.000000000 +0200
@@ -1,4 +1,11 @@
-/* (C) 1999-2002 Nemosoft Unv. (webcam@smcc.demon.nl)
+/* (C) 1999-2003 Nemosoft Unv.
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -18,6 +25,8 @@
 #ifndef PWC_H
 #define PWC_H
 
+#include <linux/version.h>
+
 #include <linux/config.h>
 #include <linux/module.h>
 #include <linux/usb.h>
@@ -25,10 +34,12 @@
 #include <linux/videodev.h>
 #include <linux/wait.h>
 #include <linux/smp_lock.h>
-
 #include <asm/semaphore.h>
 #include <asm/errno.h>
 
+#include "pwc-uncompress.h"
+#include "pwc-ioctl.h"
+
 /* Defines and structures for the Philips webcam */
 /* Used for checking memory corruption/pointer validation */
 #define PWC_MAGIC 0x89DC10ABUL
@@ -58,10 +69,12 @@
 #define TOUCAM_HEADER_SIZE		8
 #define TOUCAM_TRAILER_SIZE		4
 
+#define FEATURE_MOTOR_PANTILT		0x0001
+
 /* Version block */
-#define PWC_MAJOR	8
-#define PWC_MINOR	10
-#define PWC_VERSION 	"8.10"
+#define PWC_MAJOR	9
+#define PWC_MINOR	0
+#define PWC_VERSION 	"9.0.2-unofficial"
 #define PWC_NAME 	"pwc"
 
 /* Turn certain features on/off */
@@ -82,13 +95,7 @@
 #define PWC_FRAME_SIZE 		(460800 + TOUCAM_HEADER_SIZE + TOUCAM_TRAILER_SIZE)
 
 /* Absolute maximum number of buffers available for mmap() */
-#define MAX_IMAGES 		4
-
-struct pwc_coord
-{
-	int x, y;		/* guess what */
-	int size;		/* size, or offset */
-};
+#define MAX_IMAGES 		10
 
 /* The following structures were based on cpia.h. Why reinvent the wheel? :-) */
 struct pwc_iso_buf
@@ -112,63 +119,70 @@
 
 struct pwc_device
 {
+   struct video_device *vdev;
 #ifdef PWC_MAGIC
    int magic;
 #endif
    /* Pointer to our usb_device */
    struct usb_device *udev;
    
-   int type;                    /* type of cam (645, 646, 675, 680, 690) */
+   int type;                    /* type of cam (645, 646, 675, 680, 690, 720, 730, 740, 750) */
    int release;			/* release number */
-   int unplugged;		/* set when the plug is pulled */
+   int features;		/* feature bits */
+   char serial[30];		/* serial number (string) */
+   int error_status;		/* set when something goes wrong with the cam (unplugged, USB errors) */
    int usb_init;		/* set when the cam has been initialized over USB */
 
    /*** Video data ***/
    int vopen;			/* flag */
-   struct video_device *vdev;
    int vendpoint;		/* video isoc endpoint */
    int vcinterface;		/* video control interface */
    int valternate;		/* alternate interface needed */
    int vframes, vsize;		/* frames-per-second & size (see PSZ_*) */
-   int vpalette;		/* YUV */
+   int vpalette;		/* palette: 420P, RAW or RGBBAYER */
    int vframe_count;		/* received frames */
    int vframes_dumped; 		/* counter for dumped frames */
    int vframes_error;		/* frames received in error */
    int vmax_packet_size;	/* USB maxpacket size */
    int vlast_packet_size;	/* for frame synchronisation */
+   int visoc_errors;		/* number of contiguous ISOC errors */
    int vcompression;		/* desired compression factor */
    int vbandlength;		/* compressed band length; 0 is uncompressed */
    char vsnapshot;		/* snapshot mode */
    char vsync;			/* used by isoc handler */
    char vmirror;		/* for ToUCaM series */
+   
+   int cmd_len;
+   unsigned char cmd_buf[13];
 
    /* The image acquisition requires 3 to 4 steps:
       1. data is gathered in short packets from the USB controller
       2. data is synchronized and packed into a frame buffer
       3a. in case data is compressed, decompress it directly into image buffer
       3b. in case data is uncompressed, copy into image buffer with viewport
-      4. data is transfered to the user process
+      4. data is transferred to the user process
 
-      Note that MAX_ISO_BUFS != MAX_FRAMES != MAX_IMAGES.... 
+      Note that MAX_ISO_BUFS != MAX_FRAMES != MAX_IMAGES....
       We have in effect a back-to-back-double-buffer system.
     */
    /* 1: isoc */
    struct pwc_iso_buf sbuf[MAX_ISO_BUFS];
    char iso_init;
-   
+
    /* 2: frame */
    struct pwc_frame_buf *fbuf;	/* all frames */
    struct pwc_frame_buf *empty_frames, *empty_frames_tail;	/* all empty frames */
    struct pwc_frame_buf *full_frames, *full_frames_tail;	/* all filled frames */
    struct pwc_frame_buf *fill_frame;	/* frame currently being filled */
    struct pwc_frame_buf *read_frame;	/* frame currently read by user process */
-   int frame_size;
    int frame_header_size, frame_trailer_size;
+   int frame_size;
+   int frame_total_size; /* including header & trailer */
    int drop_frames;
 #if PWC_DEBUG
    int sequence;			/* Debugging aid */
 #endif
-   
+
    /* 3: decompression */
    struct pwc_decompressor *decompressor;	/* function block with decompression routines */
    void *decompress_data;		/* private data for decompression engine */
@@ -176,11 +190,12 @@
    /* 4: image */
    /* We have an 'image' and a 'view', where 'image' is the fixed-size image
       as delivered by the camera, and 'view' is the size requested by the
-      program. The camera image is centered in this viewport, laced with 
+      program. The camera image is centered in this viewport, laced with
       a gray or black border. view_min <= image <= view <= view_max;
     */
    int image_mask;			/* bitmask of supported sizes */
-   struct pwc_coord view_min, view_max;	/* minimum and maximum sizes */
+   struct pwc_coord view_min, view_max;	/* minimum and maximum viewable sizes */
+   struct pwc_coord abs_max;            /* maximum supported size with compression */
    struct pwc_coord image, view;	/* image and viewport size */
    struct pwc_coord offset;		/* offset within the viewport */
 
@@ -194,24 +209,18 @@
    struct semaphore modlock;		/* to prevent races in video_open(), etc */
    spinlock_t ptrlock;			/* for manipulating the buffer pointers */
 
+   /*** motorized pan/tilt feature */
+   struct pwc_mpt_range angle_range;
+   int pan_angle;			/* in degrees * 100 */
+   int tilt_angle;			/* absolute angle; 0,0 is home position */
+
    /*** Misc. data ***/
    wait_queue_head_t frameq;		/* When waiting for a frame to finish... */
-   wait_queue_head_t remove_ok;		/* When we got hot unplugged, we have to avoid a few race conditions */
 #if PWC_INT_PIPE
    void *usb_int_handler;		/* for the interrupt endpoint */
-#endif   
+#endif
 };
 
-/* Enumeration of image sizes */
-#define PSZ_SQCIF	0x00
-#define PSZ_QSIF	0x01
-#define PSZ_QCIF	0x02
-#define PSZ_SIF		0x03
-#define PSZ_CIF		0x04
-#define PSZ_VGA		0x05
-#define PSZ_MAX		6
-
-
 
 #ifdef __cplusplus
 extern "C" {
@@ -248,7 +257,7 @@
 extern int pwc_set_saturation(struct pwc_device *pdev, int value);
 extern int pwc_set_leds(struct pwc_device *pdev, int on_value, int off_value);
 extern int pwc_get_leds(struct pwc_device *pdev, int *on_value, int *off_value);
-extern int pwc_get_cmos_sensor(struct pwc_device *pdev);
+extern int pwc_get_cmos_sensor(struct pwc_device *pdev, int *sensor);
 
 /* Power down or up the camera; not supported by all models */
 extern int pwc_camera_power(struct pwc_device *pdev, int power);
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-if.c linux-2.4.x/drivers/usb/pwc-if.c
--- linux-2.4.x.orig/drivers/usb/pwc-if.c	2006-03-04 10:10:47.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-if.c	2006-07-03 11:13:17.000000000 +0200
@@ -1,6 +1,13 @@
-/* Linux driver for Philips webcam 
+/* Linux driver for Philips webcam
    USB and Video4Linux interface part.
-   (C) 1999-2002 Nemosoft Unv.
+   (C) 1999-2004 Nemosoft Unv.
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -60,6 +67,10 @@
 
 #include "pwc.h"
 #include "pwc-ioctl.h"
+#include "pwc-kiara.h"
+#include "pwc-timon.h"
+#include "pwc-dec23.h"
+#include "pwc-dec1.h"
 #include "pwc-uncompress.h"
 
 /* Function prototypes and driver templates */
@@ -75,15 +86,23 @@
 	{ USB_DEVICE(0x0471, 0x0310) },
 	{ USB_DEVICE(0x0471, 0x0311) },
 	{ USB_DEVICE(0x0471, 0x0312) },
+	{ USB_DEVICE(0x0471, 0x0313) }, /* the 'new' 720K */
 	{ USB_DEVICE(0x069A, 0x0001) }, /* Askey */
-	{ USB_DEVICE(0x046D, 0x08b0) }, /* Logitech QuickCam Pro 3000 */
-	{ USB_DEVICE(0x046D, 0x08b1) }, /* Logitech QuickCam Notebook Pro */
-	{ USB_DEVICE(0x046d, 0x08b2) }, /* Logitech QuickCam Pro 4000 */
-	{ USB_DEVICE(0x046d, 0x08b3) }, /* Logitech QuickCam Zoom */
+	{ USB_DEVICE(0x046D, 0x08B0) }, /* Logitech QuickCam Pro 3000 */
+	{ USB_DEVICE(0x046D, 0x08B1) }, /* Logitech QuickCam Notebook Pro */
+	{ USB_DEVICE(0x046D, 0x08B2) }, /* Logitech QuickCam Pro 4000 */
+	{ USB_DEVICE(0x046D, 0x08B3) }, /* Logitech QuickCam Zoom (old model) */
+	{ USB_DEVICE(0x046D, 0x08B4) }, /* Logitech QuickCam Zoom (new model) */
+	{ USB_DEVICE(0x046D, 0x08B5) }, /* Logitech QuickCam Orbit/Sphere */
+	{ USB_DEVICE(0x046D, 0x08B6) }, /* Logitech (reserved) */
+	{ USB_DEVICE(0x046D, 0x08B7) }, /* Logitech (reserved) */
+	{ USB_DEVICE(0x046D, 0x08B8) }, /* Logitech (reserved) */
 	{ USB_DEVICE(0x055D, 0x9000) }, /* Samsung */
 	{ USB_DEVICE(0x055D, 0x9001) },
 	{ USB_DEVICE(0x041E, 0x400C) }, /* Creative Webcam 5 */
+	{ USB_DEVICE(0x041E, 0x4011) }, /* Creative Webcam Pro Ex */
 	{ USB_DEVICE(0x04CC, 0x8116) }, /* Afina Eye */
+	{ USB_DEVICE(0x06BE, 0x8116) }, /* new Afina Eye */
 	{ USB_DEVICE(0x0d81, 0x1910) }, /* Visionite */
 	{ USB_DEVICE(0x0d81, 0x1900) },
 	{ }
@@ -101,11 +120,11 @@
 	disconnect:		usb_pwc_disconnect,	/* disconnect() */
 };
 
-#define MAX_DEV_HINTS 10
+#define MAX_DEV_HINTS	20
+#define MAX_ISOC_ERRORS	20
 
 static int default_size = PSZ_QCIF;
 static int default_fps = 10;
-static int default_palette = VIDEO_PALETTE_YUV420P; /* This format is understood by most tools */
 static int default_fbufs = 3;   /* Default number of frame buffers */
 static int default_mbufs = 2;	/* Default number of mmap() buffers */
        int pwc_trace = TRACE_MODULE | TRACE_FLOW | TRACE_PWCX;
@@ -119,9 +138,6 @@
 	struct pwc_device *pdev;
 } device_hint[MAX_DEV_HINTS];
 
-static struct semaphore mem_lock;
-static void *mem_leak = NULL; /* For delayed kfree()s. See below */
-
 /***/
 
 static int  pwc_video_open(struct video_device *vdev, int mode);
@@ -293,20 +309,34 @@
 	
 	/* Allocate decompressor table space */
 	kbuf = NULL;
-	if (pdev->decompressor != NULL) {
-		kbuf = kmalloc(pdev->decompressor->table_size, GFP_KERNEL);
-		if (kbuf == NULL) {
-			Err("Failed to allocate decompress table.\n");
-			return -ENOMEM;
-		}
-		Trace(TRACE_MEMORY, "Allocated decompress table %p.\n", kbuf);
+	switch (pdev->type)
+	 {
+	  case 675:
+	  case 680:
+	  case 690:
+	  case 720:
+	  case 730:
+	  case 740:
+	  case 750:
+	    Trace(TRACE_MEMORY,"private_data(%d)\n",sizeof(struct pwc_dec23_private));
+	    kbuf = kmalloc(sizeof(struct pwc_dec23_private), GFP_KERNEL);	/* Timon & Kiara */
+	    break;
+	  case 645:
+	  case 646:
+	    /* TODO & FIXME */
+	    kbuf = kmalloc(sizeof(struct pwc_dec23_private), GFP_KERNEL);
+	    break;
+	 }
+	if (kbuf == NULL) {
+	   Err("Failed to allocate decompress table.\n");
+	   return -ENOMEM;
 	}
 	pdev->decompress_data = kbuf;
 	
 	/* Allocate image buffer; double buffer for mmap() */
 	kbuf = rvmalloc(default_mbufs * pdev->len_per_image);
 	if (kbuf == NULL) {
-		Err("Failed to allocate image buffer(s).\n");
+		Err("Failed to allocate image buffer(s). needed (%d)\n",default_mbufs * pdev->len_per_image);
 		return -ENOMEM;
 	}
 	Trace(TRACE_MEMORY, "Allocated image buffer at %p.\n", kbuf);
@@ -383,50 +413,50 @@
    the user program. The first scheme involves the ISO buffers (called thus
    since they transport ISO data from the USB controller), and not really
    interesting. Suffices to say the data from this buffer is quickly 
-   gathered in an interrupt handler (pwc_isoc_handler) and placed into the 
+   gathered in an interrupt handler (pwc_isoc_handler) and placed into the
    frame buffer.
-   
+
    The frame buffer is the second scheme, and is the central element here.
    It collects the data from a single frame from the camera (hence, the
    name). Frames are delimited by the USB camera with a short USB packet,
    so that's easy to detect. The frame buffers form a list that is filled
-   by the camera+USB controller and drained by the user process through 
+   by the camera+USB controller and drained by the user process through
    either read() or mmap().
-   
+
    The image buffer is the third scheme, in which frames are decompressed
-   and possibly converted into planar format. For mmap() there is more than
+   and converted into planar format. For mmap() there is more than
    one image buffer available.
 
-   The frame buffers provide the image buffering, in case the user process
-   is a bit slow. This introduces lag and some undesired side-effects.
-   The problem arises when the frame buffer is full. I used to drop the last 
-   frame, which makes the data in the queue stale very quickly. But dropping 
+   The frame buffers provide the image buffering. In case the user process
+   is a bit slow, this introduces lag and some undesired side-effects.
+   The problem arises when the frame buffer is full. I used to drop the last
+   frame, which makes the data in the queue stale very quickly. But dropping
    the frame at the head of the queue proved to be a litte bit more difficult.
    I tried a circular linked scheme, but this introduced more problems than
    it solved.
 
    Because filling and draining are completely asynchronous processes, this
    requires some fiddling with pointers and mutexes.
-   
+
    Eventually, I came up with a system with 2 lists: an 'empty' frame list
    and a 'full' frame list:
      * Initially, all frame buffers but one are on the 'empty' list; the one
        remaining buffer is our initial fill frame.
-     * If a frame is needed for filling, we take it from the 'empty' list, 
-       unless that list is empty, in which case we take the buffer at the 
-       head of the 'full' list.
-     * When our fill buffer has been filled, it is appended to the 'full' 
+     * If a frame is needed for filling, we try to take it from the 'empty' 
+       list, unless that list is empty, in which case we take the buffer at 
+       the head of the 'full' list.
+     * When our fill buffer has been filled, it is appended to the 'full'
        list.
-     * If a frame is needed by read() or mmap(), it is taken from the head of 
+     * If a frame is needed by read() or mmap(), it is taken from the head of
        the 'full' list, handled, and then appended to the 'empty' list. If no
        buffer is present on the 'full' list, we wait.
    The advantage is that the buffer that is currently being decompressed/
-   converted, is on neither list, and thus not in our way (any other scheme 
+   converted, is on neither list, and thus not in our way (any other scheme
    I tried had the problem of old data lingering in the queue).
 
    Whatever strategy you choose, it always remains a tradeoff: with more
    frame buffers the chances of a missed frame are reduced. On the other
-   hand, on slower machines it introduces lag because the queue will 
+   hand, on slower machines it introduces lag because the queue will
    always be full.
  */
 
@@ -437,7 +467,7 @@
 {
 	int ret;
 	unsigned long flags;
-	
+
 	ret = 0;
 	spin_lock_irqsave(&pdev->ptrlock, flags);
 	if (pdev->fill_frame != NULL) {
@@ -454,11 +484,11 @@
 	if (pdev->empty_frames != NULL) {
 		/* We have empty frames available. That's easy */
 		pdev->fill_frame = pdev->empty_frames;
-		pdev->empty_frames = pdev->empty_frames->next;	
+		pdev->empty_frames = pdev->empty_frames->next;
 	}
 	else {
 		/* Hmm. Take it from the full list */
-#if PWC_DEBUG		
+#if PWC_DEBUG
 		/* sanity check */
 		if (pdev->full_frames == NULL) {
 			Err("Neither empty or full frames available!\n");
@@ -478,11 +508,11 @@
 	spin_unlock_irqrestore(&pdev->ptrlock, flags);
 	return ret;
 }
- 
+
 
 /**
-  \brief Reset all buffers, pointers and lists, except for the image_used[] buffer. 
-  
+  \brief Reset all buffers, pointers and lists, except for the image_used[] buffer.
+
   If the image_used[] buffer is cleared too, mmap()/VIDIOCSYNC will run into trouble.
  */
 static void pwc_reset_buffers(struct pwc_device *pdev)
@@ -519,7 +549,7 @@
 {
 	int ret = 0;
 	unsigned long flags;
-	
+
 	spin_lock_irqsave(&pdev->ptrlock, flags);
 	/* First grab our read_frame; this is removed from all lists, so
 	   we can release the lock after this without problems */
@@ -542,7 +572,7 @@
 			Trace(TRACE_SEQUENCE, "Decompressing frame %d\n", pdev->read_frame->sequence);
 #endif
 			/* Decompression is a lenghty process, so it's outside of the lock.
-			   This gives the isoc_handler the opportunity to fill more frames 
+			   This gives the isoc_handler the opportunity to fill more frames
 			   in the mean time.
 			*/
 			spin_unlock_irqrestore(&pdev->ptrlock, flags);
@@ -566,7 +596,7 @@
 }
 
 /**
-  \brief Advance pointers of image buffer (after each user request) 
+  \brief Advance pointers of image buffer (after each user request)
 */
 static inline void pwc_next_image(struct pwc_device *pdev)
 {
@@ -574,23 +604,6 @@
 	pdev->fill_image = (pdev->fill_image + 1) % default_mbufs;
 }
 
-/* 2001-10-14: YUV420P is the only palette remaining. */
-static int pwc_set_palette(struct pwc_device *pdev, int pal)
-{
-	if (   pal == VIDEO_PALETTE_YUV420P
-#if PWC_DEBUG
-            || pal == VIDEO_PALETTE_RAW
-#endif
-	) {
-		pdev->vpalette = pal;
-		pwc_set_image_buffer_size(pdev);
-		return 0;
-	}
-	Trace(TRACE_READ, "Palette %d not supported.\n", pal);
-	return -1;
-}
-
-
 
 /* This gets called for the Isochronous pipe (video). This is done in
  * interrupt time, so it has to be fast, not crash, and not stall. Neat.
@@ -601,14 +614,15 @@
 	int i, fst, flen;
 	int awake;
 	struct pwc_frame_buf *fbuf;
-	unsigned char *fillptr, *iso_buf;
+	unsigned char *fillptr = 0, *iso_buf = 0;
 
+	awake = 0;
 	pdev = (struct pwc_device *)urb->context;
 	if (pdev == NULL) {
 		Err("isoc_handler() called with NULL device?!\n");
 		return;
 	}
-#ifdef PWC_MAGIC	
+#ifdef PWC_MAGIC
 	if (pdev->magic != PWC_MAGIC) {
 		Err("isoc_handler() called with bad magic!\n");
 		return;
@@ -619,33 +633,47 @@
 		return;
 	}
 	if (urb->status != -EINPROGRESS && urb->status != 0) {
-		char *errmsg;
-		
+		const char *errmsg;
+
 		errmsg = "Unknown";
 		switch(urb->status) {
 			case -ENOSR:		errmsg = "Buffer error (overrun)"; break;
 			case -EPIPE:		errmsg = "Stalled (device not responding)"; break;
 			case -EOVERFLOW:	errmsg = "Babble (bad cable?)"; break;
 			case -EPROTO:		errmsg = "Bit-stuff error (bad cable?)"; break;
-			case -EILSEQ:		errmsg = "CRC/Timeout"; break;
+			case -EILSEQ:		errmsg = "CRC/Timeout (could be anything)"; break;
 			case -ETIMEDOUT:	errmsg = "NAK (device does not respond)"; break;
 		}
 		Trace(TRACE_FLOW, "pwc_isoc_handler() called with status %d [%s].\n", urb->status, errmsg);
-		return;
+		/* Give up after a number of contiguous errors on the USB bus. 
+		   Appearantly something is wrong so we simulate an unplug event.
+		 */
+		if (++pdev->visoc_errors > MAX_ISOC_ERRORS)
+		{
+			Info("Too many ISOC errors, bailing out.\n");
+			pdev->error_status = EIO;
+			awake = 1;
+			wake_up_interruptible(&pdev->frameq);
+		}
+		goto handler_end; // ugly, but practical
 	}
 
 	fbuf = pdev->fill_frame;
 	if (fbuf == NULL) {
 		Err("pwc_isoc_handler without valid fill frame.\n");
-		wake_up_interruptible(&pdev->frameq);
-		return;
+		awake = 1;
+		goto handler_end;
+	}
+	else {
+		fillptr = fbuf->data + fbuf->filled;
 	}
-	fillptr = fbuf->data + fbuf->filled;
-	awake = 0;
+
+	/* Reset ISOC error counter. We did get here, after all. */
+	pdev->visoc_errors = 0;
 
 	/* vsync: 0 = don't copy data
 	          1 = sync-hunt
-	          2 = synched 
+	          2 = synched
 	 */
 	/* Compact data */
 	for (i = 0; i < urb->number_of_packets; i++) {
@@ -658,8 +686,8 @@
 					pdev->vsync = 2;
 
 					/* ...copy data to frame buffer, if possible */
-					if (flen + fbuf->filled > pdev->frame_size) {
-						Trace(TRACE_FLOW, "Frame buffer overflow (flen = %d, frame_size = %d).\n", flen, pdev->frame_size);
+					if (flen + fbuf->filled > pdev->frame_total_size) {
+						Trace(TRACE_FLOW, "Frame buffer overflow (flen = %d, frame_total_size = %d).\n", flen, pdev->frame_total_size);
 						pdev->vsync = 0; /* Hmm, let's wait for an EOF (end-of-frame) */
 						pdev->vframes_error++;
 					}
@@ -674,7 +702,7 @@
 			if (flen < pdev->vlast_packet_size) {
 				/* Shorter packet... We probably have the end of an image-frame; 
 				   wake up read() process and let select()/poll() do something.
-				   Decompression is done in user time over there. 
+				   Decompression is done in user time over there.
 				 */
 				if (pdev->vsync == 2) {
 					/* The ToUCam Fun CMOS sensor causes the firmware to send 2 or 3 bogus 
@@ -724,14 +752,14 @@
 						pdev->drop_frames--;
 					else {
 						/* Check for underflow first */
-						if (fbuf->filled < pdev->frame_size) {
+						if (fbuf->filled < pdev->frame_total_size) {
 							Trace(TRACE_FLOW, "Frame buffer underflow (%d bytes); discarded.\n", fbuf->filled);
 							pdev->vframes_error++;
 						}
 						else {
 							/* Send only once per EOF */
 							awake = 1; /* delay wake_ups */
-							
+
 							/* Find our next frame to fill. This will always succeed, since we
 							 * nick a frame from either empty or full list, but if we had to
 							 * take it from the full list, it means a frame got dropped.
@@ -764,10 +792,13 @@
 			if (iso_error < 20)
 				Trace(TRACE_FLOW, "Iso frame %d of USB has error %d\n", i, fst);
 		}
-#endif			
+#endif
 	}
+
+handler_end:
 	if (awake)
 		wake_up_interruptible(&pdev->frameq);
+	/* No URB resubmitting in this kernel */
 }
 
 
@@ -860,7 +891,7 @@
 		if (ret)
 			Err("isoc_init() submit_urb %d failed with error %d\n", i, ret);
 		else
-			Trace(TRACE_OPEN, "URB 0x%p submitted.\n", pdev->sbuf[i].urb);
+			Trace(TRACE_MEMORY, "URB 0x%p submitted.\n", pdev->sbuf[i].urb);
 	}
 
 	/* All is done... */
@@ -872,7 +903,7 @@
 static void pwc_isoc_cleanup(struct pwc_device *pdev)
 {
 	int i;
-	
+
 	Trace(TRACE_OPEN, ">> pwc_isoc_cleanup()\n");
 	if (pdev == NULL)
 		return;
@@ -893,8 +924,10 @@
 		}
 	}
 
-	/* Stop camera, but only if we are sure the camera is still there */
-	if (!pdev->unplugged) {
+	/* Stop camera, but only if we are sure the camera is still there (unplug
+	   is signalled by EPIPE) 
+	 */
+	if (pdev->error_status && pdev->error_status != EPIPE) {
 		Trace(TRACE_OPEN, "Setting alternate interface 0.\n");
 		usb_set_interface(pdev->udev, 0, 0);
 	}
@@ -905,42 +938,32 @@
 
 int pwc_try_video_mode(struct pwc_device *pdev, int width, int height, int new_fps, int new_compression, int new_snapshot)
 {
-	int ret;
+	int ret, start;
+
 	/* Stop isoc stuff */
 	pwc_isoc_cleanup(pdev);
 	/* Reset parameters */
 	pwc_reset_buffers(pdev);
 	/* Try to set video mode... */
-	ret = pwc_set_video_mode(pdev, width, height, new_fps, new_compression, new_snapshot);
-	if (ret) /* That failed... restore old mode (we know that worked) */
-		ret = pwc_set_video_mode(pdev, pdev->view.x, pdev->view.y, pdev->vframes, pdev->vcompression, pdev->vsnapshot);
-	if (!ret)
+	start = ret = pwc_set_video_mode(pdev, width, height, new_fps, new_compression, new_snapshot);
+	if (ret) { 
+	        Trace(TRACE_FLOW, "pwc_set_video_mode attempt 1 failed.\n");
+		/* That failed... restore old mode (we know that worked) */
+		start = pwc_set_video_mode(pdev, pdev->view.x, pdev->view.y, pdev->vframes, pdev->vcompression, pdev->vsnapshot);
+		if (start) {
+		        Trace(TRACE_FLOW, "pwc_set_video_mode attempt 2 failed.\n");
+		}
+	}
+	if (start == 0)
+	{
 		if (pwc_isoc_init(pdev) < 0)
+		{
 			Info("Failed to restart ISOC transfers in pwc_try_video_mode.\n");
-	pdev->drop_frames++; /* try to avoid garbage during switch */
-	return ret;
-}
-
-
-static inline void set_mem_leak(void *ptr)
-{
-	down(&mem_lock);
-	if (mem_leak != NULL)
-		Err("Memleak: overwriting mem_leak pointer!\n");
-	Trace(TRACE_MEMORY, "Setting mem_leak to 0x%p.\n", ptr);
-	mem_leak = ptr;
-	up(&mem_lock);
-}
-
-static inline void free_mem_leak(void)
-{
-	down(&mem_lock);
-	if (mem_leak != NULL) {
-		Trace(TRACE_MEMORY, "Freeing mem_leak ptr 0x%p.\n", mem_leak);
-		kfree(mem_leak);
-		mem_leak = NULL;
+			ret = -EAGAIN; /* let's try again, who knows if it works a second time */
+		}
 	}
-	up(&mem_lock);
+	pdev->drop_frames++; /* try to avoid garbage during switch */
+	return ret; /* Return original error code */
 }
 
 
@@ -966,25 +989,29 @@
 	if (!pdev->usb_init) {
 		Trace(TRACE_OPEN, "Doing first time initialization.\n");
 		pdev->usb_init = 1;
-		
-		if (pwc_trace & TRACE_OPEN) {
-			/* Query CMOS sensor type */
+
+		if (pwc_trace & TRACE_OPEN)		
+		{
+			/* Query sensor type */
 			const char *sensor_type = NULL;
+			int ret;
 
-			i = pwc_get_cmos_sensor(pdev);
-			switch(i) {
-			case -1: /* Unknown, show nothing */; break;
-			case 0x00:  sensor_type = "Hyundai CMOS sensor"; break;
-			case 0x20:  sensor_type = "Sony CCD sensor + TDA8787"; break;
-			case 0x2E:  sensor_type = "Sony CCD sensor + Exas 98L59"; break;
-			case 0x2F:  sensor_type = "Sony CCD sensor + ADI 9804"; break;
-			case 0x30:  sensor_type = "Sharp CCD sensor + TDA8787"; break;
-			case 0x3E:  sensor_type = "Sharp CCD sensor + Exas 98L59"; break;
-			case 0x3F:  sensor_type = "Sharp CCD sensor + ADI 9804"; break;
-			case 0x40:  sensor_type = "UPA 1021 sensor"; break;
-			case 0x100: sensor_type = "VGA sensor"; break;
-			case 0x101: sensor_type = "PAL MR sensor"; break;
-			default:    sensor_type = "unknown type of sensor"; break;
+			ret = pwc_get_cmos_sensor(pdev, &i);
+			if (ret >= 0)
+			{
+				switch(i) {
+				case 0x00:  sensor_type = "Hyundai CMOS sensor"; break;
+				case 0x20:  sensor_type = "Sony CCD sensor + TDA8787"; break;
+				case 0x2E:  sensor_type = "Sony CCD sensor + Exas 98L59"; break;
+				case 0x2F:  sensor_type = "Sony CCD sensor + ADI 9804"; break;
+				case 0x30:  sensor_type = "Sharp CCD sensor + TDA8787"; break;
+				case 0x3E:  sensor_type = "Sharp CCD sensor + Exas 98L59"; break;
+				case 0x3F:  sensor_type = "Sharp CCD sensor + ADI 9804"; break;
+				case 0x40:  sensor_type = "UPA 1021 sensor"; break;
+				case 0x100: sensor_type = "VGA sensor"; break;
+				case 0x101: sensor_type = "PAL MR sensor"; break;
+				default:    sensor_type = "unknown type of sensor"; break;
+				}
 			}
 			if (sensor_type != NULL)
 				Info("This %s camera is equipped with a %s (%d).\n", pdev->vdev->name, sensor_type, i);
@@ -1001,11 +1028,7 @@
 	if (pwc_set_leds(pdev, led_on, led_off) < 0)
 		Info("Failed to set LED on/off time.\n");
 
-	/* Find our decompressor, if any */
-	pdev->decompressor = pwc_find_decompressor(pdev->type);
-#if PWC_DEBUG	
-	Debug("Found decompressor for %d at 0x%p\n", pdev->type, pdev->decompressor);
-#endif
+	pwc_construct(pdev); /* set min/max sizes correct */
 
 	/* So far, so good. Allocate memory. */
 	i = pwc_allocate_buffers(pdev);
@@ -1022,24 +1045,21 @@
 	pdev->vframe_count = 0;
 	pdev->vframes_dumped = 0;
 	pdev->vframes_error = 0;
-	pdev->vpalette = default_palette;
-#if PWC_DEBUG	
+	pdev->visoc_errors = 0;
+	pdev->error_status = 0;
+#if PWC_DEBUG
 	pdev->sequence = 0;
 #endif
+	pwc_construct(pdev); /* set min/max sizes correct */
 
 	/* Set some defaults */
 	pdev->vsnapshot = 0;
-	if (pdev->type == 730 || pdev->type == 740 || pdev->type == 750)
-		pdev->vsize = PSZ_QSIF;
-	else
-		pdev->vsize = PSZ_QCIF;
-	pdev->vframes = 10;
 
-	/* Start iso pipe for video; first try user-supplied size/fps, if
-	   that fails try QCIF/10 or QSIF/10 (a reasonable default), 
-	   then give up 
+	/* Start iso pipe for video; first try the last used video size
+	   (or the default one); if that fails try QCIF/10 or QSIF/10;
+	   it that fails too, give up.
 	 */
-	i = pwc_set_video_mode(pdev, pwc_image_sizes[default_size].x, pwc_image_sizes[default_size].y, default_fps, pdev->vcompression, 0);
+	i = pwc_set_video_mode(pdev, pwc_image_sizes[pdev->vsize].x, pwc_image_sizes[pdev->vsize].y, pdev->vframes, pdev->vcompression, 0);
 	if (i)	{
 		Trace(TRACE_OPEN, "First attempt at set_video_mode failed.\n");
 		if (pdev->type == 730 || pdev->type == 740 || pdev->type == 750)
@@ -1061,12 +1081,6 @@
 	}
 
 	pdev->vopen++;
-	/* lock decompressor; this has a small race condition, since we 
-	   could in theory unload pwcx.o between pwc_find_decompressor()
-	   above and this call. I doubt it's ever going to be a problem.
-	 */
-	if (pdev->decompressor != NULL)
-		pdev->decompressor->lock();
 	up(&pdev->modlock);
 	Trace(TRACE_OPEN, "<< video_open() returns 0.\n");
 	return 0;
@@ -1086,55 +1100,63 @@
 
 	/* Dump statistics, but only if a reasonable amount of frames were
 	   processed (to prevent endless log-entries in case of snap-shot
-	   programs) 
+	   programs)
 	 */
 	if (pdev->vframe_count > 20)
 		Info("Closing video device: %d frames received, dumped %d frames, %d frames with errors.\n", pdev->vframe_count, pdev->vframes_dumped, pdev->vframes_error);
 
-	/* Free isoc URBs, stop camera */
+	switch (pdev->type)
+	 {
+	  case 675:
+	  case 680:
+	  case 690:
+	  case 720:
+	  case 730:
+	  case 740:
+	  case 750:
+	    pwc_dec23_exit();	/* Timon & Kiara */
+	    break;
+	  case 645:
+	  case 646:
+	    pwc_dec1_exit();
+	    break;
+	 }
+
 	pwc_isoc_cleanup(pdev);
+	pwc_free_buffers(pdev);
 
-	if (!pdev->unplugged) {
+	/* Turn off LEDS and power down camera, but only when not unplugged */
+	if (pdev->error_status != EPIPE) {
 		/* Turn LEDs off */
 		if (pwc_set_leds(pdev, 0, 0) < 0)
 			Info("Failed to set LED on/off time.\n");
-		/* Power down camera to save energy */
 		if (power_save) {
 			i = pwc_camera_power(pdev, 0);
-			if (i < 0) 
+			if (i < 0)
 				Err("Failed to power down camera (%d)\n", i);
 		}
 	}
-
 	pdev->vopen = 0;
-	if (pdev->decompressor != NULL) {
-		pdev->decompressor->exit();
-		pdev->decompressor->unlock();
-	}
-	pwc_free_buffers(pdev);
-
-	/* wake up _disconnect() routine */
-	if (pdev->unplugged)
-		wake_up(&pdev->remove_ok);
 	Trace(TRACE_OPEN, "<< video_close()\n");
 }
 
 /*
  *	FIXME: what about two parallel reads ????
  *      ANSWER: Not supported. You can't open the device more than once,
-                despite what the V4L1 interface says. First, I don't see 
-                the need, second there's no mechanism of alerting the 
+                despite what the V4L1 interface says. First, I don't see
+                the need, second there's no mechanism of alerting the
                 2nd/3rd/... process of events like changing image size.
-                And I don't see the point of blocking that for the 
+                And I don't see the point of blocking that for the
                 2nd/3rd/... process.
                 In multi-threaded environments reading parallel from any
                 device is tricky anyhow.
  */
- 
+
 static long pwc_video_read(struct video_device *vdev, char *buf, unsigned long count, int noblock)
 {
 	struct pwc_device *pdev;
 	DECLARE_WAITQUEUE(wait, current);
+        int bytes_to_read;
 
 	Trace(TRACE_READ, "video_read(0x%p, %p, %ld, %d) called.\n", vdev, buf, count, noblock);
 	if (vdev == NULL)
@@ -1142,17 +1164,20 @@
 	pdev = vdev->priv;
 	if (pdev == NULL)
 		return -EFAULT;
-	if (pdev->unplugged) {
-		Info("pwc_video_read: Device got unplugged (1).\n");
-		return -EPIPE; /* unplugged device! */
-	}
+	if (pdev->error_status)
+		return -pdev->error_status; /* Something happened, report what. */
 
 	/* In case we're doing partial reads, we don't have to wait for a frame */
 	if (pdev->image_read_pos == 0) {
 		/* Do wait queueing according to the (doc)book */
 		add_wait_queue(&pdev->frameq, &wait);
-	        set_current_state(TASK_INTERRUPTIBLE);
 		while (pdev->full_frames == NULL) {
+			/* Check for unplugged/etc. here */
+			if (pdev->error_status) {
+				remove_wait_queue(&pdev->frameq, &wait);
+				set_current_state(TASK_RUNNING);
+				return -pdev->error_status ;
+			}
 	                if (noblock) {
 	                	remove_wait_queue(&pdev->frameq, &wait);
 	                	set_current_state(TASK_RUNNING);
@@ -1168,20 +1193,25 @@
 		}
 		remove_wait_queue(&pdev->frameq, &wait);
 		set_current_state(TASK_RUNNING);
-	                                                                                                                                                                                
-		/* Decompress [, convert] and release frame */
+
+		/* Decompress and release frame */
 		if (pwc_handle_frame(pdev))
 			return -EFAULT;
 	}
 
 	Trace(TRACE_READ, "Copying data to user space.\n");
+	if (pdev->vpalette == VIDEO_PALETTE_RAW)
+		bytes_to_read = pdev->frame_size;
+	else
+ 		bytes_to_read = pdev->view.size;
+
 	/* copy bytes to user space; we allow for partial reads */
-	if (count + pdev->image_read_pos > pdev->view.size)
-		count = pdev->view.size - pdev->image_read_pos;
+	if (count + pdev->image_read_pos > bytes_to_read)
+		count = bytes_to_read - pdev->image_read_pos;
 	if (copy_to_user(buf, pdev->image_ptr[pdev->fill_image] + pdev->image_read_pos, count))
 		return -EFAULT;
 	pdev->image_read_pos += count;
-	if (pdev->image_read_pos >= pdev->view.size) { /* All data has been read */
+	if (pdev->image_read_pos >= bytes_to_read) { /* All data has been read */
 		pdev->image_read_pos = 0;
 		pwc_next_image(pdev);
 	}
@@ -1191,35 +1221,33 @@
 
 static long pwc_video_write(struct video_device *vdev, const char *buf, unsigned long count, int noblock)
 {
-	return -EINVAL;   
+	return -EINVAL;
 }
 
 static unsigned int pwc_video_poll(struct video_device *vdev, struct file *file, poll_table *wait)
 {
 	struct pwc_device *pdev;
-	
+
 	if (vdev == NULL)
 		return -EFAULT;
 	pdev = vdev->priv;
 	if (pdev == NULL)
 		return -EFAULT;
-	
+
 	poll_wait(file, &pdev->frameq, wait);
-	if (pdev->unplugged) {
-		Info("pwc_video_poll: Device got unplugged.\n");
+	if (pdev->error_status)
 		return POLLERR;
-	}		
 	if (pdev->full_frames != NULL) /* we have frames waiting */
 		return (POLLIN | POLLRDNORM);
 
 	return 0;
 }
-        
+
 static int pwc_video_ioctl(struct video_device *vdev, unsigned int cmd, void *arg)
 {
 	struct pwc_device *pdev;
 	DECLARE_WAITQUEUE(wait, current);
-	
+
 	if (vdev == NULL)
 		return -EFAULT;
 	pdev = vdev->priv;
@@ -1228,7 +1256,7 @@
 
 	switch (cmd) {
 		/* Query cabapilities */
-		case VIDIOCGCAP: 
+		case VIDIOCGCAP:
 		{
 			struct video_capability caps;
 
@@ -1267,7 +1295,7 @@
 		}
 
 		case VIDIOCSCHAN:
-		{	
+		{
 			/* The spec says the argument is an integer, but
 			   the bttv driver uses a video_channel arg, which
 			   makes sense becasue it also has the norm flag.
@@ -1290,8 +1318,6 @@
 			struct video_picture p;
 			int val;
 
-			p.colour = 0x8000;
-			p.hue = 0x8000;
 			val = pwc_get_brightness(pdev);
 			if (val >= 0)
 				p.brightness = val;
@@ -1321,7 +1347,7 @@
 				return -EFAULT;
 			break;
 		}
-		
+
 		case VIDIOCSPICT:
 		{
 			struct video_picture p;
@@ -1341,9 +1367,17 @@
 			pwc_set_contrast(pdev, p.contrast);
 			pwc_set_gamma(pdev, p.whiteness);
 			pwc_set_saturation(pdev, p.colour);
-			if (p.palette && p.palette != pdev->vpalette) {
-				if (pwc_set_palette(pdev, p.palette) < 0)
-					return -EINVAL;
+                        if (p.palette && p.palette != pdev->vpalette) {
+				switch (p.palette) {
+					case VIDEO_PALETTE_YUV420P:
+					case VIDEO_PALETTE_RAW:
+						pdev->vpalette = p.palette;
+						return pwc_try_video_mode(pdev, pdev->image.x, pdev->image.y, pdev->vframes, pdev->vcompression, pdev->vsnapshot);
+						break;
+					default:
+						return -EINVAL;
+						break;
+				}
 			}
 			break;
 		}
@@ -1390,7 +1424,7 @@
 		case VIDIOCGFBUF:
 		{
 			struct video_buffer vb;
-			
+
 			vb.base = NULL;
 			vb.height = 0;
 			vb.width = 0;
@@ -1436,14 +1470,23 @@
 			   various palettes... The driver doesn't support
 			   such small images, so I'm working around it.
 			 */
-			if (vm.format && vm.format != pdev->vpalette)
-				if (pwc_set_palette(pdev, vm.format) < 0)
-					return -EINVAL;
-			 
+			if (vm.format)
+			{
+				switch (vm.format)
+				{
+					case VIDEO_PALETTE_YUV420P:
+					case VIDEO_PALETTE_RAW:
+						break;
+					default:
+						return -EINVAL;
+						break;
+				}
+			}
+
 			if ((vm.width != pdev->view.x || vm.height != pdev->view.y) &&
 			    (vm.width >= pdev->view_min.x && vm.height >= pdev->view_min.y)) {
 				int ret;
-				
+
 				Trace(TRACE_OPEN, "VIDIOCMCAPTURE: changing size to please xawtv :-(.\n");
 				ret = pwc_try_video_mode(pdev, vm.width, vm.height, pdev->vframes, pdev->vcompression, pdev->vsnapshot);
 				if (ret)
@@ -1458,7 +1501,7 @@
 			/* Okay, we're done here. In the SYNC call we wait until a 
 			   frame comes available, then expand image into the given 
 			   buffer.
-			   In contrast to the CPiA cam the Philips cams deliver a 
+			   In contrast to the CPiA cam the Philips cams deliver a
 			   constant stream, almost like a grabber card. Also,
 			   we have separate buffers for the rawdata and the image,
 			   meaning we can nearly always expand into the requested buffer.
@@ -1498,18 +1541,18 @@
 				return -EINVAL;
 
 			/* Add ourselves to the frame wait-queue.
-			   
+			   In the loop, check for error conditions and signals.
+
 			   FIXME: needs auditing for safety.
-			   QUSTION: In what respect? I think that using the
-			            frameq is safe now.
+			   QUESTION: In what respect? I think that using the
+			             frameq is safe now.
 			 */
 			add_wait_queue(&pdev->frameq, &wait);
-		        set_current_state(TASK_INTERRUPTIBLE);
 			while (pdev->full_frames == NULL) {
-				if (pdev->unplugged) {
+				if (pdev->error_status) {
 					remove_wait_queue(&pdev->frameq, &wait);
 					set_current_state(TASK_RUNNING);
-					return -ENODEV;
+					return -pdev->error_status;
 				}
 			
 	                	if (signal_pending(current)) {
@@ -1517,8 +1560,8 @@
 		                	set_current_state(TASK_RUNNING);
 		                	return -ERESTARTSYS;
 	        	        }
-		                set_current_state(TASK_INTERRUPTIBLE);
 	                	schedule();
+		                set_current_state(TASK_INTERRUPTIBLE);
 			}
 			remove_wait_queue(&pdev->frameq, &wait);
 			set_current_state(TASK_RUNNING);
@@ -1623,14 +1666,12 @@
 static void *usb_pwc_probe(struct usb_device *udev, unsigned int ifnum, const struct usb_device_id *id)
 {
 	struct pwc_device *pdev = NULL;
-	struct video_device *vdev;
 	int vendor_id, product_id, type_id;
 	int i, hint;
+	int features = 0;
 	int video_nr = -1; /* default: use next available device */
 	char serial_number[30], *name;
 
-	free_mem_leak();
-	
 	/* Check if we can handle this device */
 	Trace(TRACE_PROBE, "probe() called [%04X %04X], if %d\n", udev->descriptor.idVendor, udev->descriptor.idProduct, ifnum);
 
@@ -1677,12 +1718,12 @@
 			type_id = 690;
 			break;
 		case 0x0310:
-			Info("Philips PCVC730K (ToUCam Fun) USB webcam detected.\n");
+			Info("Philips PCVC730K (ToUCam Fun)/PCVC830 (ToUCam II) USB webcam detected.\n");
 			name = "Philips 730 webcam";
 			type_id = 730;
 			break;
 		case 0x0311:
-			Info("Philips PCVC740K (ToUCam Pro) USB webcam detected.\n");
+			Info("Philips PCVC740K (ToUCam Pro)/PCVC840 (ToUCam II) USB webcam detected.\n");
 			name = "Philips 740 webcam";
 			type_id = 740;
 			break;
@@ -1691,6 +1732,11 @@
 			name = "Philips 750 webcam";
 			type_id = 750;
 			break;
+		case 0x0313:
+			Info("Philips PCVC720K/40 (ToUCam XS) USB webcam detected.\n");
+			name = "Philips 720K/40 webcam";
+			type_id = 720;
+			break;
 		default:
 			return NULL;
 			break;
@@ -1713,12 +1759,12 @@
 		case 0x08b0:
 			Info("Logitech QuickCam Pro 3000 USB webcam detected.\n");
 			name = "Logitech QuickCam Pro 3000";
-			type_id = 730;
+			type_id = 740; /* CCD sensor */
 			break;
 		case 0x08b1:
-			Info("Logitech QuickCam for Notebook Pro USB webcam detected.\n");
+			Info("Logitech QuickCam Notebook Pro USB webcam detected.\n");
 			name = "Logitech QuickCam Notebook Pro";
-			type_id = 740; /* ?? unknown sensor */
+			type_id = 740; /* CCD sensor */
 			break;
 		case 0x08b2:
 			Info("Logitech QuickCam 4000 Pro USB webcam detected.\n");
@@ -1730,6 +1776,24 @@
 			name = "Logitech QuickCam Zoom";
 			type_id = 740; /* CCD sensor */
 			break;
+		case 0x08B4:
+			Info("Logitech QuickCam Zoom (new model) USB webcam detected.\n");
+			name = "Logitech QuickCam Zoom";
+			type_id = 740; /* CCD sensor */
+			break;
+		case 0x08b5:
+			Info("Logitech QuickCam Orbit/Sphere USB webcam detected.\n");
+			name = "Logitech QuickCam Orbit";
+			type_id = 740; /* CCD sensor */
+			features |= FEATURE_MOTOR_PANTILT;
+			break;
+		case 0x08b6:
+		case 0x08b7:
+		case 0x08b8:
+			Info("Logitech QuickCam detected (reserved ID).\n");
+			name = "Logitech QuickCam (res.)";
+			type_id = 730; /* Assuming CMOS */
+			break;
         	default:
         		return NULL;
         		break;
@@ -1763,22 +1827,41 @@
 			name = "Creative Labs Webcam 5";
 			type_id = 730;
 			break;
+		case 0x4011:
+			Info("Creative Labs Webcam Pro Ex detected.\n");
+			name = "Creative Labs Webcam Pro Ex";
+			type_id = 740;
+			break;
 		default:
 			return NULL;
 			break;
 		}
 	}
-	else if (vendor_id == 0x04cc) { 
+	else if (vendor_id == 0x04cc) {
 		switch(product_id) {
 		case 0x8116:
 			Info("Sotec Afina Eye USB webcam detected.\n");
 			name = "Sotec Afina Eye";
 			type_id = 730;
-			break;  
+			break;
+		default:
+			return NULL;
+			break;
+		}
+	}
+	else if (vendor_id == 0x06be) {
+		switch(product_id) {
+		case 0x8116:
+			/* This is essentially the same cam as the Sotec Afina Eye */
+			Info("AME Co. Afina Eye USB webcam detected.\n");
+			name = "AME Co. Afina Eye";
+			type_id = 750;
+			break;
 		default:
 			return NULL;
 			break;
 		}
+	
 	}
 	else if (vendor_id == 0x0d81) {
 		switch(product_id) {
@@ -1815,27 +1898,40 @@
 	}
 	memset(pdev, 0, sizeof(struct pwc_device));
 	pdev->type = type_id;
-	pwc_construct(pdev);
+	pdev->vsize = default_size;
+	pdev->vframes = default_fps;
+	strcpy(pdev->serial, serial_number);
+	pdev->features = features;
+	if (vendor_id == 0x046D && product_id == 0x08B5)
+	{
+		/* Logitech QuickCam Orbit
+	           The ranges have been determined experimentally; they may differ from cam to cam.
+	           Also, the exact ranges left-right and up-down are different for my cam
+	          */
+		pdev->angle_range.pan_min  = -7000;
+		pdev->angle_range.pan_max  =  7000;
+		pdev->angle_range.tilt_min = -3000;
+		pdev->angle_range.tilt_max =  2500;
+	}
 
 	init_MUTEX(&pdev->modlock);
 	pdev->ptrlock = SPIN_LOCK_UNLOCKED;
 
 	pdev->udev = udev;
 	init_waitqueue_head(&pdev->frameq);
-	init_waitqueue_head(&pdev->remove_ok);
 	pdev->vcompression = pwc_preferred_compression;
 
-	/* Now hook it up to the video subsystem */
-	vdev = kmalloc(sizeof(struct video_device), GFP_KERNEL);
-	if (vdev == NULL) {
-		Err("Oops, could not allocate memory for video_device.\n");
+	pdev->vdev = kmalloc(sizeof(struct video_device), GFP_KERNEL);
+	if (pdev->vdev == 0)
+	{
+		Err("Err, cannot allocate video_device struture. Failing probe.");
+		kfree(pdev);
 		return NULL;
 	}
-	memcpy(vdev, &pwc_template, sizeof(pwc_template));
-	strcpy(vdev->name, name);
-	SET_MODULE_OWNER(vdev);
-	pdev->vdev = vdev;
-	vdev->priv = pdev;
+	memcpy(pdev->vdev, &pwc_template, sizeof(pwc_template));
+	strcpy(pdev->vdev->name, name);
+	SET_MODULE_OWNER(pdev->vdev);
+	pdev->vdev->priv = pdev;
 
 	pdev->release = udev->descriptor.bcdDevice;
 	Trace(TRACE_PROBE, "Release: %04x\n", pdev->release);
@@ -1854,15 +1950,18 @@
 		}
 	}
 
-	i = video_register_device(vdev, VFL_TYPE_GRABBER, video_nr);
+//	pdev->vdev->release = video_device_release;
+	i = video_register_device(pdev->vdev, VFL_TYPE_GRABBER, video_nr);
 	if (i < 0) {
 		Err("Failed to register as video device (%d).\n", i);
+		kfree(pdev->vdev); /* Drip... drip... drip... */
+		kfree(pdev); /* Oops, no memory leaks please */
 		return NULL;
 	}
 	else {
-		Trace(TRACE_PROBE, "Registered video struct at 0x%p.\n", vdev);
-		Info("Registered as /dev/video%d.\n", vdev->minor & 0x3F);
+		Info("Registered as /dev/video%d.\n", pdev->vdev->minor & 0x3F);
 	}
+
 	/* occupy slot */
 	if (hint < MAX_DEV_HINTS) 
 		device_hint[hint].pdev = pdev;
@@ -1876,75 +1975,51 @@
 {
 	struct pwc_device *pdev;
 	int hint;
-	DECLARE_WAITQUEUE(wait, current);
 
 	lock_kernel();
-	free_mem_leak();
-
 	pdev = (struct pwc_device *)ptr;
 	if (pdev == NULL) {
 		Err("pwc_disconnect() Called without private pointer.\n");
+		unlock_kernel();
 		return;
 	}
 	if (pdev->udev == NULL) {
 		Err("pwc_disconnect() already called for %p\n", pdev);
+		unlock_kernel();
 		return;
 	}
 	if (pdev->udev != udev) {
 		Err("pwc_disconnect() Woops: pointer mismatch udev/pdev.\n");
+		unlock_kernel();
 		return;
 	}
-#ifdef PWC_MAGIC	
-	if (pdev->magic != PWC_MAGIC) {
-		Err("pwc_disconnect() Magic number failed. Consult your scrolls and try again.\n");
-		return;
-	}
-#endif	
-	
-	pdev->unplugged = 1;
-	if (pdev->vdev != NULL) {
-		add_wait_queue(&pdev->remove_ok, &wait);
-		set_current_state(TASK_UNINTERRUPTIBLE);
-		Trace(TRACE_PROBE, "Unregistering video device.\n");
-		video_unregister_device(pdev->vdev); 
-		if (pdev->vopen) {
-			Info("Disconnected while device/video is open!\n");
-			
-			/* Wake up any processes that might be waiting for
-			   a frame, let them return an error condition
-			 */
-			wake_up(&pdev->frameq);
-			
-			/* Wait until we get a 'go' from _close(). This used
-			   to have a gigantic race condition, since we kfree()
-			   stuff here, but we have to wait until close() 
-			   is finished. 
-			 */
-			   
-			Trace(TRACE_PROBE, "Sleeping on remove_ok.\n");
-			/* ... wait ... */
-			schedule();
-			Trace(TRACE_PROBE, "Done sleeping.\n");
-			set_mem_leak(pdev->vdev);
-			pdev->vdev = NULL;
-		}
-		else {
-			/* Normal disconnect; remove from available devices */
-			kfree(pdev->vdev);
-			pdev->vdev = NULL;
-		}
-		remove_wait_queue(&pdev->remove_ok, &wait);
-		set_current_state(TASK_RUNNING);
-	}
 
+	/* We got unplugged; this is signalled by an EPIPE error code */
+	if (pdev->vopen) {
+		Info("Disconnected while webcam is in use!\n");
+		pdev->error_status = EPIPE;
+	}
+
+	/* Alert waiting processes */
+	wake_up_interruptible(&pdev->frameq);
+	/* Wait until device is closed */
+	while (pdev->vopen)
+		schedule();
+	/* Device is now closed, so we can safely unregister it */
+	Trace(TRACE_PROBE, "Unregistering video device in disconnect().\n");
+	video_unregister_device(pdev->vdev);
+
+	/* Free memory (don't set pdev to 0 just yet) */
+	kfree(pdev->vdev);
+	kfree(pdev);
+
+disconnect_out:
 	/* search device_hint[] table if we occupy a slot, by any chance */
 	for (hint = 0; hint < MAX_DEV_HINTS; hint++)
 		if (device_hint[hint].pdev == pdev)
 			device_hint[hint].pdev = NULL;
 
-	pdev->udev = NULL;
 	unlock_kernel();
-	kfree(pdev);
 }
 
 
@@ -1952,7 +2027,7 @@
 static int pwc_atoi(const char *s)
 {
 	int k = 0;
-	
+
 	k = 0;
 	while (*s != '\0' && *s >= '0' && *s <= '9') {
 		k = 10 * k + (*s - '0');
@@ -1973,7 +2048,7 @@
 static int trace = -1;
 static int compression = -1;
 static int leds[2] = { -1, -1 };
-static char *dev_hint[10] = { };
+static char *dev_hint[MAX_DEV_HINTS] = { };
 
 MODULE_PARM(size, "s");
 MODULE_PARM_DESC(size, "Initial image size. One of sqcif, qsif, qcif, sif, cif, vga");
@@ -1991,11 +2066,11 @@
 MODULE_PARM_DESC(compression, "Preferred compression quality. Range 0 (uncompressed) to 3 (high compression)");
 MODULE_PARM(leds, "2i");
 MODULE_PARM_DESC(leds, "LED on,off time in milliseconds");
-MODULE_PARM(dev_hint, "0-10s");
+MODULE_PARM(dev_hint, "0-20s");
 MODULE_PARM_DESC(dev_hint, "Device node hints");
 
-MODULE_DESCRIPTION("Philips USB & OEM webcam driver");
-MODULE_AUTHOR("Nemosoft Unv. <nemosoft@smcc.demon.nl>");
+MODULE_DESCRIPTION("Philips & OEM USB webcam driver");
+MODULE_AUTHOR("Nemosoft Unv. <webcam@smcc.demon.nl>");
 MODULE_LICENSE("GPL");
 
 static int __init usb_pwc_init(void)
@@ -2003,9 +2078,10 @@
 	int i, sz;
 	char *sizenames[PSZ_MAX] = { "sqcif", "qsif", "qcif", "sif", "cif", "vga" };
 
-	Info("Philips PCA645/646 + PCVC675/680/690 + PCVC730/740/750 webcam module version " PWC_VERSION " loaded.\n");
+	Info("Philips webcam module version " PWC_VERSION " loaded.\n");
+	Info("Supports Philips PCA645/646, PCVC675/680/690, PCVC720[40]/730/740/750 & PCVC830/840.\n");
 	Info("Also supports the Askey VC010, various Logitech Quickcams, Samsung MPC-C10 and MPC-C30,\n");
-	Info("the Creative WebCam 5, SOTEC Afina Eye and Visionite VCS-UC300 and VCS-UM100.\n");
+	Info("the Creative WebCam 5 & Pro Ex, SOTEC Afina Eye and Visionite VCS-UC300 and VCS-UM100.\n");
 
 	if (fps) {
 		if (fps < 4 || fps > 30) {
@@ -2015,7 +2091,7 @@
 		default_fps = fps;
 		Info("Default framerate set to %d.\n", default_fps);
 	}
-	
+
 	if (size) {
 		/* string; try matching with array */
 		for (sz = 0; sz < PSZ_MAX; sz++) {
@@ -2065,12 +2141,12 @@
 	if (leds[1] >= 0)
 		led_off = leds[1];
 
-	/* Big device node whoopla. Basicly, it allows you to assign a 
-	   device node (/dev/videoX) to a camera, based on its type 
+	/* Big device node whoopla. Basicly, it allows you to assign a
+	   device node (/dev/videoX) to a camera, based on its type
 	   & serial number. The format is [type[.serialnumber]:]node.
 
-           Any camera that isn't matched by these rules gets the next 
-           available free device node.
+	   Any camera that isn't matched by these rules gets the next
+	   available free device node.
 	 */
 	for (i = 0; i < MAX_DEV_HINTS; i++) {
 		char *s, *colon, *dot;
@@ -2133,14 +2209,12 @@
 			device_hint[i].type = 0; /* not filled */
 	} /* ..for MAX_DEV_HINTS */
 
-	init_MUTEX(&mem_lock);
  	Trace(TRACE_PROBE, "Registering driver at address 0x%p.\n", &pwc_driver);
 	return usb_register(&pwc_driver);
 }
 
 static void __exit usb_pwc_exit(void)
 {
-	free_mem_leak();
 	Trace(TRACE_MODULE, "Deregistering driver.\n");
 	usb_deregister(&pwc_driver);
 	Info("Philips webcam module removed.\n");
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-ioctl.h linux-2.4.x/drivers/usb/pwc-ioctl.h
--- linux-2.4.x.orig/drivers/usb/pwc-ioctl.h	2006-03-04 10:10:47.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-ioctl.h	2006-07-03 11:13:17.000000000 +0200
@@ -1,8 +1,15 @@
 #ifndef PWC_IOCTL_H
 #define PWC_IOCTL_H
 
-/* (C) 2001-2002 Nemosoft Unv.    webcam@smcc.demon.nl
-   
+/* (C) 2001-2004 Nemosoft Unv.
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
@@ -18,19 +25,24 @@
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
-/*         This is pwc-ioctl.h belonging to PWC 8.10                        */
+/* This is pwc-ioctl.h belonging to PWC 8.12.1
+   It contains structures and defines to communicate from user space
+   directly to the driver.
+ */
 
-/* 
+/*
    Changes
-   2001/08/03  Alvarado   Added ioctl constants to access methods for 
+   2001/08/03  Alvarado   Added ioctl constants to access methods for
                           changing white balance and red/blue gains
    2002/12/15  G. H. Fernandez-Toribio   VIDIOCGREALSIZE
+   2003/12/13  Nemosft Unv. Some modifications to make interfacing to
+               PWCX easier
  */
 
 /* These are private ioctl() commands, specific for the Philips webcams.
    They contain functions not found in other webcams, and settings not
-   specified in the Video4Linux API. 
-   
+   specified in the Video4Linux API.
+
    The #define names are built up like follows:
    VIDIOC		VIDeo IOCtl prefix
          PWC		Philps WebCam
@@ -40,13 +52,21 @@
  */
 
 
+ /* Enumeration of image sizes */
+#define PSZ_SQCIF	0x00
+#define PSZ_QSIF	0x01
+#define PSZ_QCIF	0x02
+#define PSZ_SIF		0x03
+#define PSZ_CIF		0x04
+#define PSZ_VGA		0x05
+#define PSZ_MAX		6
 
 
 /* The frame rate is encoded in the video_window.flags parameter using
    the upper 16 bits, since some flags are defined nowadays. The following
    defines provide a mask and shift to filter out this value.
-   
-   In 'Snapshot' mode the camera freezes its automatic exposure and colour 
+
+   In 'Snapshot' mode the camera freezes its automatic exposure and colour
    balance controls.
  */
 #define PWC_FPS_SHIFT		16
@@ -55,14 +75,26 @@
 #define PWC_FPS_SNAPSHOT	0x00400000
 
 
+/* structure for transfering x & y coordinates */
+struct pwc_coord
+{
+	int x, y;		/* guess what */
+	int size;		/* size, or offset */
+};
+
 
+/* Used with VIDIOCPWCPROBE */
 struct pwc_probe
 {
 	char name[32];
 	int type;
 };
 
-
+struct pwc_serial
+{
+	char serial[30];	/* String with serial number. Contains terminating 0 */
+};
+	
 /* pwc_whitebalance.mode values */
 #define PWC_WB_INDOOR		0
 #define PWC_WB_OUTDOOR		1
@@ -78,7 +110,6 @@
    otherwise undefined.
    'read_red' and 'read_blue' are read-only.
 */   
-   
 struct pwc_whitebalance
 {
 	int mode;
@@ -112,6 +143,63 @@
 	int height;
 };
 
+/* Defines and structures for Motorized Pan & Tilt */
+#define PWC_MPT_PAN		0x01
+#define PWC_MPT_TILT		0x02
+#define PWC_MPT_TIMEOUT		0x04 /* for status */
+
+/* Set angles; when absolute != 0, the angle is absolute and the 
+   driver calculates the relative offset for you. This can only
+   be used with VIDIOCPWCSANGLE; VIDIOCPWCGANGLE always returns
+   absolute angles.
+ */   
+struct pwc_mpt_angles
+{
+	int absolute;		/* write-only */
+	int pan;		/* degrees * 100 */
+	int tilt;		/* degress * 100 */
+};
+
+/* Range of angles of the camera, both horizontally and vertically.
+ */
+struct pwc_mpt_range
+{
+	int pan_min, pan_max;		/* degrees * 100 */
+	int tilt_min, tilt_max;
+};
+
+struct pwc_mpt_status
+{
+	int status;
+	int time_pan;
+	int time_tilt;
+};
+
+
+/* This is used for out-of-kernel decompression. With it, you can get
+   all the necessary information to initialize and use the decompressor
+   routines in standalone applications.
+ */   
+struct pwc_video_command
+{
+	int type;		/* camera type (645, 675, 730, etc.) */
+	int release;		/* release number */
+
+        int size;		/* one of PSZ_* */
+        int alternate;
+	int command_len;	/* length of USB video command */
+	unsigned char command_buf[13];	/* Actual USB video command */
+	int bandlength;		/* >0 = compressed */
+	int frame_size;		/* Size of one (un)compressed frame */
+};
+
+/* Flags for PWCX subroutines. Not all modules honour all flags. */
+#define PWCX_FLAG_PLANAR	0x0001
+#define PWCX_FLAG_BAYER		0x0008
+
+
+/* IOCTL definitions */
+
  /* Restore user settings */
 #define VIDIOCPWCRUSER		_IO('v', 192)
  /* Save user settings */
@@ -132,16 +220,19 @@
 #define VIDIOCPWCGCQUAL		_IOR('v', 195, int)
 
 
+/* Retrieve serial number of camera */
+#define VIDIOCPWCGSERIAL	_IOR('v', 198, struct pwc_serial)
+
  /* This is a probe function; since so many devices are supported, it
     becomes difficult to include all the names in programs that want to
     check for the enhanced Philips stuff. So in stead, try this PROBE;
-    it returns a structure with the original name, and the corresponding 
+    it returns a structure with the original name, and the corresponding
     Philips type.
     To use, fill the structure with zeroes, call PROBE and if that succeeds,
     compare the name with that returned from VIDIOCGCAP; they should be the
     same. If so, you can be assured it is a Philips (OEM) cam and the type
     is valid.
- */    
+ */
 #define VIDIOCPWCPROBE		_IOR('v', 199, struct pwc_probe)
 
  /* Set AGC (Automatic Gain Control); int < 0 = auto, 0..65535 = fixed */
@@ -181,5 +272,21 @@
 
  /* Real image size as used by the camera; tells you whether or not there's a gray border around the image */
 #define VIDIOCPWCGREALSIZE	_IOR('v', 210, struct pwc_imagesize)
- 
+
+ /* Motorized pan & tilt functions */ 
+#define VIDIOCPWCMPTRESET	_IOW('v', 211, int)
+#define VIDIOCPWCMPTGRANGE	_IOR('v', 211, struct pwc_mpt_range)
+#define VIDIOCPWCMPTSANGLE	_IOW('v', 212, struct pwc_mpt_angles)
+#define VIDIOCPWCMPTGANGLE	_IOR('v', 212, struct pwc_mpt_angles)
+#define VIDIOCPWCMPTSTATUS	_IOR('v', 213, struct pwc_mpt_status)
+
+ /* Get the USB set-video command; needed for initializing libpwcx */
+#define VIDIOCPWCGVIDCMD	_IOR('v', 215, struct pwc_video_command)
+struct pwc_table_init_buffer {
+   int len;
+   char *buffer;
+
+};
+#define VIDIOCPWCGVIDTABLE	_IOR('v', 216, struct pwc_table_init_buffer)
+
 #endif
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-kiara.c linux-2.4.x/drivers/usb/pwc-kiara.c
--- linux-2.4.x.orig/drivers/usb/pwc-kiara.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-kiara.c	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,842 @@
+/* Linux driver for Philips webcam
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+
+/* This tables contains entries for the 730/740/750 (Kiara) camera, with
+   4 different qualities (no compression, low, medium, high).
+   It lists the bandwidth requirements for said mode by its alternate interface
+   number. An alternate of 0 means that the mode is unavailable.
+
+   There are 6 * 4 * 4 entries:
+     6 different resolutions subqcif, qsif, qcif, sif, cif, vga
+     6 framerates: 5, 10, 15, 20, 25, 30
+     4 compression modi: none, low, medium, high
+
+   When an uncompressed mode is not available, the next available compressed mode
+   will be chosen (unless the decompressor is absent). Sometimes there are only
+   1 or 2 compressed modes available; in that case entries are duplicated.
+*/
+
+
+#include "pwc-kiara.h"
+#include "pwc-uncompress.h"
+
+const struct Kiara_table_entry Kiara_table[PSZ_MAX][6][4] =
+{
+   /* SQCIF */
+   {
+      /* 5 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+   },
+   /* QSIF */
+   {
+      /* 5 fps */
+      {
+         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
+         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
+         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
+         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
+      },
+      /* 10 fps */
+      {
+         {2, 291,    0, {0x1C, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x23, 0x01, 0x80}},
+         {1, 192,  630, {0x14, 0xF4, 0x30, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xC0, 0x00, 0x80}},
+         {1, 192,  630, {0x14, 0xF4, 0x30, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xC0, 0x00, 0x80}},
+         {1, 192,  630, {0x14, 0xF4, 0x30, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xC0, 0x00, 0x80}},
+      },
+      /* 15 fps */
+      {
+         {3, 437,    0, {0x1B, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xB5, 0x01, 0x80}},
+         {2, 292,  640, {0x13, 0xF4, 0x30, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x20, 0x24, 0x01, 0x80}},
+         {2, 292,  640, {0x13, 0xF4, 0x30, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x20, 0x24, 0x01, 0x80}},
+         {1, 192,  420, {0x13, 0xF4, 0x30, 0x0D, 0x1B, 0x0C, 0x53, 0x1E, 0x18, 0xC0, 0x00, 0x80}},
+      },
+      /* 20 fps */
+      {
+         {4, 589,    0, {0x1A, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x4D, 0x02, 0x80}},
+         {3, 448,  730, {0x12, 0xF4, 0x30, 0x16, 0xC9, 0x16, 0x01, 0x0E, 0x18, 0xC0, 0x01, 0x80}},
+         {2, 292,  476, {0x12, 0xF4, 0x30, 0x0E, 0xD8, 0x0E, 0x10, 0x19, 0x18, 0x24, 0x01, 0x80}},
+         {1, 192,  312, {0x12, 0xF4, 0x50, 0x09, 0xB3, 0x08, 0xEB, 0x1E, 0x18, 0xC0, 0x00, 0x80}},
+      },
+      /* 25 fps */
+      {
+         {5, 703,    0, {0x19, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xBF, 0x02, 0x80}},
+         {3, 447,  610, {0x11, 0xF4, 0x30, 0x13, 0x0B, 0x12, 0x43, 0x14, 0x28, 0xBF, 0x01, 0x80}},
+         {2, 292,  398, {0x11, 0xF4, 0x50, 0x0C, 0x6C, 0x0B, 0xA4, 0x1E, 0x28, 0x24, 0x01, 0x80}},
+         {1, 193,  262, {0x11, 0xF4, 0x50, 0x08, 0x23, 0x07, 0x5B, 0x1E, 0x28, 0xC1, 0x00, 0x80}},
+      },
+      /* 30 fps */
+      {
+         {8, 874,    0, {0x18, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x6A, 0x03, 0x80}},
+         {5, 704,  730, {0x10, 0xF4, 0x30, 0x16, 0xC9, 0x16, 0x01, 0x0E, 0x28, 0xC0, 0x02, 0x80}},
+         {3, 448,  492, {0x10, 0xF4, 0x30, 0x0F, 0x5D, 0x0E, 0x95, 0x15, 0x28, 0xC0, 0x01, 0x80}},
+         {2, 292,  320, {0x10, 0xF4, 0x50, 0x09, 0xFB, 0x09, 0x33, 0x1E, 0x28, 0x24, 0x01, 0x80}},
+      },
+   },
+   /* QCIF */
+   {
+      /* 5 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+   },
+   /* SIF */
+   {
+      /* 5 fps */
+      {
+         {4, 582,    0, {0x0D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x46, 0x02, 0x80}},
+         {3, 387, 1276, {0x05, 0xF4, 0x30, 0x27, 0xD8, 0x26, 0x48, 0x03, 0x10, 0x83, 0x01, 0x80}},
+         {2, 291,  960, {0x05, 0xF4, 0x30, 0x1D, 0xF2, 0x1C, 0x62, 0x04, 0x10, 0x23, 0x01, 0x80}},
+         {1, 191,  630, {0x05, 0xF4, 0x50, 0x13, 0xA9, 0x12, 0x19, 0x05, 0x18, 0xBF, 0x00, 0x80}},
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {6, 775, 1278, {0x04, 0xF4, 0x30, 0x27, 0xE8, 0x26, 0x58, 0x05, 0x30, 0x07, 0x03, 0x80}},
+         {3, 447,  736, {0x04, 0xF4, 0x30, 0x16, 0xFB, 0x15, 0x6B, 0x05, 0x28, 0xBF, 0x01, 0x80}},
+         {2, 292,  480, {0x04, 0xF4, 0x70, 0x0E, 0xF9, 0x0D, 0x69, 0x09, 0x28, 0x24, 0x01, 0x80}},
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {9, 955, 1050, {0x03, 0xF4, 0x30, 0x20, 0xCF, 0x1F, 0x3F, 0x06, 0x48, 0xBB, 0x03, 0x80}},
+         {4, 592,  650, {0x03, 0xF4, 0x30, 0x14, 0x44, 0x12, 0xB4, 0x08, 0x30, 0x50, 0x02, 0x80}},
+         {3, 448,  492, {0x03, 0xF4, 0x50, 0x0F, 0x52, 0x0D, 0xC2, 0x09, 0x38, 0xC0, 0x01, 0x80}},
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {9, 958,  782, {0x02, 0xF4, 0x30, 0x18, 0x6A, 0x16, 0xDA, 0x0B, 0x58, 0xBE, 0x03, 0x80}},
+         {5, 703,  574, {0x02, 0xF4, 0x50, 0x11, 0xE7, 0x10, 0x57, 0x0B, 0x40, 0xBF, 0x02, 0x80}},
+         {3, 446,  364, {0x02, 0xF4, 0x90, 0x0B, 0x5C, 0x09, 0xCC, 0x0E, 0x38, 0xBE, 0x01, 0x80}},
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {9, 958,  654, {0x01, 0xF4, 0x30, 0x14, 0x66, 0x12, 0xD6, 0x0B, 0x50, 0xBE, 0x03, 0x80}},
+         {6, 776,  530, {0x01, 0xF4, 0x50, 0x10, 0x8C, 0x0E, 0xFC, 0x0C, 0x48, 0x08, 0x03, 0x80}},
+         {4, 592,  404, {0x01, 0xF4, 0x70, 0x0C, 0x96, 0x0B, 0x06, 0x0B, 0x48, 0x50, 0x02, 0x80}},
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {9, 957,  526, {0x00, 0xF4, 0x50, 0x10, 0x68, 0x0E, 0xD8, 0x0D, 0x58, 0xBD, 0x03, 0x80}},
+         {6, 775,  426, {0x00, 0xF4, 0x70, 0x0D, 0x48, 0x0B, 0xB8, 0x0F, 0x50, 0x07, 0x03, 0x80}},
+         {4, 590,  324, {0x00, 0x7A, 0x88, 0x0A, 0x1C, 0x08, 0xB4, 0x0E, 0x50, 0x4E, 0x02, 0x80}},
+      },
+   },
+   /* CIF */
+   {
+      /* 5 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+   },
+   /* VGA */
+   {
+      /* 5 fps */
+      {
+         {0, },
+         {6, 773, 1272, {0x25, 0xF4, 0x30, 0x27, 0xB6, 0x24, 0x96, 0x02, 0x30, 0x05, 0x03, 0x80}},
+         {4, 592,  976, {0x25, 0xF4, 0x50, 0x1E, 0x78, 0x1B, 0x58, 0x03, 0x30, 0x50, 0x02, 0x80}},
+         {3, 448,  738, {0x25, 0xF4, 0x90, 0x17, 0x0C, 0x13, 0xEC, 0x04, 0x30, 0xC0, 0x01, 0x80}},
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {9, 956,  788, {0x24, 0xF4, 0x70, 0x18, 0x9C, 0x15, 0x7C, 0x03, 0x48, 0xBC, 0x03, 0x80}},
+         {6, 776,  640, {0x24, 0xF4, 0xB0, 0x13, 0xFC, 0x11, 0x2C, 0x04, 0x48, 0x08, 0x03, 0x80}},
+         {4, 592,  488, {0x24, 0x7A, 0xE8, 0x0F, 0x3C, 0x0C, 0x6C, 0x06, 0x48, 0x50, 0x02, 0x80}},
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {9, 957,  526, {0x23, 0x7A, 0xE8, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x03, 0x80}},
+         {9, 957,  526, {0x23, 0x7A, 0xE8, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x03, 0x80}},
+         {8, 895,  492, {0x23, 0x7A, 0xE8, 0x0F, 0x5D, 0x0C, 0x8D, 0x06, 0x58, 0x7F, 0x03, 0x80}},
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+   },
+};
+
+
+/*
+ * Rom table for kiara chips
+ *
+ * 32 roms tables (one for each resolution ?)
+ *  2 tables per roms (one for each passes) (Y, and U&V)
+ * 128 bytes per passes
+ */
+
+const unsigned char KiaraRomTable[8192] ={
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x4a,0x02,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0xb6,0x5b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x52,0x92,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x6d,0x49,0x02,0x00,0xb6,0x5b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x52,0x92,0x00,0x00,0x52,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x6d,0x4b,0x02,0x00,0xb6,0xdd,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x36,0x01,0x00,
+0x24,0x49,0x02,0x00,0x6d,0x4b,0x02,0x00,0xb6,0xdd,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x92,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0xb6,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc_kiara.h linux-2.4.x/drivers/usb/pwc_kiara.h
--- linux-2.4.x.orig/drivers/usb/pwc_kiara.h	2006-03-04 10:10:50.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc_kiara.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,270 +0,0 @@
-   /* SQCIF */
-   {
-      /* 5 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-   },
-   /* QSIF */
-   {
-      /* 5 fps */
-      {
-         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
-         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
-         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
-         {1, 146,    0, {0x1D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0x00, 0x80}},
-      },
-      /* 10 fps */
-      {
-         {2, 291,    0, {0x1C, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x23, 0x01, 0x80}},
-         {1, 192,  630, {0x14, 0xF4, 0x30, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xC0, 0x00, 0x80}},
-         {1, 192,  630, {0x14, 0xF4, 0x30, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xC0, 0x00, 0x80}},
-         {1, 192,  630, {0x14, 0xF4, 0x30, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xC0, 0x00, 0x80}},
-      },
-      /* 15 fps */
-      {
-         {3, 437,    0, {0x1B, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xB5, 0x01, 0x80}},
-         {2, 292,  640, {0x13, 0xF4, 0x30, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x20, 0x24, 0x01, 0x80}},
-         {2, 292,  640, {0x13, 0xF4, 0x30, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x20, 0x24, 0x01, 0x80}},
-         {1, 192,  420, {0x13, 0xF4, 0x30, 0x0D, 0x1B, 0x0C, 0x53, 0x1E, 0x18, 0xC0, 0x00, 0x80}},
-      },
-      /* 20 fps */
-      {
-         {4, 589,    0, {0x1A, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x4D, 0x02, 0x80}},
-         {3, 448,  730, {0x12, 0xF4, 0x30, 0x16, 0xC9, 0x16, 0x01, 0x0E, 0x18, 0xC0, 0x01, 0x80}},
-         {2, 292,  476, {0x12, 0xF4, 0x30, 0x0E, 0xD8, 0x0E, 0x10, 0x19, 0x18, 0x24, 0x01, 0x80}},
-         {1, 192,  312, {0x12, 0xF4, 0x50, 0x09, 0xB3, 0x08, 0xEB, 0x1E, 0x18, 0xC0, 0x00, 0x80}},
-      },
-      /* 25 fps */
-      {
-         {5, 703,    0, {0x19, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xBF, 0x02, 0x80}},
-         {3, 447,  610, {0x11, 0xF4, 0x30, 0x13, 0x0B, 0x12, 0x43, 0x14, 0x28, 0xBF, 0x01, 0x80}},
-         {2, 292,  398, {0x11, 0xF4, 0x50, 0x0C, 0x6C, 0x0B, 0xA4, 0x1E, 0x28, 0x24, 0x01, 0x80}},
-         {1, 193,  262, {0x11, 0xF4, 0x50, 0x08, 0x23, 0x07, 0x5B, 0x1E, 0x28, 0xC1, 0x00, 0x80}},
-      },
-      /* 30 fps */
-      {
-         {8, 874,    0, {0x18, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x6A, 0x03, 0x80}},
-         {5, 704,  730, {0x10, 0xF4, 0x30, 0x16, 0xC9, 0x16, 0x01, 0x0E, 0x28, 0xC0, 0x02, 0x80}},
-         {3, 448,  492, {0x10, 0xF4, 0x30, 0x0F, 0x5D, 0x0E, 0x95, 0x15, 0x28, 0xC0, 0x01, 0x80}},
-         {2, 292,  320, {0x10, 0xF4, 0x50, 0x09, 0xFB, 0x09, 0x33, 0x1E, 0x28, 0x24, 0x01, 0x80}},
-      },
-   },
-   /* QCIF */
-   {
-      /* 5 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-   },
-   /* SIF */
-   {
-      /* 5 fps */
-      {
-         {4, 582,    0, {0x0D, 0xF4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x46, 0x02, 0x80}},
-         {3, 387, 1276, {0x05, 0xF4, 0x30, 0x27, 0xD8, 0x26, 0x48, 0x03, 0x10, 0x83, 0x01, 0x80}},
-         {2, 291,  960, {0x05, 0xF4, 0x30, 0x1D, 0xF2, 0x1C, 0x62, 0x04, 0x10, 0x23, 0x01, 0x80}},
-         {1, 191,  630, {0x05, 0xF4, 0x50, 0x13, 0xA9, 0x12, 0x19, 0x05, 0x18, 0xBF, 0x00, 0x80}},
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {6, 775, 1278, {0x04, 0xF4, 0x30, 0x27, 0xE8, 0x26, 0x58, 0x05, 0x30, 0x07, 0x03, 0x80}},
-         {3, 447,  736, {0x04, 0xF4, 0x30, 0x16, 0xFB, 0x15, 0x6B, 0x05, 0x28, 0xBF, 0x01, 0x80}},
-         {2, 292,  480, {0x04, 0xF4, 0x70, 0x0E, 0xF9, 0x0D, 0x69, 0x09, 0x28, 0x24, 0x01, 0x80}},
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {9, 955, 1050, {0x03, 0xF4, 0x30, 0x20, 0xCF, 0x1F, 0x3F, 0x06, 0x48, 0xBB, 0x03, 0x80}},
-         {4, 592,  650, {0x03, 0xF4, 0x30, 0x14, 0x44, 0x12, 0xB4, 0x08, 0x30, 0x50, 0x02, 0x80}},
-         {3, 448,  492, {0x03, 0xF4, 0x50, 0x0F, 0x52, 0x0D, 0xC2, 0x09, 0x38, 0xC0, 0x01, 0x80}},
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {9, 958,  782, {0x02, 0xF4, 0x30, 0x18, 0x6A, 0x16, 0xDA, 0x0B, 0x58, 0xBE, 0x03, 0x80}},
-         {5, 703,  574, {0x02, 0xF4, 0x50, 0x11, 0xE7, 0x10, 0x57, 0x0B, 0x40, 0xBF, 0x02, 0x80}},
-         {3, 446,  364, {0x02, 0xF4, 0x90, 0x0B, 0x5C, 0x09, 0xCC, 0x0E, 0x38, 0xBE, 0x01, 0x80}},
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {9, 958,  654, {0x01, 0xF4, 0x30, 0x14, 0x66, 0x12, 0xD6, 0x0B, 0x50, 0xBE, 0x03, 0x80}},
-         {6, 776,  530, {0x01, 0xF4, 0x50, 0x10, 0x8C, 0x0E, 0xFC, 0x0C, 0x48, 0x08, 0x03, 0x80}},
-         {4, 592,  404, {0x01, 0xF4, 0x70, 0x0C, 0x96, 0x0B, 0x06, 0x0B, 0x48, 0x50, 0x02, 0x80}},
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {9, 957,  526, {0x00, 0xF4, 0x50, 0x10, 0x68, 0x0E, 0xD8, 0x0D, 0x58, 0xBD, 0x03, 0x80}},
-         {6, 775,  426, {0x00, 0xF4, 0x70, 0x0D, 0x48, 0x0B, 0xB8, 0x0F, 0x50, 0x07, 0x03, 0x80}},
-         {4, 590,  324, {0x00, 0x7A, 0x88, 0x0A, 0x1C, 0x08, 0xB4, 0x0E, 0x50, 0x4E, 0x02, 0x80}},
-      },
-   },
-   /* CIF */
-   {
-      /* 5 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-   },
-   /* VGA */
-   {
-      /* 5 fps */
-      {
-         {0, },
-         {6, 773, 1272, {0x25, 0xF4, 0x30, 0x27, 0xB6, 0x24, 0x96, 0x02, 0x30, 0x05, 0x03, 0x80}},
-         {4, 592,  976, {0x25, 0xF4, 0x50, 0x1E, 0x78, 0x1B, 0x58, 0x03, 0x30, 0x50, 0x02, 0x80}},
-         {3, 448,  738, {0x25, 0xF4, 0x90, 0x17, 0x0C, 0x13, 0xEC, 0x04, 0x30, 0xC0, 0x01, 0x80}},
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {9, 956,  788, {0x24, 0xF4, 0x70, 0x18, 0x9C, 0x15, 0x7C, 0x03, 0x48, 0xBC, 0x03, 0x80}},
-         {6, 776,  640, {0x24, 0xF4, 0xB0, 0x13, 0xFC, 0x11, 0x2C, 0x04, 0x48, 0x08, 0x03, 0x80}},
-         {4, 592,  488, {0x24, 0x7A, 0xE8, 0x0F, 0x3C, 0x0C, 0x6C, 0x06, 0x48, 0x50, 0x02, 0x80}},
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {9, 957,  526, {0x23, 0x7A, 0xE8, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x03, 0x80}},
-         {9, 957,  526, {0x23, 0x7A, 0xE8, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x03, 0x80}},
-         {8, 895,  492, {0x23, 0x7A, 0xE8, 0x0F, 0x5D, 0x0C, 0x8D, 0x06, 0x58, 0x7F, 0x03, 0x80}},
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-   },
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-kiara.h linux-2.4.x/drivers/usb/pwc-kiara.h
--- linux-2.4.x.orig/drivers/usb/pwc-kiara.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-kiara.h	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,45 @@
+/* Linux driver for Philips webcam
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/* Entries for the Kiara (730/740/750) camera */
+
+#ifndef PWC_KIARA_H
+#define PWC_KIARA_H
+
+#include "pwc-ioctl.h"
+
+struct Kiara_table_entry
+{
+	char alternate;			/* USB alternate interface */
+	unsigned short packetsize;	/* Normal packet size */
+	unsigned short bandlength;	/* Bandlength when decompressing */
+	unsigned char mode[12];		/* precomputed mode settings for cam */
+};
+
+const extern struct Kiara_table_entry Kiara_table[PSZ_MAX][6][4];
+const extern unsigned char KiaraRomTable[8192];
+
+#endif
+
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-misc.c linux-2.4.x/drivers/usb/pwc-misc.c
--- linux-2.4.x.orig/drivers/usb/pwc-misc.c	2006-03-04 10:10:47.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-misc.c	2006-07-03 11:13:17.000000000 +0200
@@ -1,6 +1,13 @@
 /* Linux driver for Philips webcam 
    Various miscellaneous functions and tables.
-   (C) 1999-2002 Nemosoft Unv. (webcam@smcc.demon.nl)
+   (C) 1999-2003 Nemosoft Unv.
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -15,13 +22,13 @@
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-*/  
+*/
 
 #include <linux/slab.h>
 
 #include "pwc.h"
 
-struct pwc_coord pwc_image_sizes[PSZ_MAX] = 
+struct pwc_coord pwc_image_sizes[PSZ_MAX] =
 {
 	{ 128,  96, 0 },
 	{ 160, 120, 0 },
@@ -36,11 +43,30 @@
 {
 	int i, find;
 
-	/* Make sure we don't go beyond our max size */
-	if (width > pdev->view_max.x || height > pdev->view_max.y)
-		return -1;
+	/* Make sure we don't go beyond our max size.
+           NB: we have different limits for RAW and normal modes. In case
+           you don't have the decompressor loaded or use RAW mode, 
+           the maximum viewable size is smaller.
+        */
+	if (pdev->vpalette == VIDEO_PALETTE_RAW)
+	{
+		if (width > pdev->abs_max.x || height > pdev->abs_max.y)
+		{
+			Debug("VIDEO_PALETTE_RAW: going beyond abs_max.\n");
+                	return -1;
+                }
+	}
+	else
+	{
+		if (width > pdev->view_max.x || height > pdev->view_max.y)
+		{
+			Debug("VIDEO_PALETTE_ not RAW: going beyond view_max.\n");
+			return -1;
+		}
+	}
+
 	/* Find the largest size supported by the camera that fits into the
-	   requested size. 
+	   requested size.
 	 */
 	find = -1;
 	for (i = 0; i < PSZ_MAX; i++) {
@@ -52,7 +78,7 @@
 	return find;
 }
 
-/* initialize variables depending on type */
+/* initialize variables depending on type and decompressor*/
 void pwc_construct(struct pwc_device *pdev)
 {
 	switch(pdev->type) {
@@ -62,6 +88,8 @@
 		pdev->view_min.y =  96;
 		pdev->view_max.x = 352;
 		pdev->view_max.y = 288;
+                pdev->abs_max.x  = 352;
+                pdev->abs_max.y  = 288;
 		pdev->image_mask = 1 << PSZ_SQCIF | 1 << PSZ_QCIF | 1 << PSZ_CIF;
 		pdev->vcinterface = 2;
 		pdev->vendpoint = 4;
@@ -73,14 +101,18 @@
 	case 690:
 		pdev->view_min.x = 128;
 		pdev->view_min.y =  96;
+		/* Anthill bug #38: PWC always reports max size, even without PWCX */
 		pdev->view_max.x = 640;
 		pdev->view_max.y = 480;
 		pdev->image_mask = 1 << PSZ_SQCIF | 1 << PSZ_QSIF | 1 << PSZ_QCIF | 1 << PSZ_SIF | 1 << PSZ_CIF | 1 << PSZ_VGA;
+                pdev->abs_max.x = 640;
+                pdev->abs_max.y = 480;
 		pdev->vcinterface = 3;
 		pdev->vendpoint = 4;
 		pdev->frame_header_size = 0;
 		pdev->frame_trailer_size = 0;
 		break;
+	case 720:
 	case 730:
 	case 740:
 	case 750:
@@ -89,16 +121,20 @@
 		pdev->view_max.x = 640;
 		pdev->view_max.y = 480;
 		pdev->image_mask = 1 << PSZ_QSIF | 1 << PSZ_SIF | 1 << PSZ_VGA;
+                pdev->abs_max.x = 640;
+                pdev->abs_max.y = 480;
 		pdev->vcinterface = 3;
 		pdev->vendpoint = 5;
 		pdev->frame_header_size = TOUCAM_HEADER_SIZE;
 		pdev->frame_trailer_size = TOUCAM_TRAILER_SIZE;
 		break;
 	}
+	Debug("type = %d\n",pdev->type);
+	pdev->vpalette = VIDEO_PALETTE_YUV420P; /* default */
 	pdev->view_min.size = pdev->view_min.x * pdev->view_min.y;
 	pdev->view_max.size = pdev->view_max.x * pdev->view_max.y;
-	/* length of image, in YUV format */
-	pdev->len_per_image = (pdev->view_max.size * 3) / 2;
+	/* length of image, in YUV format; always allocate enough memory. */
+	pdev->len_per_image = (pdev->abs_max.x * pdev->abs_max.y * 3) / 2;
 }
 
 
diff -Nur linux-2.4.x.orig/drivers/usb/pwc_nala.h linux-2.4.x/drivers/usb/pwc_nala.h
--- linux-2.4.x.orig/drivers/usb/pwc_nala.h	2006-03-04 10:10:50.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc_nala.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,66 +0,0 @@
-   /* SQCIF */
-   {
-      {0, 0, {0x04, 0x01, 0x03}},
-      {8, 0, {0x05, 0x01, 0x03}},
-      {7, 0, {0x08, 0x01, 0x03}},
-      {7, 0, {0x0A, 0x01, 0x03}},
-      {6, 0, {0x0C, 0x01, 0x03}},
-      {5, 0, {0x0F, 0x01, 0x03}},
-      {4, 0, {0x14, 0x01, 0x03}},
-      {3, 0, {0x18, 0x01, 0x03}},
-   },
-   /* QSIF */
-   {
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-   },
-   /* QCIF */
-   {
-      {0, 0, {0x04, 0x01, 0x02}},
-      {8, 0, {0x05, 0x01, 0x02}},
-      {7, 0, {0x08, 0x01, 0x02}},
-      {6, 0, {0x0A, 0x01, 0x02}},
-      {5, 0, {0x0C, 0x01, 0x02}},
-      {4, 0, {0x0F, 0x01, 0x02}},
-      {1, 0, {0x14, 0x01, 0x02}},
-      {1, 0, {0x18, 0x01, 0x02}},
-   },
-   /* SIF */
-   {
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-   },
-   /* CIF */
-   {
-      {4, 0, {0x04, 0x01, 0x01}},
-      {7, 1, {0x05, 0x03, 0x01}},
-      {6, 1, {0x08, 0x03, 0x01}},
-      {4, 1, {0x0A, 0x03, 0x01}},
-      {3, 1, {0x0C, 0x03, 0x01}},
-      {2, 1, {0x0F, 0x03, 0x01}},
-      {0},
-      {0},
-   },
-   /* VGA */
-   {  
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-      {0},
-   },
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-nala.h linux-2.4.x/drivers/usb/pwc-nala.h
--- linux-2.4.x.orig/drivers/usb/pwc-nala.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-nala.h	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,66 @@
+   /* SQCIF */
+   {
+      {0, 0, {0x04, 0x01, 0x03}},
+      {8, 0, {0x05, 0x01, 0x03}},
+      {7, 0, {0x08, 0x01, 0x03}},
+      {7, 0, {0x0A, 0x01, 0x03}},
+      {6, 0, {0x0C, 0x01, 0x03}},
+      {5, 0, {0x0F, 0x01, 0x03}},
+      {4, 0, {0x14, 0x01, 0x03}},
+      {3, 0, {0x18, 0x01, 0x03}},
+   },
+   /* QSIF */
+   {
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+   },
+   /* QCIF */
+   {
+      {0, 0, {0x04, 0x01, 0x02}},
+      {8, 0, {0x05, 0x01, 0x02}},
+      {7, 0, {0x08, 0x01, 0x02}},
+      {6, 0, {0x0A, 0x01, 0x02}},
+      {5, 0, {0x0C, 0x01, 0x02}},
+      {4, 0, {0x0F, 0x01, 0x02}},
+      {1, 0, {0x14, 0x01, 0x02}},
+      {1, 0, {0x18, 0x01, 0x02}},
+   },
+   /* SIF */
+   {
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+   },
+   /* CIF */
+   {
+      {4, 0, {0x04, 0x01, 0x01}},
+      {7, 1, {0x05, 0x03, 0x01}},
+      {6, 1, {0x08, 0x03, 0x01}},
+      {4, 1, {0x0A, 0x03, 0x01}},
+      {3, 1, {0x0C, 0x03, 0x01}},
+      {2, 1, {0x0F, 0x03, 0x01}},
+      {0},
+      {0},
+   },
+   /* VGA */
+   {  
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+      {0},
+   },
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-timon.c linux-2.4.x/drivers/usb/pwc-timon.c
--- linux-2.4.x.orig/drivers/usb/pwc-timon.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-timon.c	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,1344 @@
+/* Linux driver for Philips webcam
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+
+/* This tables contains entries for the 675/680/690 (Timon) camera, with
+   4 different qualities (no compression, low, medium, high).
+   It lists the bandwidth requirements for said mode by its alternate interface
+   number. An alternate of 0 means that the mode is unavailable.
+
+   There are 6 * 4 * 4 entries:
+     6 different resolutions subqcif, qsif, qcif, sif, cif, vga
+     6 framerates: 5, 10, 15, 20, 25, 30
+     4 compression modi: none, low, medium, high
+
+   When an uncompressed mode is not available, the next available compressed mode
+   will be chosen (unless the decompressor is absent). Sometimes there are only
+   1 or 2 compressed modes available; in that case entries are duplicated.
+*/
+
+#include "pwc-timon.h"
+
+const struct Timon_table_entry Timon_table[PSZ_MAX][6][4] =
+{
+   /* SQCIF */
+   {
+      /* 5 fps */
+      {
+         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
+         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
+         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
+         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
+      },
+      /* 10 fps */
+      {
+         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
+         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
+         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
+         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
+      },
+      /* 15 fps */
+      {
+         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
+         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
+         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
+         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
+      },
+      /* 20 fps */
+      {
+         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
+         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
+         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
+         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
+      },
+      /* 25 fps */
+      {
+         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
+         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
+         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
+         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
+      },
+      /* 30 fps */
+      {
+         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
+         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
+         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
+         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
+      },
+   },
+   /* QSIF */
+   {
+      /* 5 fps */
+      {
+         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
+         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
+         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
+         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
+      },
+      /* 10 fps */
+      {
+         {2, 291,    0, {0x2C, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x23, 0xA1, 0xC0, 0x02}},
+         {1, 191,  630, {0x2C, 0xF4, 0x05, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
+         {1, 191,  630, {0x2C, 0xF4, 0x05, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
+         {1, 191,  630, {0x2C, 0xF4, 0x05, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
+      },
+      /* 15 fps */
+      {
+         {3, 437,    0, {0x2B, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xB5, 0x6D, 0xC0, 0x02}},
+         {2, 291,  640, {0x2B, 0xF4, 0x05, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
+         {2, 291,  640, {0x2B, 0xF4, 0x05, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
+         {1, 191,  420, {0x2B, 0xF4, 0x0D, 0x0D, 0x1B, 0x0C, 0x53, 0x1E, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
+      },
+      /* 20 fps */
+      {
+         {4, 588,    0, {0x2A, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x4C, 0x52, 0xC0, 0x02}},
+         {3, 447,  730, {0x2A, 0xF4, 0x05, 0x16, 0xC9, 0x16, 0x01, 0x0E, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
+         {2, 292,  476, {0x2A, 0xF4, 0x0D, 0x0E, 0xD8, 0x0E, 0x10, 0x19, 0x18, 0x24, 0xA1, 0xC0, 0x02}},
+         {1, 192,  312, {0x2A, 0xF4, 0x1D, 0x09, 0xB3, 0x08, 0xEB, 0x1E, 0x18, 0xC0, 0xF4, 0xC0, 0x02}},
+      },
+      /* 25 fps */
+      {
+         {5, 703,    0, {0x29, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xBF, 0x42, 0xC0, 0x02}},
+         {3, 447,  610, {0x29, 0xF4, 0x05, 0x13, 0x0B, 0x12, 0x43, 0x14, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
+         {2, 292,  398, {0x29, 0xF4, 0x0D, 0x0C, 0x6C, 0x0B, 0xA4, 0x1E, 0x18, 0x24, 0xA1, 0xC0, 0x02}},
+         {1, 192,  262, {0x29, 0xF4, 0x25, 0x08, 0x23, 0x07, 0x5B, 0x1E, 0x18, 0xC0, 0xF4, 0xC0, 0x02}},
+      },
+      /* 30 fps */
+      {
+         {8, 873,    0, {0x28, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x69, 0x37, 0xC0, 0x02}},
+         {5, 704,  774, {0x28, 0xF4, 0x05, 0x18, 0x21, 0x17, 0x59, 0x0F, 0x18, 0xC0, 0x42, 0xC0, 0x02}},
+         {3, 448,  492, {0x28, 0xF4, 0x05, 0x0F, 0x5D, 0x0E, 0x95, 0x15, 0x18, 0xC0, 0x69, 0xC0, 0x02}},
+         {2, 291,  320, {0x28, 0xF4, 0x1D, 0x09, 0xFB, 0x09, 0x33, 0x1E, 0x18, 0x23, 0xA1, 0xC0, 0x02}},
+      },
+   },
+   /* QCIF */
+   {
+      /* 5 fps */
+      {
+         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
+         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
+         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
+         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
+      },
+      /* 10 fps */
+      {
+         {3, 385,    0, {0x0C, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x81, 0x79, 0xC0, 0x02}},
+         {2, 291,  800, {0x0C, 0xF4, 0x05, 0x18, 0xF4, 0x18, 0x18, 0x11, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
+         {2, 291,  800, {0x0C, 0xF4, 0x05, 0x18, 0xF4, 0x18, 0x18, 0x11, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
+         {1, 194,  532, {0x0C, 0xF4, 0x05, 0x10, 0x9A, 0x0F, 0xBE, 0x1B, 0x08, 0xC2, 0xF0, 0xC0, 0x02}},
+      },
+      /* 15 fps */
+      {
+         {4, 577,    0, {0x0B, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x41, 0x52, 0xC0, 0x02}},
+         {3, 447,  818, {0x0B, 0xF4, 0x05, 0x19, 0x89, 0x18, 0xAD, 0x0F, 0x10, 0xBF, 0x69, 0xC0, 0x02}},
+         {2, 292,  534, {0x0B, 0xF4, 0x05, 0x10, 0xA3, 0x0F, 0xC7, 0x19, 0x10, 0x24, 0xA1, 0xC0, 0x02}},
+         {1, 195,  356, {0x0B, 0xF4, 0x15, 0x0B, 0x11, 0x0A, 0x35, 0x1E, 0x10, 0xC3, 0xF0, 0xC0, 0x02}},
+      },
+      /* 20 fps */
+      {
+         {6, 776,    0, {0x0A, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x08, 0x3F, 0xC0, 0x02}},
+         {4, 591,  804, {0x0A, 0xF4, 0x05, 0x19, 0x1E, 0x18, 0x42, 0x0F, 0x18, 0x4F, 0x4E, 0xC0, 0x02}},
+         {3, 447,  608, {0x0A, 0xF4, 0x05, 0x12, 0xFD, 0x12, 0x21, 0x15, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
+         {2, 291,  396, {0x0A, 0xF4, 0x15, 0x0C, 0x5E, 0x0B, 0x82, 0x1E, 0x18, 0x23, 0xA1, 0xC0, 0x02}},
+      },
+      /* 25 fps */
+      {
+         {9, 928,    0, {0x09, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xA0, 0x33, 0xC0, 0x02}},
+         {5, 703,  800, {0x09, 0xF4, 0x05, 0x18, 0xF4, 0x18, 0x18, 0x10, 0x18, 0xBF, 0x42, 0xC0, 0x02}},
+         {3, 447,  508, {0x09, 0xF4, 0x0D, 0x0F, 0xD2, 0x0E, 0xF6, 0x1B, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
+         {2, 292,  332, {0x09, 0xF4, 0x1D, 0x0A, 0x5A, 0x09, 0x7E, 0x1E, 0x18, 0x24, 0xA1, 0xC0, 0x02}},
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {9, 956,  876, {0x08, 0xF4, 0x05, 0x1B, 0x58, 0x1A, 0x7C, 0x0E, 0x20, 0xBC, 0x33, 0x10, 0x02}},
+         {4, 592,  542, {0x08, 0xF4, 0x05, 0x10, 0xE4, 0x10, 0x08, 0x17, 0x20, 0x50, 0x4E, 0x10, 0x02}},
+         {2, 291,  266, {0x08, 0xF4, 0x25, 0x08, 0x48, 0x07, 0x6C, 0x1E, 0x20, 0x23, 0xA1, 0x10, 0x02}},
+      },
+   },
+   /* SIF */
+   {
+      /* 5 fps */
+      {
+         {4, 582,    0, {0x35, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x46, 0x52, 0x60, 0x02}},
+         {3, 387, 1276, {0x35, 0xF4, 0x05, 0x27, 0xD8, 0x26, 0x48, 0x03, 0x10, 0x83, 0x79, 0x60, 0x02}},
+         {2, 291,  960, {0x35, 0xF4, 0x0D, 0x1D, 0xF2, 0x1C, 0x62, 0x04, 0x10, 0x23, 0xA1, 0x60, 0x02}},
+         {1, 191,  630, {0x35, 0xF4, 0x1D, 0x13, 0xA9, 0x12, 0x19, 0x05, 0x08, 0xBF, 0xF4, 0x60, 0x02}},
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {6, 775, 1278, {0x34, 0xF4, 0x05, 0x27, 0xE8, 0x26, 0x58, 0x05, 0x30, 0x07, 0x3F, 0x10, 0x02}},
+         {3, 447,  736, {0x34, 0xF4, 0x15, 0x16, 0xFB, 0x15, 0x6B, 0x05, 0x18, 0xBF, 0x69, 0x10, 0x02}},
+         {2, 291,  480, {0x34, 0xF4, 0x2D, 0x0E, 0xF9, 0x0D, 0x69, 0x09, 0x18, 0x23, 0xA1, 0x10, 0x02}},
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {9, 955, 1050, {0x33, 0xF4, 0x05, 0x20, 0xCF, 0x1F, 0x3F, 0x06, 0x48, 0xBB, 0x33, 0x10, 0x02}},
+         {4, 591,  650, {0x33, 0xF4, 0x15, 0x14, 0x44, 0x12, 0xB4, 0x08, 0x30, 0x4F, 0x4E, 0x10, 0x02}},
+         {3, 448,  492, {0x33, 0xF4, 0x25, 0x0F, 0x52, 0x0D, 0xC2, 0x09, 0x28, 0xC0, 0x69, 0x10, 0x02}},
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {9, 958,  782, {0x32, 0xF4, 0x0D, 0x18, 0x6A, 0x16, 0xDA, 0x0B, 0x58, 0xBE, 0x33, 0xD0, 0x02}},
+         {5, 703,  574, {0x32, 0xF4, 0x1D, 0x11, 0xE7, 0x10, 0x57, 0x0B, 0x40, 0xBF, 0x42, 0xD0, 0x02}},
+         {3, 446,  364, {0x32, 0xF4, 0x3D, 0x0B, 0x5C, 0x09, 0xCC, 0x0E, 0x30, 0xBE, 0x69, 0xD0, 0x02}},
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {9, 958,  654, {0x31, 0xF4, 0x15, 0x14, 0x66, 0x12, 0xD6, 0x0B, 0x50, 0xBE, 0x33, 0x90, 0x02}},
+         {6, 776,  530, {0x31, 0xF4, 0x25, 0x10, 0x8C, 0x0E, 0xFC, 0x0C, 0x48, 0x08, 0x3F, 0x90, 0x02}},
+         {4, 592,  404, {0x31, 0xF4, 0x35, 0x0C, 0x96, 0x0B, 0x06, 0x0B, 0x38, 0x50, 0x4E, 0x90, 0x02}},
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {9, 957,  526, {0x30, 0xF4, 0x25, 0x10, 0x68, 0x0E, 0xD8, 0x0D, 0x58, 0xBD, 0x33, 0x60, 0x02}},
+         {6, 775,  426, {0x30, 0xF4, 0x35, 0x0D, 0x48, 0x0B, 0xB8, 0x0F, 0x50, 0x07, 0x3F, 0x60, 0x02}},
+         {4, 590,  324, {0x30, 0x7A, 0x4B, 0x0A, 0x1C, 0x08, 0xB4, 0x0E, 0x40, 0x4E, 0x52, 0x60, 0x02}},
+      },
+   },
+   /* CIF */
+   {
+      /* 5 fps */
+      {
+         {6, 771,    0, {0x15, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x3F, 0x80, 0x02}},
+         {4, 465, 1278, {0x15, 0xF4, 0x05, 0x27, 0xEE, 0x26, 0x36, 0x03, 0x18, 0xD1, 0x65, 0x80, 0x02}},
+         {2, 291,  800, {0x15, 0xF4, 0x15, 0x18, 0xF4, 0x17, 0x3C, 0x05, 0x18, 0x23, 0xA1, 0x80, 0x02}},
+         {1, 193,  528, {0x15, 0xF4, 0x2D, 0x10, 0x7E, 0x0E, 0xC6, 0x0A, 0x18, 0xC1, 0xF4, 0x80, 0x02}},
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {9, 932, 1278, {0x14, 0xF4, 0x05, 0x27, 0xEE, 0x26, 0x36, 0x04, 0x30, 0xA4, 0x33, 0x10, 0x02}},
+         {4, 591,  812, {0x14, 0xF4, 0x15, 0x19, 0x56, 0x17, 0x9E, 0x06, 0x28, 0x4F, 0x4E, 0x10, 0x02}},
+         {2, 291,  400, {0x14, 0xF4, 0x3D, 0x0C, 0x7A, 0x0A, 0xC2, 0x0E, 0x28, 0x23, 0xA1, 0x10, 0x02}},
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {9, 956,  876, {0x13, 0xF4, 0x0D, 0x1B, 0x58, 0x19, 0xA0, 0x05, 0x38, 0xBC, 0x33, 0x60, 0x02}},
+         {5, 703,  644, {0x13, 0xF4, 0x1D, 0x14, 0x1C, 0x12, 0x64, 0x08, 0x38, 0xBF, 0x42, 0x60, 0x02}},
+         {3, 448,  410, {0x13, 0xF4, 0x3D, 0x0C, 0xC4, 0x0B, 0x0C, 0x0E, 0x38, 0xC0, 0x69, 0x60, 0x02}},
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {9, 956,  650, {0x12, 0xF4, 0x1D, 0x14, 0x4A, 0x12, 0x92, 0x09, 0x48, 0xBC, 0x33, 0x10, 0x03}},
+         {6, 776,  528, {0x12, 0xF4, 0x2D, 0x10, 0x7E, 0x0E, 0xC6, 0x0A, 0x40, 0x08, 0x3F, 0x10, 0x03}},
+         {4, 591,  402, {0x12, 0xF4, 0x3D, 0x0C, 0x8F, 0x0A, 0xD7, 0x0E, 0x40, 0x4F, 0x4E, 0x10, 0x03}},
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {9, 956,  544, {0x11, 0xF4, 0x25, 0x10, 0xF4, 0x0F, 0x3C, 0x0A, 0x48, 0xBC, 0x33, 0xC0, 0x02}},
+         {7, 840,  478, {0x11, 0xF4, 0x2D, 0x0E, 0xEB, 0x0D, 0x33, 0x0B, 0x48, 0x48, 0x3B, 0xC0, 0x02}},
+         {5, 703,  400, {0x11, 0xF4, 0x3D, 0x0C, 0x7A, 0x0A, 0xC2, 0x0E, 0x48, 0xBF, 0x42, 0xC0, 0x02}},
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {9, 956,  438, {0x10, 0xF4, 0x35, 0x0D, 0xAC, 0x0B, 0xF4, 0x0D, 0x50, 0xBC, 0x33, 0x10, 0x02}},
+         {7, 838,  384, {0x10, 0xF4, 0x45, 0x0B, 0xFD, 0x0A, 0x45, 0x0F, 0x50, 0x46, 0x3B, 0x10, 0x02}},
+         {6, 773,  354, {0x10, 0x7A, 0x4B, 0x0B, 0x0C, 0x09, 0x80, 0x10, 0x50, 0x05, 0x3F, 0x10, 0x02}},
+      },
+   },
+   /* VGA */
+   {
+      /* 5 fps */
+      {
+         {0, },
+         {6, 773, 1272, {0x1D, 0xF4, 0x15, 0x27, 0xB6, 0x24, 0x96, 0x02, 0x30, 0x05, 0x3F, 0x10, 0x02}},
+         {4, 592,  976, {0x1D, 0xF4, 0x25, 0x1E, 0x78, 0x1B, 0x58, 0x03, 0x30, 0x50, 0x4E, 0x10, 0x02}},
+         {3, 448,  738, {0x1D, 0xF4, 0x3D, 0x17, 0x0C, 0x13, 0xEC, 0x04, 0x30, 0xC0, 0x69, 0x10, 0x02}},
+      },
+      /* 10 fps */
+      {
+         {0, },
+         {9, 956,  788, {0x1C, 0xF4, 0x35, 0x18, 0x9C, 0x15, 0x7C, 0x03, 0x48, 0xBC, 0x33, 0x10, 0x02}},
+         {6, 776,  640, {0x1C, 0x7A, 0x53, 0x13, 0xFC, 0x11, 0x2C, 0x04, 0x48, 0x08, 0x3F, 0x10, 0x02}},
+         {4, 592,  488, {0x1C, 0x7A, 0x6B, 0x0F, 0x3C, 0x0C, 0x6C, 0x06, 0x48, 0x50, 0x4E, 0x10, 0x02}},
+      },
+      /* 15 fps */
+      {
+         {0, },
+         {9, 957,  526, {0x1B, 0x7A, 0x63, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x33, 0x80, 0x02}},
+         {9, 957,  526, {0x1B, 0x7A, 0x63, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x33, 0x80, 0x02}},
+         {8, 895,  492, {0x1B, 0x7A, 0x6B, 0x0F, 0x5D, 0x0C, 0x8D, 0x06, 0x58, 0x7F, 0x37, 0x80, 0x02}},
+      },
+      /* 20 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 25 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+      /* 30 fps */
+      {
+         {0, },
+         {0, },
+         {0, },
+         {0, },
+      },
+   },
+};
+
+
+const unsigned char TimonRomTable[16384] = {
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x01,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x01,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x01,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x4a,0x02,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0xb6,0x5b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x6d,0x49,0x02,0x00,0xb6,0x5b,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,0x25,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x76,0x4b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x76,0x4b,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x6d,0x4b,0x02,0x00,0xb6,0xdd,0x02,0x00,0xff,0xef,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x6d,0x49,0x02,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x52,0x92,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x25,0xb9,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x6d,0x49,0x02,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x52,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,0x49,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x52,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x92,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x92,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x6d,0x49,0x02,0x00,0xb6,0x5b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x02,0x00,0x00,
+0x49,0x02,0x00,0x00,0x49,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x52,0x92,0x00,0x00,0x52,0x92,0x00,0x00,0x4a,0x02,0x00,0x00,0x4a,0x02,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x6d,0x4b,0x02,0x00,0xb6,0xdd,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x92,0x92,0x00,0x00,
+0x92,0x94,0x00,0x00,0x52,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x52,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x6e,0xc9,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x36,0x01,0x00,
+0x24,0x49,0x02,0x00,0x6d,0x4b,0x02,0x00,0xb6,0xdd,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x92,0x94,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0xb6,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0x25,0xb7,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x6d,0x49,0x02,0x00,0x76,0x4b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x6d,0x4b,0x02,0x00,0xb6,0xdd,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0xb6,0x01,0x00,
+0x24,0x49,0x02,0x00,0x6d,0xdb,0x02,0x00,0xb6,0x6d,0x03,0x00,0xff,0xef,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x49,0x12,0x00,0x00,
+0x4a,0x12,0x00,0x00,0x4a,0x12,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x92,0x92,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0x52,0x12,0x00,0x00,0x52,0x12,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xe4,0x36,0x01,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,0x93,0x94,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0xb6,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xe4,0x36,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0x12,0x00,0x00,0x93,0x94,0x00,0x00,
+0x93,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x9b,0x24,0x01,0x00,0xdc,0x26,0x01,0x00,0xe4,0x36,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x25,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x2d,0xb9,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x25,0xb9,0x01,0x00,0x6e,0xc9,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x2d,0xc9,0x01,0x00,0x6e,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x26,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x2d,0xc9,0x01,0x00,0x76,0x4b,0x02,0x00,0x2d,0xc9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb9,0x01,0x00,0x6d,0x49,0x02,0x00,0x76,0x4b,0x02,0x00,0x6e,0x49,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x6d,0x49,0x02,0x00,0xb6,0x5b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x6d,0x4b,0x02,0x00,0xb6,0x5b,0x02,0x00,0x77,0x4b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x6d,0x4b,0x02,0x00,0xb6,0xdd,0x02,0x00,0xbf,0x5b,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0xb6,0x01,0x00,
+0x24,0x49,0x02,0x00,0x6d,0xdb,0x02,0x00,0xb6,0x6d,0x03,0x00,0xff,0xef,0x02,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x4a,0x92,0x00,0x00,
+0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x93,0xa4,0x00,0x00,0xdb,0x24,0x01,0x00,0x92,0x92,0x00,0x00,0x92,0x92,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdb,0x24,0x01,0x00,0x24,0xb7,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xdc,0x26,0x01,0x00,0x24,0xb7,0x01,0x00,0x93,0x94,0x00,0x00,0x93,0x94,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x92,0x00,0x00,0xdb,0x24,0x01,0x00,
+0xe4,0x36,0x01,0x00,0x24,0xb7,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x92,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,0x9b,0xa4,0x00,0x00,0x9b,0xa4,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x94,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xdb,0x24,0x01,0x00,0xdb,0x24,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x24,0xb7,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,0xdc,0x26,0x01,0x00,0xdc,0x26,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,0xe4,0x36,0x01,0x00,0xe4,0x36,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0xa4,0x00,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0x36,0x01,0x00,
+0x24,0xc9,0x01,0x00,0x25,0xb9,0x01,0x00,0x25,0xb7,0x01,0x00,0x24,0xb7,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x24,0x01,0x00,0xdb,0xb6,0x01,0x00,
+0x24,0x49,0x02,0x00,0x6d,0x49,0x02,0x00,0x2d,0xb9,0x01,0x00,0x25,0xb9,0x01,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc_timon.h linux-2.4.x/drivers/usb/pwc_timon.h
--- linux-2.4.x.orig/drivers/usb/pwc_timon.h	2006-03-04 10:10:47.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc_timon.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,270 +0,0 @@
-   /* SQCIF */
-   {
-      /* 5 fps */
-      {
-         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
-         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
-         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
-         {1, 140,    0, {0x05, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x8C, 0xFC, 0x80, 0x02}},
-      },
-      /* 10 fps */
-      {
-         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
-         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
-         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
-         {2, 280,    0, {0x04, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x18, 0xA9, 0x80, 0x02}},
-      },
-      /* 15 fps */
-      {
-         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
-         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
-         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
-         {3, 410,    0, {0x03, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x9A, 0x71, 0x80, 0x02}},
-      },
-      /* 20 fps */
-      {
-         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
-         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
-         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
-         {4, 559,    0, {0x02, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x2F, 0x56, 0x80, 0x02}},
-      },
-      /* 25 fps */
-      {
-         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
-         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
-         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
-         {5, 659,    0, {0x01, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x93, 0x46, 0x80, 0x02}},
-      },
-      /* 30 fps */
-      {
-         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
-         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
-         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
-         {7, 838,    0, {0x00, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x46, 0x3B, 0x80, 0x02}},
-      },
-   },
-   /* QSIF */
-   {
-      /* 5 fps */
-      {
-         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
-         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
-         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
-         {1, 146,    0, {0x2D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x92, 0xFC, 0xC0, 0x02}},
-      },
-      /* 10 fps */
-      {
-         {2, 291,    0, {0x2C, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x23, 0xA1, 0xC0, 0x02}},
-         {1, 191,  630, {0x2C, 0xF4, 0x05, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
-         {1, 191,  630, {0x2C, 0xF4, 0x05, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
-         {1, 191,  630, {0x2C, 0xF4, 0x05, 0x13, 0xA9, 0x12, 0xE1, 0x17, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
-      },
-      /* 15 fps */
-      {
-         {3, 437,    0, {0x2B, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xB5, 0x6D, 0xC0, 0x02}},
-         {2, 291,  640, {0x2B, 0xF4, 0x05, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
-         {2, 291,  640, {0x2B, 0xF4, 0x05, 0x13, 0xF7, 0x13, 0x2F, 0x13, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
-         {1, 191,  420, {0x2B, 0xF4, 0x0D, 0x0D, 0x1B, 0x0C, 0x53, 0x1E, 0x08, 0xBF, 0xF4, 0xC0, 0x02}},
-      },
-      /* 20 fps */
-      {
-         {4, 588,    0, {0x2A, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x4C, 0x52, 0xC0, 0x02}},
-         {3, 447,  730, {0x2A, 0xF4, 0x05, 0x16, 0xC9, 0x16, 0x01, 0x0E, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
-         {2, 292,  476, {0x2A, 0xF4, 0x0D, 0x0E, 0xD8, 0x0E, 0x10, 0x19, 0x18, 0x24, 0xA1, 0xC0, 0x02}},
-         {1, 192,  312, {0x2A, 0xF4, 0x1D, 0x09, 0xB3, 0x08, 0xEB, 0x1E, 0x18, 0xC0, 0xF4, 0xC0, 0x02}},
-      },
-      /* 25 fps */
-      {
-         {5, 703,    0, {0x29, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xBF, 0x42, 0xC0, 0x02}},
-         {3, 447,  610, {0x29, 0xF4, 0x05, 0x13, 0x0B, 0x12, 0x43, 0x14, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
-         {2, 292,  398, {0x29, 0xF4, 0x0D, 0x0C, 0x6C, 0x0B, 0xA4, 0x1E, 0x18, 0x24, 0xA1, 0xC0, 0x02}},
-         {1, 192,  262, {0x29, 0xF4, 0x25, 0x08, 0x23, 0x07, 0x5B, 0x1E, 0x18, 0xC0, 0xF4, 0xC0, 0x02}},
-      },
-      /* 30 fps */
-      {
-         {8, 873,    0, {0x28, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x69, 0x37, 0xC0, 0x02}},
-         {5, 704,  774, {0x28, 0xF4, 0x05, 0x18, 0x21, 0x17, 0x59, 0x0F, 0x18, 0xC0, 0x42, 0xC0, 0x02}},
-         {3, 448,  492, {0x28, 0xF4, 0x05, 0x0F, 0x5D, 0x0E, 0x95, 0x15, 0x18, 0xC0, 0x69, 0xC0, 0x02}},
-         {2, 291,  320, {0x28, 0xF4, 0x1D, 0x09, 0xFB, 0x09, 0x33, 0x1E, 0x18, 0x23, 0xA1, 0xC0, 0x02}},
-      },
-   },
-   /* QCIF */
-   {
-      /* 5 fps */
-      {
-         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
-         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
-         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
-         {1, 193,    0, {0x0D, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xC1, 0xF4, 0xC0, 0x02}},
-      },
-      /* 10 fps */
-      {
-         {3, 385,    0, {0x0C, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x81, 0x79, 0xC0, 0x02}},
-         {2, 291,  800, {0x0C, 0xF4, 0x05, 0x18, 0xF4, 0x18, 0x18, 0x11, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
-         {2, 291,  800, {0x0C, 0xF4, 0x05, 0x18, 0xF4, 0x18, 0x18, 0x11, 0x08, 0x23, 0xA1, 0xC0, 0x02}},
-         {1, 194,  532, {0x0C, 0xF4, 0x05, 0x10, 0x9A, 0x0F, 0xBE, 0x1B, 0x08, 0xC2, 0xF0, 0xC0, 0x02}},
-      },
-      /* 15 fps */
-      {
-         {4, 577,    0, {0x0B, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x41, 0x52, 0xC0, 0x02}},
-         {3, 447,  818, {0x0B, 0xF4, 0x05, 0x19, 0x89, 0x18, 0xAD, 0x0F, 0x10, 0xBF, 0x69, 0xC0, 0x02}},
-         {2, 292,  534, {0x0B, 0xF4, 0x05, 0x10, 0xA3, 0x0F, 0xC7, 0x19, 0x10, 0x24, 0xA1, 0xC0, 0x02}},
-         {1, 195,  356, {0x0B, 0xF4, 0x15, 0x0B, 0x11, 0x0A, 0x35, 0x1E, 0x10, 0xC3, 0xF0, 0xC0, 0x02}},
-      },
-      /* 20 fps */
-      {
-         {6, 776,    0, {0x0A, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x08, 0x3F, 0xC0, 0x02}},
-         {4, 591,  804, {0x0A, 0xF4, 0x05, 0x19, 0x1E, 0x18, 0x42, 0x0F, 0x18, 0x4F, 0x4E, 0xC0, 0x02}},
-         {3, 447,  608, {0x0A, 0xF4, 0x05, 0x12, 0xFD, 0x12, 0x21, 0x15, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
-         {2, 291,  396, {0x0A, 0xF4, 0x15, 0x0C, 0x5E, 0x0B, 0x82, 0x1E, 0x18, 0x23, 0xA1, 0xC0, 0x02}},
-      },
-      /* 25 fps */
-      {
-         {9, 928,    0, {0x09, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xA0, 0x33, 0xC0, 0x02}},
-         {5, 703,  800, {0x09, 0xF4, 0x05, 0x18, 0xF4, 0x18, 0x18, 0x10, 0x18, 0xBF, 0x42, 0xC0, 0x02}},
-         {3, 447,  508, {0x09, 0xF4, 0x0D, 0x0F, 0xD2, 0x0E, 0xF6, 0x1B, 0x18, 0xBF, 0x69, 0xC0, 0x02}},
-         {2, 292,  332, {0x09, 0xF4, 0x1D, 0x0A, 0x5A, 0x09, 0x7E, 0x1E, 0x18, 0x24, 0xA1, 0xC0, 0x02}},
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {9, 956,  876, {0x08, 0xF4, 0x05, 0x1B, 0x58, 0x1A, 0x7C, 0x0E, 0x20, 0xBC, 0x33, 0x10, 0x02}},
-         {4, 592,  542, {0x08, 0xF4, 0x05, 0x10, 0xE4, 0x10, 0x08, 0x17, 0x20, 0x50, 0x4E, 0x10, 0x02}},
-         {2, 291,  266, {0x08, 0xF4, 0x25, 0x08, 0x48, 0x07, 0x6C, 0x1E, 0x20, 0x23, 0xA1, 0x10, 0x02}},
-      },
-   },
-   /* SIF */
-   {
-      /* 5 fps */
-      {
-         {4, 582,    0, {0x35, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x46, 0x52, 0x60, 0x02}},
-         {3, 387, 1276, {0x35, 0xF4, 0x05, 0x27, 0xD8, 0x26, 0x48, 0x03, 0x10, 0x83, 0x79, 0x60, 0x02}},
-         {2, 291,  960, {0x35, 0xF4, 0x0D, 0x1D, 0xF2, 0x1C, 0x62, 0x04, 0x10, 0x23, 0xA1, 0x60, 0x02}},
-         {1, 191,  630, {0x35, 0xF4, 0x1D, 0x13, 0xA9, 0x12, 0x19, 0x05, 0x08, 0xBF, 0xF4, 0x60, 0x02}},
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {6, 775, 1278, {0x34, 0xF4, 0x05, 0x27, 0xE8, 0x26, 0x58, 0x05, 0x30, 0x07, 0x3F, 0x10, 0x02}},
-         {3, 447,  736, {0x34, 0xF4, 0x15, 0x16, 0xFB, 0x15, 0x6B, 0x05, 0x18, 0xBF, 0x69, 0x10, 0x02}},
-         {2, 291,  480, {0x34, 0xF4, 0x2D, 0x0E, 0xF9, 0x0D, 0x69, 0x09, 0x18, 0x23, 0xA1, 0x10, 0x02}},
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {9, 955, 1050, {0x33, 0xF4, 0x05, 0x20, 0xCF, 0x1F, 0x3F, 0x06, 0x48, 0xBB, 0x33, 0x10, 0x02}},
-         {4, 591,  650, {0x33, 0xF4, 0x15, 0x14, 0x44, 0x12, 0xB4, 0x08, 0x30, 0x4F, 0x4E, 0x10, 0x02}},
-         {3, 448,  492, {0x33, 0xF4, 0x25, 0x0F, 0x52, 0x0D, 0xC2, 0x09, 0x28, 0xC0, 0x69, 0x10, 0x02}},
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {9, 958,  782, {0x32, 0xF4, 0x0D, 0x18, 0x6A, 0x16, 0xDA, 0x0B, 0x58, 0xBE, 0x33, 0xD0, 0x02}},
-         {5, 703,  574, {0x32, 0xF4, 0x1D, 0x11, 0xE7, 0x10, 0x57, 0x0B, 0x40, 0xBF, 0x42, 0xD0, 0x02}},
-         {3, 446,  364, {0x32, 0xF4, 0x3D, 0x0B, 0x5C, 0x09, 0xCC, 0x0E, 0x30, 0xBE, 0x69, 0xD0, 0x02}},
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {9, 958,  654, {0x31, 0xF4, 0x15, 0x14, 0x66, 0x12, 0xD6, 0x0B, 0x50, 0xBE, 0x33, 0x90, 0x02}},
-         {6, 776,  530, {0x31, 0xF4, 0x25, 0x10, 0x8C, 0x0E, 0xFC, 0x0C, 0x48, 0x08, 0x3F, 0x90, 0x02}},
-         {4, 592,  404, {0x31, 0xF4, 0x35, 0x0C, 0x96, 0x0B, 0x06, 0x0B, 0x38, 0x50, 0x4E, 0x90, 0x02}},
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {9, 957,  526, {0x30, 0xF4, 0x25, 0x10, 0x68, 0x0E, 0xD8, 0x0D, 0x58, 0xBD, 0x33, 0x60, 0x02}},
-         {6, 775,  426, {0x30, 0xF4, 0x35, 0x0D, 0x48, 0x0B, 0xB8, 0x0F, 0x50, 0x07, 0x3F, 0x60, 0x02}},
-         {4, 590,  324, {0x30, 0x7A, 0x4B, 0x0A, 0x1C, 0x08, 0xB4, 0x0E, 0x40, 0x4E, 0x52, 0x60, 0x02}},
-      },
-   },
-   /* CIF */
-   {
-      /* 5 fps */
-      {
-         {6, 771,    0, {0x15, 0xF4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x3F, 0x80, 0x02}},
-         {4, 465, 1278, {0x15, 0xF4, 0x05, 0x27, 0xEE, 0x26, 0x36, 0x03, 0x18, 0xD1, 0x65, 0x80, 0x02}},
-         {2, 291,  800, {0x15, 0xF4, 0x15, 0x18, 0xF4, 0x17, 0x3C, 0x05, 0x18, 0x23, 0xA1, 0x80, 0x02}},
-         {1, 193,  528, {0x15, 0xF4, 0x2D, 0x10, 0x7E, 0x0E, 0xC6, 0x0A, 0x18, 0xC1, 0xF4, 0x80, 0x02}},
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {9, 932, 1278, {0x14, 0xF4, 0x05, 0x27, 0xEE, 0x26, 0x36, 0x04, 0x30, 0xA4, 0x33, 0x10, 0x02}},
-         {4, 591,  812, {0x14, 0xF4, 0x15, 0x19, 0x56, 0x17, 0x9E, 0x06, 0x28, 0x4F, 0x4E, 0x10, 0x02}},
-         {2, 291,  400, {0x14, 0xF4, 0x3D, 0x0C, 0x7A, 0x0A, 0xC2, 0x0E, 0x28, 0x23, 0xA1, 0x10, 0x02}},
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {9, 956,  876, {0x13, 0xF4, 0x0D, 0x1B, 0x58, 0x19, 0xA0, 0x05, 0x38, 0xBC, 0x33, 0x60, 0x02}},
-         {5, 703,  644, {0x13, 0xF4, 0x1D, 0x14, 0x1C, 0x12, 0x64, 0x08, 0x38, 0xBF, 0x42, 0x60, 0x02}},
-         {3, 448,  410, {0x13, 0xF4, 0x3D, 0x0C, 0xC4, 0x0B, 0x0C, 0x0E, 0x38, 0xC0, 0x69, 0x60, 0x02}},
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {9, 956,  650, {0x12, 0xF4, 0x1D, 0x14, 0x4A, 0x12, 0x92, 0x09, 0x48, 0xBC, 0x33, 0x10, 0x03}},
-         {6, 776,  528, {0x12, 0xF4, 0x2D, 0x10, 0x7E, 0x0E, 0xC6, 0x0A, 0x40, 0x08, 0x3F, 0x10, 0x03}},
-         {4, 591,  402, {0x12, 0xF4, 0x3D, 0x0C, 0x8F, 0x0A, 0xD7, 0x0E, 0x40, 0x4F, 0x4E, 0x10, 0x03}},
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {9, 956,  544, {0x11, 0xF4, 0x25, 0x10, 0xF4, 0x0F, 0x3C, 0x0A, 0x48, 0xBC, 0x33, 0xC0, 0x02}},
-         {7, 840,  478, {0x11, 0xF4, 0x2D, 0x0E, 0xEB, 0x0D, 0x33, 0x0B, 0x48, 0x48, 0x3B, 0xC0, 0x02}},
-         {5, 703,  400, {0x11, 0xF4, 0x3D, 0x0C, 0x7A, 0x0A, 0xC2, 0x0E, 0x48, 0xBF, 0x42, 0xC0, 0x02}},
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {9, 956,  438, {0x10, 0xF4, 0x35, 0x0D, 0xAC, 0x0B, 0xF4, 0x0D, 0x50, 0xBC, 0x33, 0x10, 0x02}},
-         {7, 838,  384, {0x10, 0xF4, 0x45, 0x0B, 0xFD, 0x0A, 0x45, 0x0F, 0x50, 0x46, 0x3B, 0x10, 0x02}},
-         {6, 773,  354, {0x10, 0x7A, 0x4B, 0x0B, 0x0C, 0x09, 0x80, 0x10, 0x50, 0x05, 0x3F, 0x10, 0x02}},
-      },
-   },
-   /* VGA */
-   {
-      /* 5 fps */
-      {
-         {0, },
-         {6, 773, 1272, {0x1D, 0xF4, 0x15, 0x27, 0xB6, 0x24, 0x96, 0x02, 0x30, 0x05, 0x3F, 0x10, 0x02}},
-         {4, 592,  976, {0x1D, 0xF4, 0x25, 0x1E, 0x78, 0x1B, 0x58, 0x03, 0x30, 0x50, 0x4E, 0x10, 0x02}},
-         {3, 448,  738, {0x1D, 0xF4, 0x3D, 0x17, 0x0C, 0x13, 0xEC, 0x04, 0x30, 0xC0, 0x69, 0x10, 0x02}},
-      },
-      /* 10 fps */
-      {
-         {0, },
-         {9, 956,  788, {0x1C, 0xF4, 0x35, 0x18, 0x9C, 0x15, 0x7C, 0x03, 0x48, 0xBC, 0x33, 0x10, 0x02}},
-         {6, 776,  640, {0x1C, 0x7A, 0x53, 0x13, 0xFC, 0x11, 0x2C, 0x04, 0x48, 0x08, 0x3F, 0x10, 0x02}},
-         {4, 592,  488, {0x1C, 0x7A, 0x6B, 0x0F, 0x3C, 0x0C, 0x6C, 0x06, 0x48, 0x50, 0x4E, 0x10, 0x02}},
-      },
-      /* 15 fps */
-      {
-         {0, },
-         {9, 957,  526, {0x1B, 0x7A, 0x63, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x33, 0x80, 0x02}},
-         {9, 957,  526, {0x1B, 0x7A, 0x63, 0x10, 0x68, 0x0D, 0x98, 0x06, 0x58, 0xBD, 0x33, 0x80, 0x02}},
-         {8, 895,  492, {0x1B, 0x7A, 0x6B, 0x0F, 0x5D, 0x0C, 0x8D, 0x06, 0x58, 0x7F, 0x37, 0x80, 0x02}},
-      },
-      /* 20 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 25 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-      /* 30 fps */
-      {
-         {0, },
-         {0, },
-         {0, },
-         {0, },
-      },
-   },
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-timon.h linux-2.4.x/drivers/usb/pwc-timon.h
--- linux-2.4.x.orig/drivers/usb/pwc-timon.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-timon.h	2006-07-03 11:13:17.000000000 +0200
@@ -0,0 +1,61 @@
+/* Linux driver for Philips webcam
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+
+
+/* This tables contains entries for the 675/680/690 (Timon) camera, with
+   4 different qualities (no compression, low, medium, high).
+   It lists the bandwidth requirements for said mode by its alternate interface
+   number. An alternate of 0 means that the mode is unavailable.
+
+   There are 6 * 4 * 4 entries:
+     6 different resolutions subqcif, qsif, qcif, sif, cif, vga
+     6 framerates: 5, 10, 15, 20, 25, 30
+     4 compression modi: none, low, medium, high
+
+   When an uncompressed mode is not available, the next available compressed mode
+   will be chosen (unless the decompressor is absent). Sometimes there are only
+   1 or 2 compressed modes available; in that case entries are duplicated.
+*/
+
+#ifndef PWC_TIMON_H
+#define PWC_TIMON_H
+
+#include "pwc-ioctl.h"
+
+struct Timon_table_entry
+{
+	char alternate;			/* USB alternate interface */
+	unsigned short packetsize;	/* Normal packet size */
+	unsigned short bandlength;	/* Bandlength when decompressing */
+	unsigned char mode[13];		/* precomputed mode settings for cam */
+};
+
+const extern struct Timon_table_entry Timon_table[PSZ_MAX][6][4];
+const extern unsigned char TimonRomTable[16384];
+
+
+#endif
+
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-uncompress.c linux-2.4.x/drivers/usb/pwc-uncompress.c
--- linux-2.4.x.orig/drivers/usb/pwc-uncompress.c	2006-03-04 10:10:48.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-uncompress.c	2006-07-03 11:13:17.000000000 +0200
@@ -1,6 +1,13 @@
-/* Linux driver for Philips webcam 
+/* Linux driver for Philips webcam
    Decompression frontend.
-   (C) 1999-2002 Nemosoft Unv. (webcam@smcc.demon.nl)
+   (C) 1999-2003 Nemosoft Unv.
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -16,62 +23,14 @@
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
-/*
-   This is where the decompression routines register and unregister 
-   themselves. It also has a decompressor wrapper function.
-*/
 
+#include <asm/current.h>
 #include <asm/types.h>
 
 #include "pwc.h"
 #include "pwc-uncompress.h"
-
-
-/* This contains a list of all registered decompressors */
-static LIST_HEAD(pwc_decompressor_list);
-
-/* Should the pwc_decompress structure ever change, we increase the 
-   version number so that we don't get nasty surprises, or can 
-   dynamicly adjust our structure.
- */
-const int pwc_decompressor_version = PWC_MAJOR;
-
-/* Add decompressor to list, ignoring duplicates */
-void pwc_register_decompressor(struct pwc_decompressor *pwcd)
-{
-	if (pwc_find_decompressor(pwcd->type) == NULL) {
-		Trace(TRACE_PWCX, "Adding decompressor for model %d.\n", pwcd->type);
-		list_add_tail(&pwcd->pwcd_list, &pwc_decompressor_list);
-	}
-}
-
-/* Remove decompressor from list */
-void pwc_unregister_decompressor(int type)
-{
-	struct pwc_decompressor *find;
-	
-	find = pwc_find_decompressor(type);
-	if (find != NULL) {
-		Trace(TRACE_PWCX, "Removing decompressor for model %d.\n", type);
-		list_del(&find->pwcd_list);
-	}
-}
-
-/* Find decompressor in list */
-struct pwc_decompressor *pwc_find_decompressor(int type)
-{
-	struct list_head *tmp;
-	struct pwc_decompressor *pwcd;
-
-	list_for_each(tmp, &pwc_decompressor_list) {
-		pwcd  = list_entry(tmp, struct pwc_decompressor, pwcd_list);
-		if (pwcd->type == type)
-			return pwcd;
-	}
-	return NULL;
-}
-
-
+#include "pwc-dec1.h"
+#include "pwc-dec23.h"
 
 int pwc_decompress(struct pwc_device *pdev)
 {
@@ -81,7 +40,6 @@
 	u16 *src;
 	u16 *dsty, *dstu, *dstv;
 
-	
 	if (pdev == NULL)
 		return -EFAULT;
 #if defined(__KERNEL__) && defined(PWC_MAGIC)
@@ -97,26 +55,24 @@
 	image = pdev->image_ptr[pdev->fill_image];
 	if (!image)
 		return -EFAULT;
-	
-#if PWC_DEBUG
-	/* This is a quickie */
-	if (pdev->vpalette == VIDEO_PALETTE_RAW) {
-		memcpy(image, fbuf->data, pdev->frame_size);
+
+	yuv = fbuf->data + pdev->frame_header_size;  /* Skip header */
+
+	/* Raw format; that's easy... */
+	if (pdev->vpalette == VIDEO_PALETTE_RAW)
+	{
+		memcpy(image, yuv, pdev->frame_size);
 		return 0;
 	}
-#endif
 
-	yuv = fbuf->data + pdev->frame_header_size;  /* Skip header */
-	if (pdev->vbandlength == 0) { 
+	if (pdev->vbandlength == 0) {
 		/* Uncompressed mode. We copy the data into the output buffer,
 		   using the viewport size (which may be larger than the image
 		   size). Unfortunately we have to do a bit of byte stuffing
 		   to get the desired output format/size.
 		 */
-		switch (pdev->vpalette) {
-		case VIDEO_PALETTE_YUV420P:
-			/* 
-			 * We do some byte shuffling here to go from the 
+			/*
+			 * We do some byte shuffling here to go from the
 			 * native format to YUV420P.
 			 */
 			src = (u16 *)yuv;
@@ -149,32 +105,43 @@
 				else
 					dstu += (stride >> 1);
 			}
-			break;
-		default:
-			Err("Unsupported palette!");
-			break;
-		}
 	}
-	else { 
-		/* Compressed; the decompressor routines will write the data 
+	else {
+		/* Compressed; the decompressor routines will write the data
 		   in planar format immediately.
 		 */
-		if (pdev->decompressor)
-			pdev->decompressor->decompress(
-				&pdev->image, &pdev->view, &pdev->offset,
+		int flags;
+                
+                flags = PWCX_FLAG_PLANAR;
+                if (pdev->vsize == PSZ_VGA && pdev->vframes == 5 && pdev->vsnapshot)
+		 {
+		   printk(KERN_ERR "pwc: Mode Bayer is not supported for now\n");
+		   flags |= PWCX_FLAG_BAYER;
+		   return -ENXIO; /* No such device or address: missing decompressor */
+		 }
+
+		switch (pdev->type)
+		 {
+		  case 675:
+		  case 680:
+		  case 690:
+		  case 720:
+		  case 730:
+		  case 740:
+		  case 750:
+		    pwc_dec23_decompress(&pdev->image, &pdev->view, &pdev->offset,
 				yuv, image,
-				1,
+				flags,
 				pdev->decompress_data, pdev->vbandlength);
-		else
-			return -ENXIO; /* No such device or address: missing decompressor */
+		    break;
+		  case 645:
+		  case 646:
+		    /* TODO & FIXME */
+		    return -ENXIO; /* No such device or address: missing decompressor */
+		    break;
+		 }
 	}
 	return 0;
 }
 
-/* Make sure these functions are available for the decompressor plugin
-   both when this code is compiled into the kernel or as as module.
- */
-
-EXPORT_SYMBOL_NOVERS(pwc_decompressor_version);
-EXPORT_SYMBOL(pwc_register_decompressor);
-EXPORT_SYMBOL(pwc_unregister_decompressor);
+
diff -Nur linux-2.4.x.orig/drivers/usb/pwc-uncompress.h linux-2.4.x/drivers/usb/pwc-uncompress.h
--- linux-2.4.x.orig/drivers/usb/pwc-uncompress.h	2006-03-04 10:10:47.000000000 +0100
+++ linux-2.4.x/drivers/usb/pwc-uncompress.h	2006-07-03 11:13:17.000000000 +0200
@@ -1,4 +1,11 @@
-/* (C) 1999-2002 Nemosoft Unv. (webcam@smcc.demon.nl)
+/* (C) 1999-2003 Nemosoft Unv.
+   (C) 2004      Luc Saillard (luc@saillard.org)
+
+   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx
+   driver and thus may have bugs that are not present in the original version.
+   Please send bug reports and support requests to <luc@saillard.org>.
+   The decompression routines have been implemented by reverse-engineering the
+   Nemosoft binary pwcx module. Caveat emptor.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -24,54 +31,11 @@
 #define PWC_UNCOMPRESS_H
 
 #include <linux/config.h>
-#include <linux/list.h>
-
-#include "pwc.h"
 
-#ifdef __cplusplus
-extern "C" {
-#endif
+#include "pwc-ioctl.h"
 
-/* The decompressor structure. 
-   Every type of decompressor registers itself with the main module. 
-   When a device is opened, it looks up the correct compressor, and
-   uses that when a compressed video mode is requested.
- */
-struct pwc_decompressor
-{
-	int  type;		/* type of camera (645, 680, etc) */
-	int  table_size;	/* memory needed */
-
-	void (* init)(int release, void *buffer, void *table);	/* Initialization routine; should be called after each set_video_mode */
-	void (* exit)(void);	/* Cleanup routine */
-	void (* decompress)(struct pwc_coord *image, struct pwc_coord *view, struct pwc_coord *offset,
-                            void *src, void *dst, int planar,
-	                    void *table, int bandlength);
-	void (* lock)(void);	/* make sure module cannot be unloaded */
-	void (* unlock)(void);	/* release lock on module */
-
-	struct list_head pwcd_list;
-};
-
-
-/* Our structure version number. Is set to the version number major */
-extern const int pwc_decompressor_version;
-
-/* Adds decompressor to list, based on its 'type' field (which matches the 'type' field in pwc_device; ignores any double requests */
-extern void pwc_register_decompressor(struct pwc_decompressor *pwcd);
-/* Removes decompressor, based on the type number */
-extern void pwc_unregister_decompressor(int type);
-/* Returns pointer to decompressor struct, or NULL if it doesn't exist */
-extern struct pwc_decompressor *pwc_find_decompressor(int type);
-
-#ifdef CONFIG_USB_PWCX
-/* If the decompressor is compiled in, we must call these manually */
-extern int usb_pwcx_init(void);
-extern void usb_pwcx_exit(void);
-#endif
-
-#ifdef __cplusplus
-}
-#endif
+/* from pwc-dec.h */
+#define PWCX_FLAG_PLANAR        0x0001
+/* */
 
 #endif
