--- src/common/util.c.orig	2011-08-26 23:10:58.000000000 +0000
+++ src/common/util.c	2011-09-05 03:24:02.828718047 +0000
@@ -334,7 +334,79 @@
 long
 tor_lround(double d)
 {
+#ifdef __UCLIBC__
+
+typedef union
+{
+  long double value;
+  struct
+  {
+    u_int64_t msw;
+    u_int64_t lsw;
+  } parts64;
+  struct
+  { 
+    u_int32_t w0, w1, w2, w3;
+  } parts32;
+} ieee854_long_double_shape_type;
+
+#define GET_LDOUBLE_WORDS64(ix0,ix1,d)                          \
+do {                                                            \
+  ieee854_long_double_shape_type qw_u;                          \
+  qw_u.value = (d);                                             \
+  (ix0) = qw_u.parts64.msw;                                     \
+  (ix1) = qw_u.parts64.lsw;                                     \
+} while (0)
+
+  int64_t j0;
+  u_int64_t i1, i0;
+  long int result;
+  int sign;
+
+  GET_LDOUBLE_WORDS64 (i0, i1, d);
+  j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;
+  sign = (i0 & 0x8000000000000000ULL) != 0 ? -1 : 1;
+  i0 &= 0x0000ffffffffffffLL;
+  i0 |= 0x0001000000000000LL;
+
+  if (j0 < 48)
+    {
+      if (j0 < 0)
+       return j0 < -1 ? 0 : sign;
+      else
+       {
+         i0 += 0x0000800000000000LL >> j0;
+         result = i0 >> (48 - j0);
+       }
+    }
+  else if (j0 < (int32_t) (8 * sizeof (long int)) - 1)
+    {
+      if (j0 >= 112)
+       result = ((long int) i0 << (j0 - 48)) | (i1 << (j0 - 112));
+      else
+       {
+         u_int64_t j = i1 + (0x8000000000000000ULL >> (j0 - 48));
+         if (j < i1)
+           ++i0;
+
+         if (j0 == 48)
+           result = (long int) i0;
+         else
+           result = ((long int) i0 << (j0 - 48)) | (j >> (112 - j0));
+       }
+    }
+  else
+    {
+      /* The number is too large.  It is left implementation defined
+        what happens.  */
+      return (long int) d;
+    }
+
+  return sign * result;
+#undef GET_LDOUBLE_WORDS64
+#else
   return lround(d);
+#endif
 }
 
 /** Returns floor(log2(u64)).  If u64 is 0, (incorrectly) returns 0. */
