--- tshark/epan/dissectors/packet-ntlmssp.c.orig	2011-04-18 13:42:57.000000000 -0500
+++ tshark/epan/dissectors/packet-ntlmssp.c	2011-04-26 17:03:35.245833296 -0500
@@ -2567,6 +2567,96 @@ dissect_ntlmssp_encrypted_payload(tvbuff
 }
 #endif
 
+#if 0
+tvbuff_t *
+dissect_ntlmssp_encrypted_payload(tvbuff_t *data_tvb,
+				  tvbuff_t *auth_tvb _U_,
+				  int offset,
+				  packet_info *pinfo,
+				  dcerpc_auth_info *auth_info _U_)
+{
+  / * gssapi_decrypted_tvb=NULL * /
+  tvbuff_t *decr_tvb; / * Used to display decrypted buffer * /
+  guint8 *peer_block;
+  conversation_t *conversation;
+  guint32 encrypted_block_length;
+  rc4_state_struct *rc4_state;
+  rc4_state_struct *rc4_state_peer;
+  ntlmssp_info *conv_ntlmssp_info = NULL;
+  ntlmssp_packet_info *packet_ntlmssp_info = NULL;
+  encrypted_block_length = tvb_length_remaining (data_tvb, offset);
+
+  fprintf(stderr,"Called dissect_ntlmssp_encrypted_payload\n");
+  / * Check to see if we already have state for this packet * /
+  packet_ntlmssp_info = p_get_proto_data(pinfo->fd, proto_ntlmssp);
+  if (packet_ntlmssp_info == NULL) {
+    / * We don''t have any packet state, so create one * /
+    packet_ntlmssp_info = se_alloc0(sizeof(ntlmssp_packet_info));
+    p_add_proto_data(pinfo->fd, proto_ntlmssp, packet_ntlmssp_info);
+  }
+
+  if (!packet_ntlmssp_info->payload_decrypted) {
+    / * Pull the challenge info from the conversation * /
+    conversation = find_conversation(pinfo->fd->num, &pinfo->src, &pinfo->dst,
+				     pinfo->ptype, pinfo->srcport,
+				     pinfo->destport, 0);
+    if (conversation == NULL) {
+      / * There is no conversation, thus no encryption state * /
+      return NULL;
+
+    }
+    conv_ntlmssp_info = conversation_get_proto_data(conversation,
+						    proto_ntlmssp);
+    if (conv_ntlmssp_info == NULL) {
+    / * There is no NTLMSSP state tied to the conversation * /
+    return NULL;
+    }
+    / * Get the pair of RC4 state structures.  One is used for to decrypt the
+       payload.  The other is used to re-encrypt the payload to represent
+       the peer * /
+    if (conv_ntlmssp_info->server_dest_port == pinfo->destport) {
+      rc4_state = get_encrypted_state(pinfo, 1);
+      rc4_state_peer = get_encrypted_state(pinfo, 0);
+    } else {
+      rc4_state = get_encrypted_state(pinfo, 0);
+      rc4_state_peer = get_encrypted_state(pinfo, 1);
+    }
+
+    if (rc4_state == NULL || rc4_state_peer == NULL) {
+      / * There is no encryption state, so we cannot decrypt * /
+      return NULL;
+    }
+
+    / * Store the decrypted contents in the packet state struct
+       (of course at this point, they aren''t decrypted yet) * /
+    packet_ntlmssp_info->decrypted_payload = tvb_memdup(data_tvb, offset,
+                                                        encrypted_block_length);
+    decrypted_payloads = g_slist_prepend(decrypted_payloads,
+                                         packet_ntlmssp_info->decrypted_payload);
+
+    / * Do the decryption of the payload * /
+    crypt_rc4(rc4_state, packet_ntlmssp_info->decrypted_payload,
+	      encrypted_block_length);
+
+    / * We setup a temporary buffer so we can re-encrypt the payload after
+       decryption.  This is to update the opposite peer''s RC4 state * /
+    peer_block = ep_memdup(packet_ntlmssp_info->decrypted_payload, encrypted_block_length);
+    crypt_rc4(rc4_state_peer, peer_block, encrypted_block_length);
+
+    packet_ntlmssp_info->payload_decrypted = TRUE;
+  }
+
+  / * Show the decrypted buffer in a new window * /
+  decr_tvb = tvb_new_child_real_data(data_tvb, packet_ntlmssp_info->decrypted_payload,
+			       encrypted_block_length,
+			       encrypted_block_length);
+
+  offset += encrypted_block_length;
+
+  return decr_tvb;
+}
+#endif
+
 static void
 free_payload(gpointer decrypted_payload, gpointer user_data _U_)
 {
