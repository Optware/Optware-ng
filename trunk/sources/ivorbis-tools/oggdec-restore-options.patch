diff -brU5 ivorbis-tools/oggdec/oggdec.c ivorbis-tools.new/oggdec/oggdec.c
--- ivorbis-tools/oggdec/oggdec.c	2012-03-19 01:54:36.000000000 +0100
+++ ivorbis-tools.new/oggdec/oggdec.c	2012-03-19 01:58:17.000000000 +0100
@@ -10,23 +10,62 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <getopt.h>
 #include <errno.h>
 #include <string.h>
+#include <endian.h>
+#include <stdint.h>
+#include <byteswap.h>
 
 #if defined(_WIN32) || defined(__EMX__) || defined(__WATCOMC__)
 #include <fcntl.h>
 #include <io.h>
 #endif
 
 #include <tremor/ivorbisfile.h>
 
+// from newer endian.h
+# if __BYTE_ORDER == __LITTLE_ENDIAN
+#  define htobe16(x) __bswap_16 (x)
+#  define htole16(x) (x)
+#  define be16toh(x) __bswap_16 (x)
+#  define le16toh(x) (x)
+
+#  define htobe32(x) __bswap_32 (x)
+#  define htole32(x) (x)
+#  define be32toh(x) __bswap_32 (x)
+#  define le32toh(x) (x)
+
+#  define htobe64(x) __bswap_64 (x)
+#  define htole64(x) (x)
+#  define be64toh(x) __bswap_64 (x)
+#  define le64toh(x) (x)
+# else
+#  define htobe16(x) (x)
+#  define htole16(x) __bswap_16 (x)
+#  define be16toh(x) (x)
+#  define le16toh(x) __bswap_16 (x)
+
+#  define htobe32(x) (x)
+#  define htole32(x) __bswap_32 (x)
+#  define be32toh(x) (x)
+#  define le32toh(x) __bswap_32 (x)
+
+#  define htobe64(x) (x)
+#  define htole64(x) __bswap_64 (x)
+#  define be64toh(x) (x)
+#  define le64toh(x) __bswap_64 (x)
+# endif
+
 struct option long_options[] = {
     {"quiet", 0,0,'Q'},
     {"help",0,0,'h'},
     {"version", 0, 0, 'v'},
+    {"bits", 1, 0, 'b'},
+    {"endianness", 1, 0, 'e'},
     {"raw", 1, 0, 'R'},
+    {"sign", 1, 0, 's'},
     {"output", 1, 0, 'o'},
     {NULL,0,0,0}
 };
 
 #define VERSIONSTRING "OggDec 1.0 (Tremor)\n"
@@ -44,11 +83,17 @@
                     "\n"
                     "Supported flags:\n"
                     " --quiet, -Q      Quiet mode. No console output.\n"
                     " --help,  -h      Produce this help message.\n"
                     " --version, -v    Print out version number.\n"
+                    " --bits, -b       Bit depth for output (8 and 16 supported)\n"
+                    " --endianness, -e Output endianness for 16 bit output. 0 for\n"
+                    "                  little endian (default), 1 for big endian\n"
+                    " --sign, -s       Sign for output PCM, 0 for unsigned, 1 for\n"
+                    "                  signed (default 1)\n"
                     " --raw, -R        Raw (headerless) output.\n"
+                    "                  0 for wav (default), 1 for raw\n"
                     " --output, -o     Output to given filename. May only be used\n"
                     "                  if there is only one input file\n"
 
             );
 
@@ -58,11 +103,11 @@
 static void parse_options(int argc, char **argv)
 {
     int option_index = 1;
     int ret;
 
-    while((ret = getopt_long(argc, argv, "QhvR:o:", 
+    while((ret = getopt_long(argc, argv, "Qhvb:e:R:s:o:",
                     long_options, &option_index)) != -1)
     {
         switch(ret)
         {
             case 'Q':
@@ -74,10 +119,23 @@
                 break;
             case 'v':
                 fprintf(stderr, VERSIONSTRING);
                 exit(0);
                 break;
+            case 's':
+                sign = atoi(optarg);
+                break;
+            case 'b':
+                bits = atoi(optarg);
+                if(bits <= 8)
+                    bits = 8;
+                else
+                    bits = 16;
+                break;
+            case 'e':
+                endian = atoi(optarg);
+                break;
             case 'o':
                 outfilename = strdup(optarg);
             case 'R':
                 raw = atoi(optarg);
                 break;
@@ -226,23 +284,52 @@
         if(bs != 0) {
             fprintf(stderr, "Only one logical bitstream currently supported\n");
             break;
         }
 
+        if (ret % 2)
+        {
+            fprintf(stderr, "ov_read() returned half sample - not supported\n");
+            break;
+        }
+
         if(ret < 0 && !quiet) {
             fprintf(stderr, "Warning: hole in data\n");
             continue;
         }
 
-	{ /* byteswap */
+        int samples = ret / 2;
+        if (bits == 8)
+        {
 	    int i;
-	    char tmp_char;
-	    for(i=0;i<ret;i+=2) {
-		tmp_char = buf[i];
-		buf[i] = buf[i+1];
-		buf[i+1] = tmp_char;
+            char offset = (sign == 0) ? -0x80 : 0;
+            for (i = 0; i < samples; ++i)
+#if __BYTE_ORDER == __LITTLE_ENDIAN || __BYTE_ORDER == __PDP_ENDIAN
+                buf[i] = buf[2*i + 1] + offset;
+#else // __BYTE_ORDER == __BIG_ENDIAN
+                buf[i] = buf[2*i] + offset;
+#endif // __BYTE_ORDER == __BIG_ENDIAN
+            ret = samples;
 	    }
+        else // bits == 16
+        {
+            int i;
+            uint16_t * p = buf;
+            if (endian == 0) // LE
+                if (sign == 0)
+                    for (i = 0; i < samples; ++i)
+                        p[i] = htole16(p[i] + 0x8000);
+                else // sign == 1
+                    for (i = 0; i < samples; ++i)
+                        p[i] = htole16(p[i]);
+            else // endian == 1 BE
+                if (sign == 0)
+                    for (i = 0; i < samples; ++i)
+                        p[i] = htobe16(p[i]+ 0x8000);
+                else // sign == 1
+                    for (i = 0; i < samples; ++i)
+                        p[i] = htobe16(p[i]);
 	}
 
         if(fwrite(buf, 1, ret, out) != ret) {
             fprintf(stderr, "Error writing to file: %s\n", strerror(errno));
             ov_clear(&vf);
